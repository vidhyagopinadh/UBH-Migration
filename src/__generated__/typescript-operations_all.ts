export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type AddDependentMutationVariables = Exact<{
  input: AddDependentInput;
}>;


export type AddDependentMutation = (
  { __typename?: 'Mutation' }
  & { addDependent?: Maybe<(
    { __typename?: 'AddDependentPayload' }
    & Pick<AddDependentPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type AddNewPatientV1MutationVariables = Exact<{
  input: AddNewPatientV1Input;
}>;


export type AddNewPatientV1Mutation = (
  { __typename?: 'Mutation' }
  & { addNewPatientV1?: Maybe<(
    { __typename?: 'AddNewPatientV1Payload' }
    & Pick<AddNewPatientV1Payload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type CreateAddendumRecordsRequestMutationVariables = Exact<{
  input: CreateAddendumRecordsRequestInput;
}>;


export type CreateAddendumRecordsRequestMutation = (
  { __typename?: 'Mutation' }
  & { createAddendumRecordsRequest?: Maybe<(
    { __typename?: 'CreateAddendumRecordsRequestPayload' }
    & Pick<CreateAddendumRecordsRequestPayload, 'clientMutationId' | 'recordId'>
  )> }
);

export type SaveExternalIntegrationMutationVariables = Exact<{
  input: SaveExternalIntegrationInput;
}>;


export type SaveExternalIntegrationMutation = (
  { __typename?: 'Mutation' }
  & { saveExternalIntegration?: Maybe<(
    { __typename?: 'SaveExternalIntegrationPayload' }
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type CreateFeedbackV1MutationVariables = Exact<{
  input: CreateFeedbackV1Input;
}>;


export type CreateFeedbackV1Mutation = (
  { __typename?: 'Mutation' }
  & { createFeedbackV1?: Maybe<(
    { __typename?: 'CreateFeedbackV1Payload' }
    & { feedbackResult?: Maybe<(
      { __typename?: 'FeedbackResult' }
      & Pick<FeedbackResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type CreateFileUploadMutationVariables = Exact<{
  input: CreateFileUploadInput;
}>;


export type CreateFileUploadMutation = (
  { __typename?: 'Mutation' }
  & { createFileUpload?: Maybe<(
    { __typename?: 'CreateFileUploadPayload' }
    & Pick<CreateFileUploadPayload, 'clientMutationId'>
    & { fileUpload?: Maybe<(
      { __typename?: 'FileUpload' }
      & Pick<FileUpload, 'id'>
    )> }
  )> }
);

export type CreateHealthInformationAuthorizationMutationVariables = Exact<{
  input: CreateHealthInformationAuthorizationInput;
}>;


export type CreateHealthInformationAuthorizationMutation = (
  { __typename?: 'Mutation' }
  & { createHealthInformationAuthorization?: Maybe<(
    { __typename?: 'CreateHealthInformationAuthorizationPayload' }
    & Pick<CreateHealthInformationAuthorizationPayload, 'clientMutationId' | 'recordId'>
  )> }
);

export type CreateInsuranceRequestV1MutationVariables = Exact<{
  input: CreateInsuranceRequestV1Input;
}>;


export type CreateInsuranceRequestV1Mutation = (
  { __typename?: 'Mutation' }
  & { createInsuranceRequestV1?: Maybe<(
    { __typename?: 'CreateInsuranceRequestV1Payload' }
    & Pick<CreateInsuranceRequestV1Payload, 'clientMutationId'>
  )> }
);

export type CreateIssueDescriptionMastersMutationVariables = Exact<{
  input: CreateIssueDescriptionMastersInput;
}>;


export type CreateIssueDescriptionMastersMutation = (
  { __typename?: 'Mutation' }
  & { createIssueDescriptionMasters?: Maybe<(
    { __typename?: 'CreateIssueDescriptionMastersPayload' }
    & Pick<CreateIssueDescriptionMastersPayload, 'clientMutationId'>
  )> }
);

export type CreateIssueImpactMastersMutationVariables = Exact<{
  input: CreateIssueImpactMastersInput;
}>;


export type CreateIssueImpactMastersMutation = (
  { __typename?: 'Mutation' }
  & { createIssueImpactMasters?: Maybe<(
    { __typename?: 'CreateIssueImpactMastersPayload' }
    & Pick<CreateIssueImpactMastersPayload, 'clientMutationId'>
  )> }
);

export type CreateNewGroupEntryMutationVariables = Exact<{
  input: CreateNewGroupEntryInput;
}>;


export type CreateNewGroupEntryMutation = (
  { __typename?: 'Mutation' }
  & { createNewGroupEntry?: Maybe<(
    { __typename?: 'CreateNewGroupEntryPayload' }
    & { institutionResult?: Maybe<(
      { __typename?: 'InstitutionResult' }
      & Pick<InstitutionResult, 'communicationRequestId' | 'error' | 'message' | 'status'>
      & { data?: Maybe<(
        { __typename?: 'NewInstitutionDatum' }
        & Pick<NewInstitutionDatum, 'institutionAddress' | 'institutionCity' | 'institutionCountry' | 'institutionEmail' | 'institutionFax' | 'institutionName' | 'institutionId' | 'institutionPhone' | 'institutionState' | 'institutionWebsite' | 'institutionZipcode' | 'institutionPartyId' | 'projectId'>
      )> }
    )> }
  )> }
);

export type CreateNotificationReadMutationVariables = Exact<{
  input: CreateNotificationReadInput;
}>;


export type CreateNotificationReadMutation = (
  { __typename?: 'Mutation' }
  & { createNotificationRead?: Maybe<(
    { __typename?: 'CreateNotificationReadPayload' }
    & Pick<CreateNotificationReadPayload, 'clientMutationId'>
  )> }
);

export type CreatePersonDemographicsMutationVariables = Exact<{
  input: CreatePersonDemographicsInput;
}>;


export type CreatePersonDemographicsMutation = (
  { __typename?: 'Mutation' }
  & { createPersonDemographics?: Maybe<(
    { __typename?: 'CreatePersonDemographicsPayload' }
    & Pick<CreatePersonDemographicsPayload, 'clientMutationId'>
  )> }
);

export type CreateMedicalRecordsRequestMutationVariables = Exact<{
  input: CreateMedicalRecordsRequestInput;
}>;


export type CreateMedicalRecordsRequestMutation = (
  { __typename?: 'Mutation' }
  & { createMedicalRecordsRequest?: Maybe<(
    { __typename?: 'CreateMedicalRecordsRequestPayload' }
    & Pick<CreateMedicalRecordsRequestPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'success' | 'status' | 'result'>
    )> }
  )> }
);

export type CreateRequestDenialLetterMutationVariables = Exact<{
  input: CreateRequestDenialLetterInput;
}>;


export type CreateRequestDenialLetterMutation = (
  { __typename?: 'Mutation' }
  & { createRequestDenialLetter?: Maybe<(
    { __typename?: 'CreateRequestDenialLetterPayload' }
    & Pick<CreateRequestDenialLetterPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type CreateRequestResponseV1MutationVariables = Exact<{
  input: CreateRequestResponseV1Input;
}>;


export type CreateRequestResponseV1Mutation = (
  { __typename?: 'Mutation' }
  & { createRequestResponseV1?: Maybe<(
    { __typename?: 'CreateRequestResponseV1Payload' }
    & Pick<CreateRequestResponseV1Payload, 'clientMutationId'>
  )> }
);

export type CreateSubstanceUseDisorderAuthorizationMutationVariables = Exact<{
  input: CreateSubstanceUseDisorderAuthorizationInput;
}>;


export type CreateSubstanceUseDisorderAuthorizationMutation = (
  { __typename?: 'Mutation' }
  & { createSubstanceUseDisorderAuthorization?: Maybe<(
    { __typename?: 'CreateSubstanceUseDisorderAuthorizationPayload' }
    & Pick<CreateSubstanceUseDisorderAuthorizationPayload, 'clientMutationId' | 'recordId'>
  )> }
);

export type DeleteExternalSystemMutationVariables = Exact<{
  input: DeleteExternalSystemInput;
}>;


export type DeleteExternalSystemMutation = (
  { __typename?: 'Mutation' }
  & { deleteExternalSystem?: Maybe<(
    { __typename?: 'DeleteExternalSystemPayload' }
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type DeleteInviteMutationVariables = Exact<{
  input: DeleteInviteInput;
}>;


export type DeleteInviteMutation = (
  { __typename?: 'Mutation' }
  & { deleteInvite?: Maybe<(
    { __typename?: 'DeleteInvitePayload' }
    & Pick<DeleteInvitePayload, 'clientMutationId'>
  )> }
);

export type DeleteRequestV2MutationVariables = Exact<{
  input: DeleteRequestV2Input;
}>;


export type DeleteRequestV2Mutation = (
  { __typename?: 'Mutation' }
  & { deleteRequestV2?: Maybe<(
    { __typename?: 'DeleteRequestV2Payload' }
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'success' | 'status' | 'result'>
    )> }
  )> }
);

export type EditInstitutionMutationVariables = Exact<{
  input: EditInstitutionInput;
}>;


export type EditInstitutionMutation = (
  { __typename?: 'Mutation' }
  & { editInstitution?: Maybe<(
    { __typename?: 'EditInstitutionPayload' }
    & Pick<EditInstitutionPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type GenerateMetricsAndGetJsonMutationVariables = Exact<{
  input: GenerateMetricsAndGetJsonInput;
}>;


export type GenerateMetricsAndGetJsonMutation = (
  { __typename?: 'Mutation' }
  & { generateMetricsAndGetJson?: Maybe<(
    { __typename?: 'GenerateMetricsAndGetJsonPayload' }
    & Pick<GenerateMetricsAndGetJsonPayload, 'json'>
  )> }
);

export type GetIdVerificationTransactionMutationVariables = Exact<{
  input: GetIdVerificationTransactionInput;
}>;


export type GetIdVerificationTransactionMutation = (
  { __typename?: 'Mutation' }
  & { getIdVerificationTransaction?: Maybe<(
    { __typename?: 'GetIdVerificationTransactionPayload' }
    & { transactionRequestLogResponse?: Maybe<(
      { __typename?: 'TransactionRequestLogResponse' }
      & Pick<TransactionRequestLogResponse, 'success'>
      & { data?: Maybe<Array<Maybe<(
        { __typename?: 'TransactionLogResponse' }
        & Pick<TransactionLogResponse, 'createdAt' | 'externalSystemPartyId' | 'id' | 'partyId' | 'transactionId' | 'transactionLog' | 'verificationResponse' | 'verificationStatus' | 'verifiedAt'>
      )>>>, status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type GetInstitutionApprovalInfoMutationVariables = Exact<{
  input: GetInstitutionApprovalInfoInput;
}>;


export type GetInstitutionApprovalInfoMutation = (
  { __typename?: 'Mutation' }
  & { getInstitutionApprovalInfo?: Maybe<(
    { __typename?: 'GetInstitutionApprovalInfoPayload' }
    & { results?: Maybe<Array<Maybe<(
      { __typename?: 'GetInstitutionApprovalInfoRecord' }
      & Pick<GetInstitutionApprovalInfoRecord, 'approvedMetaValue' | 'communicationMetaValue' | 'id'>
    )>>> }
  )> }
);

export type GetMedicalRecordImportStatusMutationVariables = Exact<{
  input: GetMedicalRecordImportStatusInput;
}>;


export type GetMedicalRecordImportStatusMutation = (
  { __typename?: 'Mutation' }
  & { getMedicalRecordImportStatus?: Maybe<(
    { __typename?: 'GetMedicalRecordImportStatusPayload' }
    & { requestApiResponse?: Maybe<(
      { __typename?: 'RequestApiResponse' }
      & Pick<RequestApiResponse, 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type GetNotificationDetailsMutationVariables = Exact<{
  input: GetNotificationDetailsInput;
}>;


export type GetNotificationDetailsMutation = (
  { __typename?: 'Mutation' }
  & { getNotificationDetails?: Maybe<(
    { __typename?: 'GetNotificationDetailsPayload' }
    & Pick<GetNotificationDetailsPayload, 'clientMutationId' | 'json'>
  )> }
);

export type GetPatientIndividualMedicalRecordDocumentMutationVariables = Exact<{
  input: GetPatientIndividualMedicalRecordDocumentInput;
}>;


export type GetPatientIndividualMedicalRecordDocumentMutation = (
  { __typename?: 'Mutation' }
  & { getPatientIndividualMedicalRecordDocument?: Maybe<(
    { __typename?: 'GetPatientIndividualMedicalRecordDocumentPayload' }
    & { requestApiResponse?: Maybe<(
      { __typename?: 'RequestApiResponse' }
      & Pick<RequestApiResponse, 'data' | 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type GetPatientMedicalRecordDocumentMutationVariables = Exact<{
  input: GetPatientMedicalRecordDocumentInput;
}>;


export type GetPatientMedicalRecordDocumentMutation = (
  { __typename?: 'Mutation' }
  & { getPatientMedicalRecordDocument?: Maybe<(
    { __typename?: 'GetPatientMedicalRecordDocumentPayload' }
    & { requestApiResponse?: Maybe<(
      { __typename?: 'RequestApiResponse' }
      & Pick<RequestApiResponse, 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type GetUserTourStatusQueryVariables = Exact<{
  tourTypeName: Scalars['String'];
}>;


export type GetUserTourStatusQuery = (
  { __typename?: 'Query' }
  & { getUserTourStatus?: Maybe<(
    { __typename?: 'ResponseResultStatus' }
    & Pick<ResponseResultStatus, 'success'>
    & { data?: Maybe<(
      { __typename?: 'TourResponseType' }
      & Pick<TourResponseType, 'completedSteps' | 'isCompleted' | 'lastCompletedStepIndex' | 'lastUpdateTimestamp' | 'resumeAfter' | 'tourTargetId' | 'tourTriggerType' | 'tourTypeId' | 'autoResume'>
    )>, status?: Maybe<(
      { __typename?: 'ResponseRecordStatus' }
      & Pick<ResponseRecordStatus, 'code' | 'message'>
    )> }
  )> }
);

export type InitIdentityVerificationV1MutationVariables = Exact<{
  input: InitIdentityVerificationV1Input;
}>;


export type InitIdentityVerificationV1Mutation = (
  { __typename?: 'Mutation' }
  & { initIdentityVerificationV1?: Maybe<(
    { __typename?: 'InitIdentityVerificationV1Payload' }
    & { verificationMeta?: Maybe<(
      { __typename?: 'VerificationMeta' }
      & Pick<VerificationMeta, 'patientExternalId' | 'patientId' | 'transactionId' | 'status' | 'message'>
      & { externalSystem?: Maybe<(
        { __typename?: 'ExternalSystemInfo' }
        & Pick<ExternalSystemInfo, 'idVerificationBaseUrl' | 'name'>
        & { params?: Maybe<Array<Maybe<(
          { __typename?: 'ExternalSystemParam' }
          & Pick<ExternalSystemParam, 'key' | 'value'>
        )>>> }
      )> }
    )> }
  )> }
);

export type InsertChatroomDetailsMutationVariables = Exact<{
  input: InsertChatroomDetailsInput;
}>;


export type InsertChatroomDetailsMutation = (
  { __typename?: 'Mutation' }
  & { insertChatroomDetails?: Maybe<(
    { __typename?: 'InsertChatroomDetailsPayload' }
    & Pick<InsertChatroomDetailsPayload, 'clientMutationId' | 'boolean'>
  )> }
);

export type InviteUserV1MutationVariables = Exact<{
  input: InviteUserV1Input;
}>;


export type InviteUserV1Mutation = (
  { __typename?: 'Mutation' }
  & { inviteUserV1?: Maybe<(
    { __typename?: 'InviteUserV1Payload' }
    & Pick<InviteUserV1Payload, 'clientMutationId'>
    & { results?: Maybe<Array<Maybe<(
      { __typename?: 'InviteUserV1Record' }
      & Pick<InviteUserV1Record, 'middleName' | 'createdAt' | 'email' | 'firstName' | 'lastName' | 'userExist' | 'phone'>
    )>>> }
  )> }
);

export type ModifyDependentInfoMutationVariables = Exact<{
  input: ModifyDependentInfoInput;
}>;


export type ModifyDependentInfoMutation = (
  { __typename?: 'Mutation' }
  & { modifyDependentInfo?: Maybe<(
    { __typename?: 'ModifyDependentInfoPayload' }
    & Pick<ModifyDependentInfoPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type ModifyPatientInfoMutationVariables = Exact<{
  input: ModifyPatientInfoInput;
}>;


export type ModifyPatientInfoMutation = (
  { __typename?: 'Mutation' }
  & { modifyPatientInfo?: Maybe<(
    { __typename?: 'ModifyPatientInfoPayload' }
    & Pick<ModifyPatientInfoPayload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type PatientDetailsV1MutationVariables = Exact<{
  input: PatientDetailsV1Input;
}>;


export type PatientDetailsV1Mutation = (
  { __typename?: 'Mutation' }
  & { patientDetailsV1?: Maybe<(
    { __typename?: 'PatientDetailsV1Payload' }
    & Pick<PatientDetailsV1Payload, 'clientMutationId'>
    & { results?: Maybe<Array<Maybe<(
      { __typename?: 'PatientDetailsV1Record' }
      & Pick<PatientDetailsV1Record, 'id' | 'partyId' | 'firstName' | 'lastName' | 'middleName' | 'personType' | 'phoneNumber' | 'recordStatus' | 'electronicDetails' | 'birthDate' | 'addressZip' | 'state' | 'addressLine2' | 'addressLine1' | 'country' | 'city'>
    )>>> }
  )> }
);

export type SaveUserTourProgressMutationVariables = Exact<{
  input: SaveUserTourProgressInput;
}>;


export type SaveUserTourProgressMutation = (
  { __typename?: 'Mutation' }
  & { saveUserTourProgress?: Maybe<(
    { __typename?: 'SaveUserTourProgressPayload' }
    & { responseResultStatus?: Maybe<(
      { __typename?: 'ResponseResultStatus' }
      & Pick<ResponseResultStatus, 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type SendEmailToUnverifiedUserMutationVariables = Exact<{
  input: SendEmailToUnverifiedUserInput;
}>;


export type SendEmailToUnverifiedUserMutation = (
  { __typename?: 'Mutation' }
  & { sendEmailToUnverifiedUser?: Maybe<(
    { __typename?: 'SendEmailToUnverifiedUserPayload' }
    & Pick<SendEmailToUnverifiedUserPayload, 'json'>
  )> }
);

export type SendReminderEmailMutationVariables = Exact<{
  input: SendReminderEmailInput;
}>;


export type SendReminderEmailMutation = (
  { __typename?: 'Mutation' }
  & { sendReminderEmail?: Maybe<(
    { __typename?: 'SendReminderEmailPayload' }
    & Pick<SendReminderEmailPayload, 'clientMutationId'>
    & { reminderNotificationResult?: Maybe<(
      { __typename?: 'ReminderNotificationResult' }
      & Pick<ReminderNotificationResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type SentRequestToProviderMutationVariables = Exact<{
  input: SentRequestToProviderInput;
}>;


export type SentRequestToProviderMutation = (
  { __typename?: 'Mutation' }
  & { sentRequestToProvider?: Maybe<(
    { __typename?: 'SentRequestToProviderPayload' }
    & Pick<SentRequestToProviderPayload, 'userInviteId'>
  )> }
);

export type UnenrollPatientMutationVariables = Exact<{
  input: UnenrollPatientInput;
}>;


export type UnenrollPatientMutation = (
  { __typename?: 'Mutation' }
  & { unenrollPatient?: Maybe<(
    { __typename?: 'UnenrollPatientPayload' }
    & { requestApiResponse?: Maybe<(
      { __typename?: 'RequestApiResponse' }
      & Pick<RequestApiResponse, 'data' | 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type UpdateIdentityVerificationV1MutationVariables = Exact<{
  input: UpdateIdentityVerificationV1Input;
}>;


export type UpdateIdentityVerificationV1Mutation = (
  { __typename?: 'Mutation' }
  & { updateIdentityVerificationV1?: Maybe<(
    { __typename?: 'UpdateIdentityVerificationV1Payload' }
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type UpdatePersonRecordStatusV1MutationVariables = Exact<{
  input: UpdatePersonRecordStatusV1Input;
}>;


export type UpdatePersonRecordStatusV1Mutation = (
  { __typename?: 'Mutation' }
  & { updatePersonRecordStatusV1?: Maybe<(
    { __typename?: 'UpdatePersonRecordStatusV1Payload' }
    & Pick<UpdatePersonRecordStatusV1Payload, 'clientMutationId' | 'recordId'>
  )> }
);

export type UpdatePersonProfilePicMutationVariables = Exact<{
  input: UpdatePersonProfilePicInput;
}>;


export type UpdatePersonProfilePicMutation = (
  { __typename?: 'Mutation' }
  & { updatePersonProfilePic?: Maybe<(
    { __typename?: 'UpdatePersonProfilePicPayload' }
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'result' | 'status' | 'success'>
    )> }
  )> }
);

export type UpdateRequestFiledetailV1MutationVariables = Exact<{
  input: UpdateRequestFiledetailV1Input;
}>;


export type UpdateRequestFiledetailV1Mutation = (
  { __typename?: 'Mutation' }
  & { updateRequestFiledetailV1?: Maybe<(
    { __typename?: 'UpdateRequestFiledetailV1Payload' }
    & Pick<UpdateRequestFiledetailV1Payload, 'clientMutationId'>
  )> }
);

export type UpdateRequestStatusV2MutationVariables = Exact<{
  input: UpdateRequestStatusV2Input;
}>;


export type UpdateRequestStatusV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateRequestStatusV2?: Maybe<(
    { __typename?: 'UpdateRequestStatusV2Payload' }
    & Pick<UpdateRequestStatusV2Payload, 'clientMutationId'>
    & { requestResult?: Maybe<(
      { __typename?: 'RequestResult' }
      & Pick<RequestResult, 'success' | 'status' | 'result'>
    )> }
  )> }
);

export type UpdateRequestTokensMutationVariables = Exact<{
  input: UpdateRequestTokensInput;
}>;


export type UpdateRequestTokensMutation = (
  { __typename?: 'Mutation' }
  & { updateRequestTokens?: Maybe<(
    { __typename?: 'UpdateRequestTokensPayload' }
    & Pick<UpdateRequestTokensPayload, 'clientMutationId' | 'recordId'>
  )> }
);

export type UserMedicalRecordOperationStatusHistoryMutationVariables = Exact<{
  input: UserMedicalRecordOperationStatusHistoryInput;
}>;


export type UserMedicalRecordOperationStatusHistoryMutation = (
  { __typename?: 'Mutation' }
  & { userMedicalRecordOperationStatusHistory?: Maybe<(
    { __typename?: 'UserMedicalRecordOperationStatusHistoryPayload' }
    & { requestApiResponse?: Maybe<(
      { __typename?: 'RequestApiResponse' }
      & Pick<RequestApiResponse, 'data' | 'success'>
      & { status?: Maybe<(
        { __typename?: 'ResponseRecordStatus' }
        & Pick<ResponseRecordStatus, 'code' | 'message'>
      )> }
    )> }
  )> }
);

export type ValidateUserProfileV1MutationVariables = Exact<{
  input: ValidateUserProfileV1Input;
}>;


export type ValidateUserProfileV1Mutation = (
  { __typename?: 'Mutation' }
  & { validateUserProfileV1?: Maybe<(
    { __typename?: 'ValidateUserProfileV1Payload' }
    & { validationInfo?: Maybe<(
      { __typename?: 'ValidationInfo' }
      & Pick<ValidationInfo, 'message' | 'status'>
      & { data?: Maybe<Array<Maybe<(
        { __typename?: 'ValidationDatum' }
        & Pick<ValidationDatum, 'field' | 'fieldValue' | 'message' | 'status'>
      )>>> }
    )> }
  )> }
);

export type VerifyUserExistsMutationVariables = Exact<{
  input: VerifyUserExistsInput;
}>;


export type VerifyUserExistsMutation = (
  { __typename?: 'Mutation' }
  & { verifyUserExists?: Maybe<(
    { __typename?: 'VerifyUserExistsPayload' }
    & Pick<VerifyUserExistsPayload, 'clientMutationId' | 'userExists'>
  )> }
);

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A floating point number that requires more precision than IEEE 754 binary 64 */
  BigFloat: any;
  /**
   * A signed eight-byte integer. The upper big integer values are greater than the
   * max value for a JavaScript number. Therefore all big integers will be output as
   * strings and not numbers.
   */
  BigInt: any;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /** The day, does not include a time. */
  Date: any;
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: any;
  ExecutionContext: any;
  GitlabNamespaceId: any;
  GitlabProjectId: any;
  GitlabServerIdentity: any;
  HttpMethod: any;
  ImageContentBytea: any;
  /** A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  OpenprojectServerIdentity: any;
  SatGitlabInstitutionProfileLhcFormId: any;
  SatGitlabOfferingProfileLhcFormId: any;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
  /** The `Upload` scalar type represents a file upload. */
  Upload: any;
};

/** All input for the `addAnonymousPromData` mutation. */
export type AddAnonymousPromDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  addAnonymousPromInput?: Maybe<AddAnonymousPromInputRecordInput>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `addAnonymousPromData` mutation. */
export type AddAnonymousPromDataPayload = {
  __typename?: 'AddAnonymousPromDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  addAnonymousPromDataResult?: Maybe<AddAnonymousPromDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type AddAnonymousPromDataResult = {
  __typename?: 'AddAnonymousPromDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `AddAnonymousPromInputRecord` */
export type AddAnonymousPromInputRecordInput = {
  metricData?: Maybe<Scalars['JSON']>;
  metricJobname?: Maybe<Scalars['String']>;
  metricName?: Maybe<Scalars['String']>;
  metricInstance?: Maybe<Scalars['String']>;
};

/** All input for the `addDependent` mutation. */
export type AddDependentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
};

/** The output of our `addDependent` mutation. */
export type AddDependentPayload = {
  __typename?: 'AddDependentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `addNewPatientV1` mutation. */
export type AddNewPatientV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
};

/** The output of our `addNewPatientV1` mutation. */
export type AddNewPatientV1Payload = {
  __typename?: 'AddNewPatientV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `addSubscriberLists` mutation. */
export type AddSubscriberListsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userdata?: Maybe<Scalars['JSON']>;
  listids?: Maybe<Array<Maybe<Scalars['Int']>>>;
};

/** The output of our `addSubscriberLists` mutation. */
export type AddSubscriberListsPayload = {
  __typename?: 'AddSubscriberListsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `AddSuggestHdoInputRecord` */
export type AddSuggestHdoInputRecordInput = {
  authToken?: Maybe<Scalars['String']>;
  hdoInput?: Maybe<HdoInputRecordInput>;
  email?: Maybe<EmailRecipientInput>;
  domain?: Maybe<Scalars['String']>;
  telemetry?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `AddSuggestInputRecord` */
export type AddSuggestInputRecordInput = {
  authToken?: Maybe<Scalars['String']>;
  leadInput?: Maybe<LeadInputRecordInput>;
  email?: Maybe<EmailRecipientInput>;
  domain?: Maybe<Scalars['String']>;
  telemetry?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `AddSuggestInputVul` */
export type AddSuggestInputVulInput = {
  authToken?: Maybe<Scalars['String']>;
  leadInput?: Maybe<LeadInputVulInput>;
  email?: Maybe<EmailRecipientInput>;
  domain?: Maybe<Scalars['String']>;
  telemetry?: Maybe<Scalars['String']>;
};

/** All input for the `addSuggestInstitutionSyncV2` mutation. */
export type AddSuggestInstitutionSyncV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitlabid?: Maybe<Scalars['Int']>;
};

/** The output of our `addSuggestInstitutionSyncV2` mutation. */
export type AddSuggestInstitutionSyncV2Payload = {
  __typename?: 'AddSuggestInstitutionSyncV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `AddendumDoctorList` */
export type AddendumDoctorListInput = {
  name?: Maybe<Scalars['String']>;
  institution?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type AddendumDoctorsDetail = {
  __typename?: 'AddendumDoctorsDetail';
  id?: Maybe<Scalars['UUID']>;
  doctorName?: Maybe<Scalars['String']>;
  institution?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `AddendumDoctorsDetail` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type AddendumDoctorsDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `doctorName` field. */
  doctorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institution` field. */
  institution?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AddendumDoctorsDetail` object types. All fields are combined with a logical ‘and.’ */
export type AddendumDoctorsDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `doctorName` field. */
  doctorName?: Maybe<StringFilter>;
  /** Filter by the object’s `institution` field. */
  institution?: Maybe<StringFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AddendumDoctorsDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AddendumDoctorsDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<AddendumDoctorsDetailFilter>;
};

/** A connection to a list of `AddendumDoctorsDetail` values. */
export type AddendumDoctorsDetailsConnection = {
  __typename?: 'AddendumDoctorsDetailsConnection';
  /** A list of `AddendumDoctorsDetail` objects. */
  nodes: Array<Maybe<AddendumDoctorsDetail>>;
  /** A list of edges which contains the `AddendumDoctorsDetail` and cursor to aid in pagination. */
  edges: Array<AddendumDoctorsDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AddendumDoctorsDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AddendumDoctorsDetail` edge in the connection. */
export type AddendumDoctorsDetailsEdge = {
  __typename?: 'AddendumDoctorsDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AddendumDoctorsDetail` at the end of the edge. */
  node?: Maybe<AddendumDoctorsDetail>;
};

/** All input for the `addendumDoctorsDetailsFnV1` mutation. */
export type AddendumDoctorsDetailsFnV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `addendumDoctorsDetailsFnV1` mutation. */
export type AddendumDoctorsDetailsFnV1Payload = {
  __typename?: 'AddendumDoctorsDetailsFnV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<AddendumDoctorsDetailsFnV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `addendumDoctorsDetailsFnV1` mutation. */
export type AddendumDoctorsDetailsFnV1Record = {
  __typename?: 'AddendumDoctorsDetailsFnV1Record';
  id?: Maybe<Scalars['UUID']>;
  doctorName?: Maybe<Scalars['String']>;
  institution?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
};

/** Methods to use when ordering `AddendumDoctorsDetail`. */
export enum AddendumDoctorsDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  DoctorNameAsc = 'DOCTOR_NAME_ASC',
  DoctorNameDesc = 'DOCTOR_NAME_DESC',
  InstitutionAsc = 'INSTITUTION_ASC',
  InstitutionDesc = 'INSTITUTION_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC'
}

export type AllRequestDetail = {
  __typename?: 'AllRequestDetail';
  personId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `AllRequestDetail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type AllRequestDetailCondition = {
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AllRequestDetail` object types. All fields are combined with a logical ‘and.’ */
export type AllRequestDetailFilter = {
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AllRequestDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AllRequestDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<AllRequestDetailFilter>;
};

/** A connection to a list of `AllRequestDetail` values. */
export type AllRequestDetailsConnection = {
  __typename?: 'AllRequestDetailsConnection';
  /** A list of `AllRequestDetail` objects. */
  nodes: Array<Maybe<AllRequestDetail>>;
  /** A list of edges which contains the `AllRequestDetail` and cursor to aid in pagination. */
  edges: Array<AllRequestDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AllRequestDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AllRequestDetail` edge in the connection. */
export type AllRequestDetailsEdge = {
  __typename?: 'AllRequestDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AllRequestDetail` at the end of the edge. */
  node?: Maybe<AllRequestDetail>;
};

/** Methods to use when ordering `AllRequestDetail`. */
export enum AllRequestDetailsOrderBy {
  Natural = 'NATURAL',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC'
}

/** All input for the `approveInstitution` mutation. */
export type ApproveInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  dataContent?: Maybe<Scalars['JSON']>;
  projectId?: Maybe<Scalars['Int']>;
};

/** The output of our `approveInstitution` mutation. */
export type ApproveInstitutionPayload = {
  __typename?: 'ApproveInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `approveMergeRequest` mutation. */
export type ApproveMergeRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mergeId?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['Int']>;
};

/** The output of our `approveMergeRequest` mutation. */
export type ApproveMergeRequestPayload = {
  __typename?: 'ApproveMergeRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ApprovedOfferingListWithCommitMsg = {
  __typename?: 'ApprovedOfferingListWithCommitMsg';
  projectId?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  commitTitle?: Maybe<Scalars['String']>;
  authorId?: Maybe<Scalars['Int']>;
  offeringApprovedBy?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `ApprovedOfferingListWithCommitMsg` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type ApprovedOfferingListWithCommitMsgCondition = {
  /** Checks for equality with the object’s `projectId` field. */
  projectId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `commitTitle` field. */
  commitTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorId` field. */
  authorId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userName` field. */
  userName?: Maybe<Scalars['String']>;
};

/** A filter to be used against `ApprovedOfferingListWithCommitMsg` object types. All fields are combined with a logical ‘and.’ */
export type ApprovedOfferingListWithCommitMsgFilter = {
  /** Filter by the object’s `projectId` field. */
  projectId?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `commitTitle` field. */
  commitTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `authorId` field. */
  authorId?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `userName` field. */
  userName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApprovedOfferingListWithCommitMsgFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApprovedOfferingListWithCommitMsgFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApprovedOfferingListWithCommitMsgFilter>;
};

/** A connection to a list of `ApprovedOfferingListWithCommitMsg` values. */
export type ApprovedOfferingListWithCommitMsgsConnection = {
  __typename?: 'ApprovedOfferingListWithCommitMsgsConnection';
  /** A list of `ApprovedOfferingListWithCommitMsg` objects. */
  nodes: Array<Maybe<ApprovedOfferingListWithCommitMsg>>;
  /** A list of edges which contains the `ApprovedOfferingListWithCommitMsg` and cursor to aid in pagination. */
  edges: Array<ApprovedOfferingListWithCommitMsgsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApprovedOfferingListWithCommitMsg` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ApprovedOfferingListWithCommitMsg` edge in the connection. */
export type ApprovedOfferingListWithCommitMsgsEdge = {
  __typename?: 'ApprovedOfferingListWithCommitMsgsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApprovedOfferingListWithCommitMsg` at the end of the edge. */
  node?: Maybe<ApprovedOfferingListWithCommitMsg>;
};

/** Methods to use when ordering `ApprovedOfferingListWithCommitMsg`. */
export enum ApprovedOfferingListWithCommitMsgsOrderBy {
  Natural = 'NATURAL',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  CommitTitleAsc = 'COMMIT_TITLE_ASC',
  CommitTitleDesc = 'COMMIT_TITLE_DESC',
  AuthorIdAsc = 'AUTHOR_ID_ASC',
  AuthorIdDesc = 'AUTHOR_ID_DESC',
  OfferingApprovedByAsc = 'OFFERING_APPROVED_BY_ASC',
  OfferingApprovedByDesc = 'OFFERING_APPROVED_BY_DESC',
  UserNameAsc = 'USER_NAME_ASC',
  UserNameDesc = 'USER_NAME_DESC'
}

/** All input for the `archiveProject` mutation. */
export type ArchiveProjectInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `archiveProject` mutation. */
export type ArchiveProjectPayload = {
  __typename?: 'ArchiveProjectPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  archiveResponse?: Maybe<ArchiveResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ArchiveResponse = {
  __typename?: 'ArchiveResponse';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type AssignToMraMasterV1 = {
  __typename?: 'AssignToMraMasterV1';
  id?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  organizationId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `AssignToMraMasterV1` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type AssignToMraMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `AssignToMraMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type AssignToMraMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AssignToMraMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AssignToMraMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<AssignToMraMasterV1Filter>;
};

/** A connection to a list of `AssignToMraMasterV1` values. */
export type AssignToMraMasterV1sConnection = {
  __typename?: 'AssignToMraMasterV1sConnection';
  /** A list of `AssignToMraMasterV1` objects. */
  nodes: Array<Maybe<AssignToMraMasterV1>>;
  /** A list of edges which contains the `AssignToMraMasterV1` and cursor to aid in pagination. */
  edges: Array<AssignToMraMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AssignToMraMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `AssignToMraMasterV1` edge in the connection. */
export type AssignToMraMasterV1sEdge = {
  __typename?: 'AssignToMraMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AssignToMraMasterV1` at the end of the edge. */
  node?: Maybe<AssignToMraMasterV1>;
};

/** Methods to use when ordering `AssignToMraMasterV1`. */
export enum AssignToMraMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC'
}

/** All input for the `assignUserToOrganization` mutation. */
export type AssignUserToOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  orgEmail?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  orgPhone?: Maybe<Scalars['String']>;
  orgFax?: Maybe<Scalars['String']>;
  orgWebsite?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  orgZipCode?: Maybe<Scalars['String']>;
};

/** The output of our `assignUserToOrganization` mutation. */
export type AssignUserToOrganizationPayload = {
  __typename?: 'AssignUserToOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  boolean?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `authenticateApiPgNative` mutation. */
export type AuthenticateApiPgNativeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username: Scalars['String'];
  password: Scalars['String'];
};

/** The output of our `authenticateApiPgNative` mutation. */
export type AuthenticateApiPgNativePayload = {
  __typename?: 'AuthenticateApiPgNativePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `authenticatePostgraphilePgNative` mutation. */
export type AuthenticatePostgraphilePgNativeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username: Scalars['String'];
  password: Scalars['String'];
};

/** The output of our `authenticatePostgraphilePgNative` mutation. */
export type AuthenticatePostgraphilePgNativePayload = {
  __typename?: 'AuthenticatePostgraphilePgNativePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jwtTokenPostgraphile?: Maybe<JwtTokenPostgraphile>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `authenticateWithRealmAccess` mutation. */
export type AuthenticateWithRealmAccessInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessCode?: Maybe<Scalars['String']>;
  redirecturl?: Maybe<Scalars['String']>;
  realm?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `authenticateWithRealmAccess` mutation. */
export type AuthenticateWithRealmAccessPayload = {
  __typename?: 'AuthenticateWithRealmAccessPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `authenticateWithRealm` mutation. */
export type AuthenticateWithRealmInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  passwords?: Maybe<Scalars['String']>;
  realm?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `authenticateWithRealm` mutation. */
export type AuthenticateWithRealmPayload = {
  __typename?: 'AuthenticateWithRealmPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};



/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['BigInt']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['BigInt']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['BigInt']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['BigInt']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['BigInt']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['BigInt']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['BigInt']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['BigInt']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['BigInt']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['BigInt']>;
};

/** A connection to a list of `BillingRequestCategory` values. */
export type BillingRequestCategoriesConnection = {
  __typename?: 'BillingRequestCategoriesConnection';
  /** A list of `BillingRequestCategory` objects. */
  nodes: Array<Maybe<BillingRequestCategory>>;
  /** A list of edges which contains the `BillingRequestCategory` and cursor to aid in pagination. */
  edges: Array<BillingRequestCategoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `BillingRequestCategory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `BillingRequestCategory` edge in the connection. */
export type BillingRequestCategoriesEdge = {
  __typename?: 'BillingRequestCategoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `BillingRequestCategory` at the end of the edge. */
  node?: Maybe<BillingRequestCategory>;
};

/** Methods to use when ordering `BillingRequestCategory`. */
export enum BillingRequestCategoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  ParentIdAsc = 'PARENT_ID_ASC',
  ParentIdDesc = 'PARENT_ID_DESC'
}

export type BillingRequestCategory = {
  __typename?: 'BillingRequestCategory';
  id?: Maybe<Scalars['UUID']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  parentId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `BillingRequestCategory` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type BillingRequestCategoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `parentId` field. */
  parentId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `BillingRequestCategory` object types. All fields are combined with a logical ‘and.’ */
export type BillingRequestCategoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `parentId` field. */
  parentId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<BillingRequestCategoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<BillingRequestCategoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<BillingRequestCategoryFilter>;
};

/** This view is used to show billing category in UI. */
export type BillingRequestCategoryMaster = {
  __typename?: 'BillingRequestCategoryMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `BillingRequestCategoryMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type BillingRequestCategoryMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `BillingRequestCategoryMaster` object types. All fields are combined with a logical ‘and.’ */
export type BillingRequestCategoryMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<BillingRequestCategoryMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<BillingRequestCategoryMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<BillingRequestCategoryMasterFilter>;
};

/** An input for mutations affecting `BillingRequestCategoryMaster` */
export type BillingRequestCategoryMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `BillingRequestCategoryMaster` values. */
export type BillingRequestCategoryMastersConnection = {
  __typename?: 'BillingRequestCategoryMastersConnection';
  /** A list of `BillingRequestCategoryMaster` objects. */
  nodes: Array<Maybe<BillingRequestCategoryMaster>>;
  /** A list of edges which contains the `BillingRequestCategoryMaster` and cursor to aid in pagination. */
  edges: Array<BillingRequestCategoryMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `BillingRequestCategoryMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `BillingRequestCategoryMaster` edge in the connection. */
export type BillingRequestCategoryMastersEdge = {
  __typename?: 'BillingRequestCategoryMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `BillingRequestCategoryMaster` at the end of the edge. */
  node?: Maybe<BillingRequestCategoryMaster>;
};

/** Methods to use when ordering `BillingRequestCategoryMaster`. */
export enum BillingRequestCategoryMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type BillingRequestTypeMaster = {
  __typename?: 'BillingRequestTypeMaster';
  id?: Maybe<Scalars['UUID']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  parentId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `BillingRequestTypeMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type BillingRequestTypeMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `parentId` field. */
  parentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `BillingRequestTypeMaster` object types. All fields are combined with a logical ‘and.’ */
export type BillingRequestTypeMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `parentId` field. */
  parentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<BillingRequestTypeMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<BillingRequestTypeMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<BillingRequestTypeMasterFilter>;
};

/** An input for mutations affecting `BillingRequestTypeMaster` */
export type BillingRequestTypeMasterInput = {
  id?: Maybe<Scalars['UUID']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  parentId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `BillingRequestTypeMaster` values. */
export type BillingRequestTypeMastersConnection = {
  __typename?: 'BillingRequestTypeMastersConnection';
  /** A list of `BillingRequestTypeMaster` objects. */
  nodes: Array<Maybe<BillingRequestTypeMaster>>;
  /** A list of edges which contains the `BillingRequestTypeMaster` and cursor to aid in pagination. */
  edges: Array<BillingRequestTypeMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `BillingRequestTypeMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `BillingRequestTypeMaster` edge in the connection. */
export type BillingRequestTypeMastersEdge = {
  __typename?: 'BillingRequestTypeMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `BillingRequestTypeMaster` at the end of the edge. */
  node?: Maybe<BillingRequestTypeMaster>;
};

/** Methods to use when ordering `BillingRequestTypeMaster`. */
export enum BillingRequestTypeMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  ParentIdAsc = 'PARENT_ID_ASC',
  ParentIdDesc = 'PARENT_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Boolean']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Boolean']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Boolean']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Boolean']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Boolean']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Boolean']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Boolean']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Boolean']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Boolean']>;
};

export type CaptchaDatum = {
  __typename?: 'CaptchaDatum';
  enabled?: Maybe<Scalars['Boolean']>;
  enableCountries?: Maybe<Array<Maybe<Scalars['String']>>>;
  enableNumFailedAttempts?: Maybe<Scalars['String']>;
};

export type CaptchaResult = {
  __typename?: 'CaptchaResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  data?: Maybe<CaptchaDatum>;
};

/** An input for mutations affecting `CategoryInputRecord` */
export type CategoryInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** All input for the `changeInstitution` mutation. */
export type ChangeInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  offeringId?: Maybe<Scalars['Int']>;
  institutionId?: Maybe<Scalars['Int']>;
  institutionProfileId?: Maybe<Scalars['Int']>;
  authToken?: Maybe<Scalars['String']>;
};

/** The output of our `changeInstitution` mutation. */
export type ChangeInstitutionPayload = {
  __typename?: 'ChangeInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  changeInstitutionResponse?: Maybe<ChangeInstitutionResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ChangeInstitutionResponse = {
  __typename?: 'ChangeInstitutionResponse';
  status?: Maybe<Scalars['String']>;
  statusmessage?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

/** All input for the `checkUrlStatus` mutation. */
export type CheckUrlStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  weburl?: Maybe<Scalars['String']>;
};

/** The output of our `checkUrlStatus` mutation. */
export type CheckUrlStatusPayload = {
  __typename?: 'CheckUrlStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  integer?: Maybe<Scalars['Int']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `checkUserExists` mutation. */
export type CheckUserExistsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

/** The output of our `checkUserExists` mutation. */
export type CheckUserExistsPayload = {
  __typename?: 'CheckUserExistsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userExists?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ComapnyListResponse = {
  __typename?: 'ComapnyListResponse';
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  companyList?: Maybe<Array<Maybe<ComapnyName>>>;
};

export type ComapnyName = {
  __typename?: 'ComapnyName';
  title?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

export type CommunicationRequestMaster = {
  __typename?: 'CommunicationRequestMaster';
  id?: Maybe<Scalars['UUID']>;
  communicationMetaValue?: Maybe<Scalars['JSON']>;
};

/**
 * A condition to be used against `CommunicationRequestMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type CommunicationRequestMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `communicationMetaValue` field. */
  communicationMetaValue?: Maybe<Scalars['JSON']>;
};

/** A filter to be used against `CommunicationRequestMaster` object types. All fields are combined with a logical ‘and.’ */
export type CommunicationRequestMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CommunicationRequestMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CommunicationRequestMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<CommunicationRequestMasterFilter>;
};

/** An input for mutations affecting `CommunicationRequestMaster` */
export type CommunicationRequestMasterInput = {
  id?: Maybe<Scalars['UUID']>;
  communicationMetaValue?: Maybe<Scalars['JSON']>;
};

/** This view is used as to fetch values for approved as well as suggested institution value in MRR. */
export type CommunicationRequestMasterV1 = {
  __typename?: 'CommunicationRequestMasterV1';
  id?: Maybe<Scalars['UUID']>;
  communicationMetaValue?: Maybe<Scalars['JSON']>;
  approvedMetaValue?: Maybe<Scalars['JSON']>;
};

/**
 * A condition to be used against `CommunicationRequestMasterV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type CommunicationRequestMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `communicationMetaValue` field. */
  communicationMetaValue?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `approvedMetaValue` field. */
  approvedMetaValue?: Maybe<Scalars['JSON']>;
};

/** A filter to be used against `CommunicationRequestMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type CommunicationRequestMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CommunicationRequestMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CommunicationRequestMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<CommunicationRequestMasterV1Filter>;
};

/** An input for mutations affecting `CommunicationRequestMasterV1` */
export type CommunicationRequestMasterV1Input = {
  id?: Maybe<Scalars['UUID']>;
  communicationMetaValue?: Maybe<Scalars['JSON']>;
  approvedMetaValue?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `CommunicationRequestMasterV1` values. */
export type CommunicationRequestMasterV1sConnection = {
  __typename?: 'CommunicationRequestMasterV1sConnection';
  /** A list of `CommunicationRequestMasterV1` objects. */
  nodes: Array<Maybe<CommunicationRequestMasterV1>>;
  /** A list of edges which contains the `CommunicationRequestMasterV1` and cursor to aid in pagination. */
  edges: Array<CommunicationRequestMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CommunicationRequestMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CommunicationRequestMasterV1` edge in the connection. */
export type CommunicationRequestMasterV1sEdge = {
  __typename?: 'CommunicationRequestMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CommunicationRequestMasterV1` at the end of the edge. */
  node?: Maybe<CommunicationRequestMasterV1>;
};

/** Methods to use when ordering `CommunicationRequestMasterV1`. */
export enum CommunicationRequestMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CommunicationMetaValueAsc = 'COMMUNICATION_META_VALUE_ASC',
  CommunicationMetaValueDesc = 'COMMUNICATION_META_VALUE_DESC',
  ApprovedMetaValueAsc = 'APPROVED_META_VALUE_ASC',
  ApprovedMetaValueDesc = 'APPROVED_META_VALUE_DESC'
}

/** A connection to a list of `CommunicationRequestMaster` values. */
export type CommunicationRequestMastersConnection = {
  __typename?: 'CommunicationRequestMastersConnection';
  /** A list of `CommunicationRequestMaster` objects. */
  nodes: Array<Maybe<CommunicationRequestMaster>>;
  /** A list of edges which contains the `CommunicationRequestMaster` and cursor to aid in pagination. */
  edges: Array<CommunicationRequestMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CommunicationRequestMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CommunicationRequestMaster` edge in the connection. */
export type CommunicationRequestMastersEdge = {
  __typename?: 'CommunicationRequestMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CommunicationRequestMaster` at the end of the edge. */
  node?: Maybe<CommunicationRequestMaster>;
};

/** Methods to use when ordering `CommunicationRequestMaster`. */
export enum CommunicationRequestMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CommunicationMetaValueAsc = 'COMMUNICATION_META_VALUE_ASC',
  CommunicationMetaValueDesc = 'COMMUNICATION_META_VALUE_DESC'
}

/** All input for the `convertBase64ToText` mutation. */
export type ConvertBase64ToTextInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
};

/** The output of our `convertBase64ToText` mutation. */
export type ConvertBase64ToTextPayload = {
  __typename?: 'ConvertBase64ToTextPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `cookieRefreshToken` mutation. */
export type CookieRefreshTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  realm?: Maybe<Scalars['String']>;
};

/** The output of our `cookieRefreshToken` mutation. */
export type CookieRefreshTokenPayload = {
  __typename?: 'CookieRefreshTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type CountryList = {
  __typename?: 'CountryList';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `CountryList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type CountryListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `CountryList` object types. All fields are combined with a logical ‘and.’ */
export type CountryListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CountryListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CountryListFilter>>;
  /** Negates the expression. */
  not?: Maybe<CountryListFilter>;
};

/** An input for mutations affecting `CountryList` */
export type CountryListInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `CountryList` values. */
export type CountryListsConnection = {
  __typename?: 'CountryListsConnection';
  /** A list of `CountryList` objects. */
  nodes: Array<Maybe<CountryList>>;
  /** A list of edges which contains the `CountryList` and cursor to aid in pagination. */
  edges: Array<CountryListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CountryList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CountryList` edge in the connection. */
export type CountryListsEdge = {
  __typename?: 'CountryListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CountryList` at the end of the edge. */
  node?: Maybe<CountryList>;
};

/** Methods to use when ordering `CountryList`. */
export enum CountryListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type CountryMasterV1 = {
  __typename?: 'CountryMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `CountryMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type CountryMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `CountryMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type CountryMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CountryMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CountryMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<CountryMasterV1Filter>;
};

/** An input for mutations affecting `CountryMasterV1` */
export type CountryMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `CountryMasterV1` values. */
export type CountryMasterV1sConnection = {
  __typename?: 'CountryMasterV1sConnection';
  /** A list of `CountryMasterV1` objects. */
  nodes: Array<Maybe<CountryMasterV1>>;
  /** A list of edges which contains the `CountryMasterV1` and cursor to aid in pagination. */
  edges: Array<CountryMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `CountryMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `CountryMasterV1` edge in the connection. */
export type CountryMasterV1sEdge = {
  __typename?: 'CountryMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `CountryMasterV1` at the end of the edge. */
  node?: Maybe<CountryMasterV1>;
};

/** Methods to use when ordering `CountryMasterV1`. */
export enum CountryMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `createAddendumDoctorsPatient` mutation. */
export type CreateAddendumDoctorsPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  inputs?: Maybe<Array<Maybe<AddendumDoctorListInput>>>;
  recordId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createAddendumDoctorsPatient` mutation. */
export type CreateAddendumDoctorsPatientPayload = {
  __typename?: 'CreateAddendumDoctorsPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createAddendumDoctorsV1` mutation. */
export type CreateAddendumDoctorsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  inputs?: Maybe<Array<Maybe<AddendumDoctorListInput>>>;
  recordId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createAddendumDoctorsV1` mutation. */
export type CreateAddendumDoctorsV1Payload = {
  __typename?: 'CreateAddendumDoctorsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createAddendumRecordsRequest` mutation. */
export type CreateAddendumRecordsRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
  isRequestSupported?: Maybe<Scalars['Boolean']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  mrn?: Maybe<Scalars['String']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  list?: Maybe<Array<Maybe<AddendumDoctorListInput>>>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** All input for the `createAddendumRecordsRequestPatient` mutation. */
export type CreateAddendumRecordsRequestPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  isRequestSupported?: Maybe<Scalars['Boolean']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  mrn?: Maybe<Scalars['String']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  list?: Maybe<Array<Maybe<AddendumDoctorListInput>>>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createAddendumRecordsRequestPatient` mutation. */
export type CreateAddendumRecordsRequestPatientPayload = {
  __typename?: 'CreateAddendumRecordsRequestPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The output of our `createAddendumRecordsRequest` mutation. */
export type CreateAddendumRecordsRequestPayload = {
  __typename?: 'CreateAddendumRecordsRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createAddendumRequestEmail` mutation. */
export type CreateAddendumRequestEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  mailto?: Maybe<Scalars['String']>;
  mailfrom?: Maybe<Scalars['String']>;
  tofirstname?: Maybe<Scalars['String']>;
  formurl?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createAddendumRequestEmail` mutation. */
export type CreateAddendumRequestEmailPayload = {
  __typename?: 'CreateAddendumRequestEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `BillingRequestCategoryMaster` mutation. */
export type CreateBillingRequestCategoryMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `BillingRequestCategoryMaster` to be created by this mutation. */
  billingRequestCategoryMaster: BillingRequestCategoryMasterInput;
};

/** The output of our create `BillingRequestCategoryMaster` mutation. */
export type CreateBillingRequestCategoryMasterPayload = {
  __typename?: 'CreateBillingRequestCategoryMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `BillingRequestCategoryMaster` that was created by this mutation. */
  billingRequestCategoryMaster?: Maybe<BillingRequestCategoryMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `BillingRequestCategoryMaster`. May be used by Relay 1. */
  billingRequestCategoryMasterEdge?: Maybe<BillingRequestCategoryMastersEdge>;
};


/** The output of our create `BillingRequestCategoryMaster` mutation. */
export type CreateBillingRequestCategoryMasterPayloadBillingRequestCategoryMasterEdgeArgs = {
  orderBy?: Maybe<Array<BillingRequestCategoryMastersOrderBy>>;
};

/** All input for the create `BillingRequestTypeMaster` mutation. */
export type CreateBillingRequestTypeMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `BillingRequestTypeMaster` to be created by this mutation. */
  billingRequestTypeMaster: BillingRequestTypeMasterInput;
};

/** The output of our create `BillingRequestTypeMaster` mutation. */
export type CreateBillingRequestTypeMasterPayload = {
  __typename?: 'CreateBillingRequestTypeMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `BillingRequestTypeMaster` that was created by this mutation. */
  billingRequestTypeMaster?: Maybe<BillingRequestTypeMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `BillingRequestTypeMaster`. May be used by Relay 1. */
  billingRequestTypeMasterEdge?: Maybe<BillingRequestTypeMastersEdge>;
};


/** The output of our create `BillingRequestTypeMaster` mutation. */
export type CreateBillingRequestTypeMasterPayloadBillingRequestTypeMasterEdgeArgs = {
  orderBy?: Maybe<Array<BillingRequestTypeMastersOrderBy>>;
};

/** All input for the create `CommunicationRequestMaster` mutation. */
export type CreateCommunicationRequestMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CommunicationRequestMaster` to be created by this mutation. */
  communicationRequestMaster: CommunicationRequestMasterInput;
};

/** The output of our create `CommunicationRequestMaster` mutation. */
export type CreateCommunicationRequestMasterPayload = {
  __typename?: 'CreateCommunicationRequestMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CommunicationRequestMaster` that was created by this mutation. */
  communicationRequestMaster?: Maybe<CommunicationRequestMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `CommunicationRequestMaster`. May be used by Relay 1. */
  communicationRequestMasterEdge?: Maybe<CommunicationRequestMastersEdge>;
};


/** The output of our create `CommunicationRequestMaster` mutation. */
export type CreateCommunicationRequestMasterPayloadCommunicationRequestMasterEdgeArgs = {
  orderBy?: Maybe<Array<CommunicationRequestMastersOrderBy>>;
};

/** All input for the create `CommunicationRequestMasterV1` mutation. */
export type CreateCommunicationRequestMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CommunicationRequestMasterV1` to be created by this mutation. */
  communicationRequestMasterV1: CommunicationRequestMasterV1Input;
};

/** The output of our create `CommunicationRequestMasterV1` mutation. */
export type CreateCommunicationRequestMasterV1Payload = {
  __typename?: 'CreateCommunicationRequestMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CommunicationRequestMasterV1` that was created by this mutation. */
  communicationRequestMasterV1?: Maybe<CommunicationRequestMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `CommunicationRequestMasterV1`. May be used by Relay 1. */
  communicationRequestMasterV1Edge?: Maybe<CommunicationRequestMasterV1sEdge>;
};


/** The output of our create `CommunicationRequestMasterV1` mutation. */
export type CreateCommunicationRequestMasterV1PayloadCommunicationRequestMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<CommunicationRequestMasterV1sOrderBy>>;
};

/** All input for the create `CountryList` mutation. */
export type CreateCountryListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CountryList` to be created by this mutation. */
  countryList: CountryListInput;
};

/** The output of our create `CountryList` mutation. */
export type CreateCountryListPayload = {
  __typename?: 'CreateCountryListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CountryList` that was created by this mutation. */
  countryList?: Maybe<CountryList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `CountryList`. May be used by Relay 1. */
  countryListEdge?: Maybe<CountryListsEdge>;
};


/** The output of our create `CountryList` mutation. */
export type CreateCountryListPayloadCountryListEdgeArgs = {
  orderBy?: Maybe<Array<CountryListsOrderBy>>;
};

/** All input for the create `CountryMasterV1` mutation. */
export type CreateCountryMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CountryMasterV1` to be created by this mutation. */
  countryMasterV1: CountryMasterV1Input;
};

/** The output of our create `CountryMasterV1` mutation. */
export type CreateCountryMasterV1Payload = {
  __typename?: 'CreateCountryMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `CountryMasterV1` that was created by this mutation. */
  countryMasterV1?: Maybe<CountryMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `CountryMasterV1`. May be used by Relay 1. */
  countryMasterV1Edge?: Maybe<CountryMasterV1sEdge>;
};


/** The output of our create `CountryMasterV1` mutation. */
export type CreateCountryMasterV1PayloadCountryMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<CountryMasterV1sOrderBy>>;
};

/** All input for the `createDatabaseUserWithRole` mutation. */
export type CreateDatabaseUserWithRoleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userName: Scalars['String'];
  userPasswd: Scalars['String'];
  roleName: Scalars['String'];
};

/** The output of our `createDatabaseUserWithRole` mutation. */
export type CreateDatabaseUserWithRolePayload = {
  __typename?: 'CreateDatabaseUserWithRolePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  integer?: Maybe<Scalars['Int']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `DenialLetterReasonMaster` mutation. */
export type CreateDenialLetterReasonMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DenialLetterReasonMaster` to be created by this mutation. */
  denialLetterReasonMaster: DenialLetterReasonMasterInput;
};

/** The output of our create `DenialLetterReasonMaster` mutation. */
export type CreateDenialLetterReasonMasterPayload = {
  __typename?: 'CreateDenialLetterReasonMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DenialLetterReasonMaster` that was created by this mutation. */
  denialLetterReasonMaster?: Maybe<DenialLetterReasonMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DenialLetterReasonMaster`. May be used by Relay 1. */
  denialLetterReasonMasterEdge?: Maybe<DenialLetterReasonMastersEdge>;
};


/** The output of our create `DenialLetterReasonMaster` mutation. */
export type CreateDenialLetterReasonMasterPayloadDenialLetterReasonMasterEdgeArgs = {
  orderBy?: Maybe<Array<DenialLetterReasonMastersOrderBy>>;
};

/** All input for the `createDepartmentHdo1` mutation. */
export type CreateDepartmentHdo1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
};

/** The output of our `createDepartmentHdo1` mutation. */
export type CreateDepartmentHdo1Payload = {
  __typename?: 'CreateDepartmentHdo1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createDepartmentHdo` mutation. */
export type CreateDepartmentHdoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  addressDetails?: Maybe<Scalars['String']>;
};

/** The output of our `createDepartmentHdo` mutation. */
export type CreateDepartmentHdoPayload = {
  __typename?: 'CreateDepartmentHdoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createDepartmentInParty` mutation. */
export type CreateDepartmentInPartyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  deptKeycloakId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
};

/** The output of our `createDepartmentInParty` mutation. */
export type CreateDepartmentInPartyPayload = {
  __typename?: 'CreateDepartmentInPartyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createDomainRealms` mutation. */
export type CreateDomainRealmsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  realmName?: Maybe<Scalars['String']>;
  cid?: Maybe<Scalars['String']>;
  clientname?: Maybe<Scalars['String']>;
};

/** The output of our `createDomainRealms` mutation. */
export type CreateDomainRealmsPayload = {
  __typename?: 'CreateDomainRealmsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `EthnicityMasterV1` mutation. */
export type CreateEthnicityMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `EthnicityMasterV1` to be created by this mutation. */
  ethnicityMasterV1: EthnicityMasterV1Input;
};

/** The output of our create `EthnicityMasterV1` mutation. */
export type CreateEthnicityMasterV1Payload = {
  __typename?: 'CreateEthnicityMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `EthnicityMasterV1` that was created by this mutation. */
  ethnicityMasterV1?: Maybe<EthnicityMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `EthnicityMasterV1`. May be used by Relay 1. */
  ethnicityMasterV1Edge?: Maybe<EthnicityMasterV1sEdge>;
};


/** The output of our create `EthnicityMasterV1` mutation. */
export type CreateEthnicityMasterV1PayloadEthnicityMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<EthnicityMasterV1sOrderBy>>;
};

/** All input for the `createFeedbackEmail` mutation. */
export type CreateFeedbackEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mailto?: Maybe<Scalars['String']>;
  mailfrom?: Maybe<Scalars['String']>;
  tofirstname?: Maybe<Scalars['String']>;
  formurl?: Maybe<Scalars['String']>;
};

/** The output of our `createFeedbackEmail` mutation. */
export type CreateFeedbackEmailPayload = {
  __typename?: 'CreateFeedbackEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createFeedback` mutation. */
export type CreateFeedbackInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  screenshot?: Maybe<Scalars['UUID']>;
  phone?: Maybe<Scalars['String']>;
  feedbackQueryTypeId?: Maybe<Scalars['Int']>;
  host?: Maybe<Scalars['String']>;
};

/** The output of our `createFeedback` mutation. */
export type CreateFeedbackPayload = {
  __typename?: 'CreateFeedbackPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `FeedbackQueryTypeMaster` mutation. */
export type CreateFeedbackQueryTypeMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FeedbackQueryTypeMaster` to be created by this mutation. */
  feedbackQueryTypeMaster: FeedbackQueryTypeMasterInput;
};

/** The output of our create `FeedbackQueryTypeMaster` mutation. */
export type CreateFeedbackQueryTypeMasterPayload = {
  __typename?: 'CreateFeedbackQueryTypeMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FeedbackQueryTypeMaster` that was created by this mutation. */
  feedbackQueryTypeMaster?: Maybe<FeedbackQueryTypeMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `FeedbackQueryTypeMaster`. May be used by Relay 1. */
  feedbackQueryTypeMasterEdge?: Maybe<FeedbackQueryTypeMastersEdge>;
};


/** The output of our create `FeedbackQueryTypeMaster` mutation. */
export type CreateFeedbackQueryTypeMasterPayloadFeedbackQueryTypeMasterEdgeArgs = {
  orderBy?: Maybe<Array<FeedbackQueryTypeMastersOrderBy>>;
};

/** All input for the `createFeedbackV1` mutation. */
export type CreateFeedbackV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  attachmentIds?: Maybe<Array<Maybe<Scalars['UUID']>>>;
  phone?: Maybe<Scalars['String']>;
  feedbackQueryTypeId?: Maybe<Scalars['Int']>;
  host?: Maybe<Scalars['String']>;
};

/** The output of our `createFeedbackV1` mutation. */
export type CreateFeedbackV1Payload = {
  __typename?: 'CreateFeedbackV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  feedbackResult?: Maybe<FeedbackResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `FileUpload` mutation. */
export type CreateFileUploadInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FileUpload` to be created by this mutation. */
  fileUpload: FileUploadInput;
};

/** The output of our create `FileUpload` mutation. */
export type CreateFileUploadPayload = {
  __typename?: 'CreateFileUploadPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FileUpload` that was created by this mutation. */
  fileUpload?: Maybe<FileUpload>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `FileUpload`. May be used by Relay 1. */
  fileUploadEdge?: Maybe<FileUploadsEdge>;
};


/** The output of our create `FileUpload` mutation. */
export type CreateFileUploadPayloadFileUploadEdgeArgs = {
  orderBy?: Maybe<Array<FileUploadsOrderBy>>;
};

/** All input for the create `GenderMasterV1` mutation. */
export type CreateGenderMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `GenderMasterV1` to be created by this mutation. */
  genderMasterV1: GenderMasterV1Input;
};

/** The output of our create `GenderMasterV1` mutation. */
export type CreateGenderMasterV1Payload = {
  __typename?: 'CreateGenderMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `GenderMasterV1` that was created by this mutation. */
  genderMasterV1?: Maybe<GenderMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `GenderMasterV1`. May be used by Relay 1. */
  genderMasterV1Edge?: Maybe<GenderMasterV1sEdge>;
};


/** The output of our create `GenderMasterV1` mutation. */
export type CreateGenderMasterV1PayloadGenderMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<GenderMasterV1sOrderBy>>;
};

/** All input for the create `GetChatroomDetail` mutation. */
export type CreateGetChatroomDetailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `GetChatroomDetail` to be created by this mutation. */
  getChatroomDetail: GetChatroomDetailInput;
};

/** The output of our create `GetChatroomDetail` mutation. */
export type CreateGetChatroomDetailPayload = {
  __typename?: 'CreateGetChatroomDetailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `GetChatroomDetail` that was created by this mutation. */
  getChatroomDetail?: Maybe<GetChatroomDetail>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `GetChatroomDetail`. May be used by Relay 1. */
  getChatroomDetailEdge?: Maybe<GetChatroomDetailsEdge>;
};


/** The output of our create `GetChatroomDetail` mutation. */
export type CreateGetChatroomDetailPayloadGetChatroomDetailEdgeArgs = {
  orderBy?: Maybe<Array<GetChatroomDetailsOrderBy>>;
};

/** All input for the create `HealthAuthAuthorizationTitleMaster` mutation. */
export type CreateHealthAuthAuthorizationTitleMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `HealthAuthAuthorizationTitleMaster` to be created by this mutation. */
  healthAuthAuthorizationTitleMaster: HealthAuthAuthorizationTitleMasterInput;
};

/** The output of our create `HealthAuthAuthorizationTitleMaster` mutation. */
export type CreateHealthAuthAuthorizationTitleMasterPayload = {
  __typename?: 'CreateHealthAuthAuthorizationTitleMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `HealthAuthAuthorizationTitleMaster` that was created by this mutation. */
  healthAuthAuthorizationTitleMaster?: Maybe<HealthAuthAuthorizationTitleMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `HealthAuthAuthorizationTitleMaster`. May be used by Relay 1. */
  healthAuthAuthorizationTitleMasterEdge?: Maybe<HealthAuthAuthorizationTitleMastersEdge>;
};


/** The output of our create `HealthAuthAuthorizationTitleMaster` mutation. */
export type CreateHealthAuthAuthorizationTitleMasterPayloadHealthAuthAuthorizationTitleMasterEdgeArgs = {
  orderBy?: Maybe<Array<HealthAuthAuthorizationTitleMastersOrderBy>>;
};

/** All input for the `createHealthInformationAuthorization` mutation. */
export type CreateHealthInformationAuthorizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mrrRequestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  receivePerson?: Maybe<Scalars['String']>;
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  image?: Maybe<Scalars['UUID']>;
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['Int']>;
  legalId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createHealthInformationAuthorization` mutation. */
export type CreateHealthInformationAuthorizationPayload = {
  __typename?: 'CreateHealthInformationAuthorizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createHealthInformationAuthorizationV2` mutation. */
export type CreateHealthInformationAuthorizationV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  receivePerson?: Maybe<Scalars['String']>;
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  image?: Maybe<Scalars['UUID']>;
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['Int']>;
  legalId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createHealthInformationAuthorizationV2` mutation. */
export type CreateHealthInformationAuthorizationV2Payload = {
  __typename?: 'CreateHealthInformationAuthorizationV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createHipaaAuthEmail` mutation. */
export type CreateHipaaAuthEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  mailto?: Maybe<Scalars['String']>;
  mailfrom?: Maybe<Scalars['String']>;
  tofirstname?: Maybe<Scalars['String']>;
  formurl?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createHipaaAuthEmail` mutation. */
export type CreateHipaaAuthEmailPayload = {
  __typename?: 'CreateHipaaAuthEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `ImpactSeverityMaster` mutation. */
export type CreateImpactSeverityMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ImpactSeverityMaster` to be created by this mutation. */
  impactSeverityMaster: ImpactSeverityMasterInput;
};

/** The output of our create `ImpactSeverityMaster` mutation. */
export type CreateImpactSeverityMasterPayload = {
  __typename?: 'CreateImpactSeverityMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ImpactSeverityMaster` that was created by this mutation. */
  impactSeverityMaster?: Maybe<ImpactSeverityMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ImpactSeverityMaster`. May be used by Relay 1. */
  impactSeverityMasterEdge?: Maybe<ImpactSeverityMastersEdge>;
};


/** The output of our create `ImpactSeverityMaster` mutation. */
export type CreateImpactSeverityMasterPayloadImpactSeverityMasterEdgeArgs = {
  orderBy?: Maybe<Array<ImpactSeverityMastersOrderBy>>;
};

/** All input for the create `InformationBlockingExceptionsMaster` mutation. */
export type CreateInformationBlockingExceptionsMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `InformationBlockingExceptionsMaster` to be created by this mutation. */
  informationBlockingExceptionsMaster: InformationBlockingExceptionsMasterInput;
};

/** The output of our create `InformationBlockingExceptionsMaster` mutation. */
export type CreateInformationBlockingExceptionsMasterPayload = {
  __typename?: 'CreateInformationBlockingExceptionsMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `InformationBlockingExceptionsMaster` that was created by this mutation. */
  informationBlockingExceptionsMaster?: Maybe<InformationBlockingExceptionsMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `InformationBlockingExceptionsMaster`. May be used by Relay 1. */
  informationBlockingExceptionsMasterEdge?: Maybe<InformationBlockingExceptionsMastersEdge>;
};


/** The output of our create `InformationBlockingExceptionsMaster` mutation. */
export type CreateInformationBlockingExceptionsMasterPayloadInformationBlockingExceptionsMasterEdgeArgs = {
  orderBy?: Maybe<Array<InformationBlockingExceptionsMastersOrderBy>>;
};

/** All input for the create `InstitutionBrokenUrlList` mutation. */
export type CreateInstitutionBrokenUrlListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `InstitutionBrokenUrlList` to be created by this mutation. */
  institutionBrokenUrlList: InstitutionBrokenUrlListInput;
};

/** The output of our create `InstitutionBrokenUrlList` mutation. */
export type CreateInstitutionBrokenUrlListPayload = {
  __typename?: 'CreateInstitutionBrokenUrlListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `InstitutionBrokenUrlList` that was created by this mutation. */
  institutionBrokenUrlList?: Maybe<InstitutionBrokenUrlList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `InstitutionBrokenUrlList`. May be used by Relay 1. */
  institutionBrokenUrlListEdge?: Maybe<InstitutionBrokenUrlListsEdge>;
};


/** The output of our create `InstitutionBrokenUrlList` mutation. */
export type CreateInstitutionBrokenUrlListPayloadInstitutionBrokenUrlListEdgeArgs = {
  orderBy?: Maybe<Array<InstitutionBrokenUrlListsOrderBy>>;
};

/** All input for the `createInstitutionWithLhcForm` mutation. */
export type CreateInstitutionWithLhcFormInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
  lhcFormContent?: Maybe<Scalars['String']>;
};

/** The output of our `createInstitutionWithLhcForm` mutation. */
export type CreateInstitutionWithLhcFormPayload = {
  __typename?: 'CreateInstitutionWithLhcFormPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionResponse?: Maybe<InstitutionResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createInsuranceRequestPatient` mutation. */
export type CreateInsuranceRequestPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  contactChannelId?: Maybe<Scalars['Int']>;
  contactData?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  requester?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createInsuranceRequestPatient` mutation. */
export type CreateInsuranceRequestPatientPayload = {
  __typename?: 'CreateInsuranceRequestPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createInsuranceRequestV1` mutation. */
export type CreateInsuranceRequestV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  contactChannelId?: Maybe<Scalars['Int']>;
  contactData?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  requester?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createInsuranceRequestV1` mutation. */
export type CreateInsuranceRequestV1Payload = {
  __typename?: 'CreateInsuranceRequestV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `IssueDescriptionMaster` mutation. */
export type CreateIssueDescriptionMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueDescriptionMaster` to be created by this mutation. */
  issueDescriptionMaster: IssueDescriptionMasterInput;
};

/** The output of our create `IssueDescriptionMaster` mutation. */
export type CreateIssueDescriptionMasterPayload = {
  __typename?: 'CreateIssueDescriptionMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueDescriptionMaster` that was created by this mutation. */
  issueDescriptionMaster?: Maybe<IssueDescriptionMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `IssueDescriptionMaster`. May be used by Relay 1. */
  issueDescriptionMasterEdge?: Maybe<IssueDescriptionMastersEdge>;
};


/** The output of our create `IssueDescriptionMaster` mutation. */
export type CreateIssueDescriptionMasterPayloadIssueDescriptionMasterEdgeArgs = {
  orderBy?: Maybe<Array<IssueDescriptionMastersOrderBy>>;
};

/** All input for the `createIssueDescriptionMasters` mutation. */
export type CreateIssueDescriptionMastersInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  requestType?: Maybe<Scalars['Int']>;
};

/** All input for the create `IssueDescriptionMastersMedical` mutation. */
export type CreateIssueDescriptionMastersMedicalInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueDescriptionMastersMedical` to be created by this mutation. */
  issueDescriptionMastersMedical: IssueDescriptionMastersMedicalInput;
};

/** The output of our create `IssueDescriptionMastersMedical` mutation. */
export type CreateIssueDescriptionMastersMedicalPayload = {
  __typename?: 'CreateIssueDescriptionMastersMedicalPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueDescriptionMastersMedical` that was created by this mutation. */
  issueDescriptionMastersMedical?: Maybe<IssueDescriptionMastersMedical>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `IssueDescriptionMastersMedical`. May be used by Relay 1. */
  issueDescriptionMastersMedicalEdge?: Maybe<IssueDescriptionMastersMedicalsEdge>;
};


/** The output of our create `IssueDescriptionMastersMedical` mutation. */
export type CreateIssueDescriptionMastersMedicalPayloadIssueDescriptionMastersMedicalEdgeArgs = {
  orderBy?: Maybe<Array<IssueDescriptionMastersMedicalsOrderBy>>;
};

/** The output of our `createIssueDescriptionMasters` mutation. */
export type CreateIssueDescriptionMastersPayload = {
  __typename?: 'CreateIssueDescriptionMastersPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createIssueDescriptionMastersV1` mutation. */
export type CreateIssueDescriptionMastersV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  requestType?: Maybe<Scalars['Int']>;
};

/** The output of our `createIssueDescriptionMastersV1` mutation. */
export type CreateIssueDescriptionMastersV1Payload = {
  __typename?: 'CreateIssueDescriptionMastersV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `IssueImpactMaster` mutation. */
export type CreateIssueImpactMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueImpactMaster` to be created by this mutation. */
  issueImpactMaster: IssueImpactMasterInput;
};

/** The output of our create `IssueImpactMaster` mutation. */
export type CreateIssueImpactMasterPayload = {
  __typename?: 'CreateIssueImpactMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `IssueImpactMaster` that was created by this mutation. */
  issueImpactMaster?: Maybe<IssueImpactMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `IssueImpactMaster`. May be used by Relay 1. */
  issueImpactMasterEdge?: Maybe<IssueImpactMastersEdge>;
};


/** The output of our create `IssueImpactMaster` mutation. */
export type CreateIssueImpactMasterPayloadIssueImpactMasterEdgeArgs = {
  orderBy?: Maybe<Array<IssueImpactMastersOrderBy>>;
};

/** All input for the `createIssueImpactMasters` mutation. */
export type CreateIssueImpactMastersInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  issueImpact?: Maybe<Scalars['String']>;
};

/** The output of our `createIssueImpactMasters` mutation. */
export type CreateIssueImpactMastersPayload = {
  __typename?: 'CreateIssueImpactMastersPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createJsonbFormat` mutation. */
export type CreateJsonbFormatInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  typeId?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  hdoEmail?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  sourceName?: Maybe<Scalars['String']>;
  verifiedUserName?: Maybe<Scalars['String']>;
  verifiedBy?: Maybe<Scalars['String']>;
  directAddress?: Maybe<Scalars['String']>;
};

/** The output of our `createJsonbFormat` mutation. */
export type CreateJsonbFormatPayload = {
  __typename?: 'CreateJsonbFormatPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  record?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createJsonbFormatV1` mutation. */
export type CreateJsonbFormatV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  hdoEmail?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  sourceName?: Maybe<Scalars['String']>;
};

/** The output of our `createJsonbFormatV1` mutation. */
export type CreateJsonbFormatV1Payload = {
  __typename?: 'CreateJsonbFormatV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  record?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createJsonbFormatV2` mutation. */
export type CreateJsonbFormatV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  hdoEmail?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  sourceName?: Maybe<Scalars['String']>;
  verifiedUserName?: Maybe<Scalars['String']>;
  verifiedBy?: Maybe<Scalars['String']>;
};

/** The output of our `createJsonbFormatV2` mutation. */
export type CreateJsonbFormatV2Payload = {
  __typename?: 'CreateJsonbFormatV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  record?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `MaritalStatusMasterV1` mutation. */
export type CreateMaritalStatusMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MaritalStatusMasterV1` to be created by this mutation. */
  maritalStatusMasterV1: MaritalStatusMasterV1Input;
};

/** The output of our create `MaritalStatusMasterV1` mutation. */
export type CreateMaritalStatusMasterV1Payload = {
  __typename?: 'CreateMaritalStatusMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MaritalStatusMasterV1` that was created by this mutation. */
  maritalStatusMasterV1?: Maybe<MaritalStatusMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MaritalStatusMasterV1`. May be used by Relay 1. */
  maritalStatusMasterV1Edge?: Maybe<MaritalStatusMasterV1sEdge>;
};


/** The output of our create `MaritalStatusMasterV1` mutation. */
export type CreateMaritalStatusMasterV1PayloadMaritalStatusMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<MaritalStatusMasterV1sOrderBy>>;
};

/** All input for the create `MediaType` mutation. */
export type CreateMediaTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` to be created by this mutation. */
  mediaType: MediaTypeInput;
};

/** The output of our create `MediaType` mutation. */
export type CreateMediaTypePayload = {
  __typename?: 'CreateMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was created by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
};


/** The output of our create `MediaType` mutation. */
export type CreateMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the create `MedicalGroup` mutation. */
export type CreateMedicalGroupInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedicalGroup` to be created by this mutation. */
  medicalGroup: MedicalGroupInput;
};

/** The output of our create `MedicalGroup` mutation. */
export type CreateMedicalGroupPayload = {
  __typename?: 'CreateMedicalGroupPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedicalGroup` that was created by this mutation. */
  medicalGroup?: Maybe<MedicalGroup>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MedicalGroup`. May be used by Relay 1. */
  medicalGroupEdge?: Maybe<MedicalGroupsEdge>;
};


/** The output of our create `MedicalGroup` mutation. */
export type CreateMedicalGroupPayloadMedicalGroupEdgeArgs = {
  orderBy?: Maybe<Array<MedicalGroupsOrderBy>>;
};

/** All input for the `createMedicalRecordsRequestDetail` mutation. */
export type CreateMedicalRecordsRequestDetailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  requestType?: Maybe<Scalars['Int']>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  problemsFaced?: Maybe<Scalars['String']>;
  impactFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  sourceNature?: Maybe<Scalars['Int']>;
  destinationNature?: Maybe<Scalars['Int']>;
  destinationInstitution?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  mentalHealthCondition?: Maybe<Scalars['Boolean']>;
  sexualReproductiveCondition?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  track?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** All input for the `createMedicalRecordsRequestDetailPatient` mutation. */
export type CreateMedicalRecordsRequestDetailPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  requestType?: Maybe<Scalars['Int']>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  problemsFaced?: Maybe<Scalars['String']>;
  impactFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  sourceNature?: Maybe<Scalars['Int']>;
  destinationNature?: Maybe<Scalars['Int']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  destinationInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequestDetailPatient` mutation. */
export type CreateMedicalRecordsRequestDetailPatientPayload = {
  __typename?: 'CreateMedicalRecordsRequestDetailPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The output of our `createMedicalRecordsRequestDetail` mutation. */
export type CreateMedicalRecordsRequestDetailPayload = {
  __typename?: 'CreateMedicalRecordsRequestDetailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createMedicalRecordsRequestDetailV1` mutation. */
export type CreateMedicalRecordsRequestDetailV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  requestType?: Maybe<Scalars['Int']>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  problemsFaced?: Maybe<Scalars['String']>;
  impactFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  sourceNature?: Maybe<Scalars['Int']>;
  destinationNature?: Maybe<Scalars['Int']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  destinationInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequestDetailV1` mutation. */
export type CreateMedicalRecordsRequestDetailV1Payload = {
  __typename?: 'CreateMedicalRecordsRequestDetailV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createMedicalRecordsRequestDetailV2` mutation. */
export type CreateMedicalRecordsRequestDetailV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  requestType?: Maybe<Scalars['Int']>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  problemsFaced?: Maybe<Scalars['String']>;
  impactFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  sourceNature?: Maybe<Scalars['Int']>;
  destinationNature?: Maybe<Scalars['Int']>;
  destinationInstitution?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  mentalHealthCondition?: Maybe<Scalars['Boolean']>;
  sexualReproductiveCondition?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  track?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequestDetailV2` mutation. */
export type CreateMedicalRecordsRequestDetailV2Payload = {
  __typename?: 'CreateMedicalRecordsRequestDetailV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createMedicalRecordsRequestDetailV3` mutation. */
export type CreateMedicalRecordsRequestDetailV3Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<PersonDemographicsRecordV1Input>;
  requestType?: Maybe<Scalars['Int']>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  impactFaced?: Maybe<Scalars['String']>;
  sourceNature?: Maybe<Scalars['Int']>;
  destinationNature?: Maybe<Scalars['Int']>;
  destinationInstitution?: Maybe<Scalars['UUID']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  mentalHealthCondition?: Maybe<Scalars['Boolean']>;
  sexualReproductiveCondition?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  track?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  problemsFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequestDetailV3` mutation. */
export type CreateMedicalRecordsRequestDetailV3Payload = {
  __typename?: 'CreateMedicalRecordsRequestDetailV3Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createMedicalRecordsRequest` mutation. */
export type CreateMedicalRecordsRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
  rti?: Maybe<RequestTypeInfoInput>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  impactFaced?: Maybe<Scalars['String']>;
  sourceNature?: Maybe<Scalars['Int']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  mentalHealthCondition?: Maybe<Scalars['Boolean']>;
  sexualReproductiveCondition?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  problemsFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  additionalNotes?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  dependentPartyId?: Maybe<Scalars['UUID']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyByPostalService?: Maybe<Scalars['Int']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  requesterAddress?: Maybe<Scalars['String']>;
  physicianAddress?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequest` mutation. */
export type CreateMedicalRecordsRequestPayload = {
  __typename?: 'CreateMedicalRecordsRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createMedicalRecordsRequestV1` mutation. */
export type CreateMedicalRecordsRequestV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<UserDemographicInput>;
  rti?: Maybe<RequestTypeInfoInput>;
  impactOnPatients?: Maybe<Scalars['Int']>;
  impactFaced?: Maybe<Scalars['String']>;
  sourceNature?: Maybe<Scalars['Int']>;
  requestPriority?: Maybe<Scalars['Int']>;
  obtainRecordType?: Maybe<Array<Maybe<Scalars['Int']>>>;
  disorderDisclosureAuthorizationFile?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFile?: Maybe<Scalars['UUID']>;
  attachment?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonally?: Maybe<Scalars['Int']>;
  contactByMail?: Maybe<Scalars['Int']>;
  contactByPhone?: Maybe<Scalars['Int']>;
  contactBySms?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  requester?: Maybe<Scalars['UUID']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  hippaAuth?: Maybe<Scalars['Boolean']>;
  substanceDisorderAuth?: Maybe<Scalars['Boolean']>;
  mentalHealthCondition?: Maybe<Scalars['Boolean']>;
  sexualReproductiveCondition?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signature?: Maybe<Scalars['UUID']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  sourceInstitution?: Maybe<Scalars['UUID']>;
  department?: Maybe<Scalars['UUID']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  problemsFaced?: Maybe<Scalars['String']>;
  timePeriod?: Maybe<Scalars['String']>;
  recordsFrom?: Maybe<Scalars['Datetime']>;
  recordsTo?: Maybe<Scalars['Datetime']>;
  additionalNotes?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyByPostalService?: Maybe<Scalars['Int']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  requesterAddress?: Maybe<Scalars['String']>;
  physicianAddress?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createMedicalRecordsRequestV1` mutation. */
export type CreateMedicalRecordsRequestV1Payload = {
  __typename?: 'CreateMedicalRecordsRequestV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `MedigyMember` mutation. */
export type CreateMedigyMemberInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyMember` to be created by this mutation. */
  medigyMember: MedigyMemberInput;
};

/** The output of our create `MedigyMember` mutation. */
export type CreateMedigyMemberPayload = {
  __typename?: 'CreateMedigyMemberPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyMember` that was created by this mutation. */
  medigyMember?: Maybe<MedigyMember>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MedigyMember`. May be used by Relay 1. */
  medigyMemberEdge?: Maybe<MedigyMembersEdge>;
};


/** The output of our create `MedigyMember` mutation. */
export type CreateMedigyMemberPayloadMedigyMemberEdgeArgs = {
  orderBy?: Maybe<Array<MedigyMembersOrderBy>>;
};

/** All input for the create `MedigyNamespace` mutation. */
export type CreateMedigyNamespaceInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyNamespace` to be created by this mutation. */
  medigyNamespace: MedigyNamespaceInput;
};

/** The output of our create `MedigyNamespace` mutation. */
export type CreateMedigyNamespacePayload = {
  __typename?: 'CreateMedigyNamespacePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyNamespace` that was created by this mutation. */
  medigyNamespace?: Maybe<MedigyNamespace>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MedigyNamespace`. May be used by Relay 1. */
  medigyNamespaceEdge?: Maybe<MedigyNamespacesEdge>;
};


/** The output of our create `MedigyNamespace` mutation. */
export type CreateMedigyNamespacePayloadMedigyNamespaceEdgeArgs = {
  orderBy?: Maybe<Array<MedigyNamespacesOrderBy>>;
};

/** All input for the create `MedigyUser` mutation. */
export type CreateMedigyUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyUser` to be created by this mutation. */
  medigyUser: MedigyUserInput;
};

/** The output of our create `MedigyUser` mutation. */
export type CreateMedigyUserPayload = {
  __typename?: 'CreateMedigyUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MedigyUser` that was created by this mutation. */
  medigyUser?: Maybe<MedigyUser>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MedigyUser`. May be used by Relay 1. */
  medigyUserEdge?: Maybe<MedigyUsersEdge>;
};


/** The output of our create `MedigyUser` mutation. */
export type CreateMedigyUserPayloadMedigyUserEdgeArgs = {
  orderBy?: Maybe<Array<MedigyUsersOrderBy>>;
};

/** All input for the `createNegativeImpactMaster` mutation. */
export type CreateNegativeImpactMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

/** The output of our `createNegativeImpactMaster` mutation. */
export type CreateNegativeImpactMasterPayload = {
  __typename?: 'CreateNegativeImpactMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  impactSeverityId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createNewGroupEntry` mutation. */
export type CreateNewGroupEntryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsr?: Maybe<InstitutionProfileDatumInput>;
  appArea?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createNewGroupEntry` mutation. */
export type CreateNewGroupEntryPayload = {
  __typename?: 'CreateNewGroupEntryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionResult?: Maybe<InstitutionResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createNewInstitution` mutation. */
export type CreateNewInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  instProfile?: Maybe<InstitutionProfileInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createNewInstitution` mutation. */
export type CreateNewInstitutionPayload = {
  __typename?: 'CreateNewInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionResponseHdo?: Maybe<InstitutionResponseHdo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createNewInstitutionUbh` mutation. */
export type CreateNewInstitutionUbhInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  instProfile?: Maybe<InstitutionProfileInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createNewInstitutionUbh` mutation. */
export type CreateNewInstitutionUbhPayload = {
  __typename?: 'CreateNewInstitutionUbhPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionResponseHdo?: Maybe<InstitutionResponseHdo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createNotificationRead` mutation. */
export type CreateNotificationReadInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestLogId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createNotificationRead` mutation. */
export type CreateNotificationReadPayload = {
  __typename?: 'CreateNotificationReadPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `ObtainRecordTypeMaster` mutation. */
export type CreateObtainRecordTypeMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ObtainRecordTypeMaster` to be created by this mutation. */
  obtainRecordTypeMaster: ObtainRecordTypeMasterInput;
};

/** The output of our create `ObtainRecordTypeMaster` mutation. */
export type CreateObtainRecordTypeMasterPayload = {
  __typename?: 'CreateObtainRecordTypeMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ObtainRecordTypeMaster` that was created by this mutation. */
  obtainRecordTypeMaster?: Maybe<ObtainRecordTypeMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ObtainRecordTypeMaster`. May be used by Relay 1. */
  obtainRecordTypeMasterEdge?: Maybe<ObtainRecordTypeMastersEdge>;
};


/** The output of our create `ObtainRecordTypeMaster` mutation. */
export type CreateObtainRecordTypeMasterPayloadObtainRecordTypeMasterEdgeArgs = {
  orderBy?: Maybe<Array<ObtainRecordTypeMastersOrderBy>>;
};

/** All input for the `createObtainRecordTypeV1` mutation. */
export type CreateObtainRecordTypeV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  recordTypeIds?: Maybe<Array<Maybe<Scalars['Int']>>>;
  faxNumber?: Maybe<Scalars['String']>;
  otherFormat?: Maybe<Scalars['String']>;
  phr?: Maybe<Scalars['String']>;
};

/** The output of our `createObtainRecordTypeV1` mutation. */
export type CreateObtainRecordTypeV1Payload = {
  __typename?: 'CreateObtainRecordTypeV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `OccupationIndustryMasterV1` mutation. */
export type CreateOccupationIndustryMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OccupationIndustryMasterV1` to be created by this mutation. */
  occupationIndustryMasterV1: OccupationIndustryMasterV1Input;
};

/** The output of our create `OccupationIndustryMasterV1` mutation. */
export type CreateOccupationIndustryMasterV1Payload = {
  __typename?: 'CreateOccupationIndustryMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OccupationIndustryMasterV1` that was created by this mutation. */
  occupationIndustryMasterV1?: Maybe<OccupationIndustryMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `OccupationIndustryMasterV1`. May be used by Relay 1. */
  occupationIndustryMasterV1Edge?: Maybe<OccupationIndustryMasterV1sEdge>;
};


/** The output of our create `OccupationIndustryMasterV1` mutation. */
export type CreateOccupationIndustryMasterV1PayloadOccupationIndustryMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<OccupationIndustryMasterV1sOrderBy>>;
};

/** All input for the create `OfferingBrokenUrlList` mutation. */
export type CreateOfferingBrokenUrlListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OfferingBrokenUrlList` to be created by this mutation. */
  offeringBrokenUrlList: OfferingBrokenUrlListInput;
};

/** The output of our create `OfferingBrokenUrlList` mutation. */
export type CreateOfferingBrokenUrlListPayload = {
  __typename?: 'CreateOfferingBrokenUrlListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OfferingBrokenUrlList` that was created by this mutation. */
  offeringBrokenUrlList?: Maybe<OfferingBrokenUrlList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `OfferingBrokenUrlList`. May be used by Relay 1. */
  offeringBrokenUrlListEdge?: Maybe<OfferingBrokenUrlListsEdge>;
};


/** The output of our create `OfferingBrokenUrlList` mutation. */
export type CreateOfferingBrokenUrlListPayloadOfferingBrokenUrlListEdgeArgs = {
  orderBy?: Maybe<Array<OfferingBrokenUrlListsOrderBy>>;
};

/** All input for the `createOffering` mutation. */
export type CreateOfferingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getOfferingInput?: Maybe<CreateOfferingInputRecordInput>;
  accessToken?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** An input for mutations affecting `CreateOfferingInputRecord` */
export type CreateOfferingInputRecordInput = {
  offeringId?: Maybe<Scalars['String']>;
  offeringOwnerTenant?: Maybe<Scalars['String']>;
  offeringCreatedOn?: Maybe<Scalars['String']>;
  offeringType?: Maybe<OfferingType>;
  offeringOwnerCheck?: Maybe<Scalars['Boolean']>;
  offeringName?: Maybe<Scalars['String']>;
  offeringCategories?: Maybe<Array<Maybe<OfferingCategoriesInputRecordInput>>>;
  offeringRelatedCategories?: Maybe<Array<Maybe<OfferingCategoriesInputRecordInput>>>;
  offeringDescription?: Maybe<Scalars['String']>;
  offeringShortDescription?: Maybe<Scalars['String']>;
  offeringOrganization?: Maybe<Scalars['String']>;
  offeringOrganizationEmail?: Maybe<Scalars['String']>;
  offeringOrganizationContact?: Maybe<Scalars['String']>;
  offeringVendorName?: Maybe<Scalars['String']>;
  offeringVendorEmail?: Maybe<Scalars['String']>;
  offeringVendorContact?: Maybe<Scalars['String']>;
  offeringWebsite?: Maybe<Scalars['String']>;
  offeringLicense?: Maybe<OfferingLicenseInputRecordInput>;
  offeringGitRepoLink?: Maybe<Scalars['String']>;
  offeringHealthItStandards?: Maybe<Array<Maybe<OfferingHealthItStandardsInputRecordInput>>>;
  offeringFhirVersions?: Maybe<Array<Maybe<OfferingFhirVersionsInputRecordInput>>>;
  offeringFhirSupportedResources?: Maybe<Array<Maybe<OfferingFhirSupportedResourcesInputRecordInput>>>;
  offeringHl7Versions?: Maybe<Array<Maybe<OfferingHl7VersionsInputRecordInput>>>;
  offeringHl7SupportedMessages?: Maybe<Array<Maybe<OfferingHl7SupportedMessagesInputRecordInput>>>;
  offeringCdaVersions?: Maybe<Array<Maybe<OfferingCdaVersionsInputRecordInput>>>;
  offeringCcowVersions?: Maybe<Array<Maybe<OfferingCcowVersionsInputRecordInput>>>;
  offeringFacebookPage?: Maybe<Scalars['String']>;
  offeringTwitterPage?: Maybe<Scalars['String']>;
  offeringLinkedInPage?: Maybe<Scalars['String']>;
  offeringInstagramPage?: Maybe<Scalars['String']>;
  offeringFileUpload?: Maybe<Array<Maybe<FileInputRecordInput>>>;
  offeringTargetCustomers?: Maybe<OfferingTargetCustomersInputRecordInput>;
  offeringTenantDetails?: Maybe<InstitutionalProfileInputRecordInput>;
  offeringProjectName?: Maybe<Scalars['String']>;
  offeringFeatureProduct?: Maybe<Scalars['String']>;
};

/** The output of our `createOffering` mutation. */
export type CreateOfferingPayload = {
  __typename?: 'CreateOfferingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  offeringDataResult?: Maybe<OfferingDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createOrganizationDetail` mutation. */
export type CreateOrganizationDetailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  orgType?: Maybe<Scalars['String']>;
  parent?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganizationDetail` mutation. */
export type CreateOrganizationDetailPayload = {
  __typename?: 'CreateOrganizationDetailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `OrganizationGroupMasterV1` mutation. */
export type CreateOrganizationGroupMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganizationGroupMasterV1` to be created by this mutation. */
  organizationGroupMasterV1: OrganizationGroupMasterV1Input;
};

/** The output of our create `OrganizationGroupMasterV1` mutation. */
export type CreateOrganizationGroupMasterV1Payload = {
  __typename?: 'CreateOrganizationGroupMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganizationGroupMasterV1` that was created by this mutation. */
  organizationGroupMasterV1?: Maybe<OrganizationGroupMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `OrganizationGroupMasterV1`. May be used by Relay 1. */
  organizationGroupMasterV1Edge?: Maybe<OrganizationGroupMasterV1sEdge>;
};


/** The output of our create `OrganizationGroupMasterV1` mutation. */
export type CreateOrganizationGroupMasterV1PayloadOrganizationGroupMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<OrganizationGroupMasterV1sOrderBy>>;
};

/** All input for the `createOrganizationHdo1` mutation. */
export type CreateOrganizationHdo1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  stateName?: Maybe<Scalars['String']>;
  countryName?: Maybe<Scalars['String']>;
  orgZip?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  companyDetail?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganizationHdo1` mutation. */
export type CreateOrganizationHdo1Payload = {
  __typename?: 'CreateOrganizationHdo1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createOrganizationHdo` mutation. */
export type CreateOrganizationHdoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganizationHdo` mutation. */
export type CreateOrganizationHdoPayload = {
  __typename?: 'CreateOrganizationHdoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createOrganization` mutation. */
export type CreateOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
  orgType?: Maybe<Scalars['String']>;
  parentOrg?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganization` mutation. */
export type CreateOrganizationPayload = {
  __typename?: 'CreateOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createOrganizationPersonV1` mutation. */
export type CreateOrganizationPersonV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deptKeycloakId?: Maybe<Scalars['String']>;
  userKeycloakId?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganizationPersonV1` mutation. */
export type CreateOrganizationPersonV1Payload = {
  __typename?: 'CreateOrganizationPersonV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createOrganizationRealm` mutation. */
export type CreateOrganizationRealmInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
};

/** The output of our `createOrganizationRealm` mutation. */
export type CreateOrganizationRealmPayload = {
  __typename?: 'CreateOrganizationRealmPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyDepartment` mutation. */
export type CreatePartyDepartmentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deptKeycloakId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyDepartment` mutation. */
export type CreatePartyDepartmentPayload = {
  __typename?: 'CreatePartyDepartmentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyDepartmentV1` mutation. */
export type CreatePartyDepartmentV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deptKeycloakId?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyDepartmentV1` mutation. */
export type CreatePartyDepartmentV1Payload = {
  __typename?: 'CreatePartyDepartmentV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyIdentifier` mutation. */
export type CreatePartyIdentifierInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  partySourceId?: Maybe<Scalars['Int']>;
  idName?: Maybe<Scalars['String']>;
  idValue?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyIdentifier` mutation. */
export type CreatePartyIdentifierPayload = {
  __typename?: 'CreatePartyIdentifierPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyOrganization` mutation. */
export type CreatePartyOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzKeycloakId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyOrganization` mutation. */
export type CreatePartyOrganizationPayload = {
  __typename?: 'CreatePartyOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyOrganizationV1` mutation. */
export type CreatePartyOrganizationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzKeycloakId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyOrganizationV1` mutation. */
export type CreatePartyOrganizationV1Payload = {
  __typename?: 'CreatePartyOrganizationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyRealm` mutation. */
export type CreatePartyRealmInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userid?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyRealm` mutation. */
export type CreatePartyRealmPayload = {
  __typename?: 'CreatePartyRealmPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyRealmV1` mutation. */
export type CreatePartyRealmV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userid?: Maybe<Scalars['UUID']>;
  username?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyRealmV1` mutation. */
export type CreatePartyRealmV1Payload = {
  __typename?: 'CreatePartyRealmV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPartyRelation` mutation. */
export type CreatePartyRelationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzKeycloakId?: Maybe<Scalars['String']>;
  deptKeycloakId?: Maybe<Scalars['String']>;
};

/** The output of our `createPartyRelation` mutation. */
export type CreatePartyRelationPayload = {
  __typename?: 'CreatePartyRelationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPatientDemographics` mutation. */
export type CreatePatientDemographicsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userSexId?: Maybe<Scalars['Int']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['UUID']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
};

/** The output of our `createPatientDemographics` mutation. */
export type CreatePatientDemographicsPayload = {
  __typename?: 'CreatePatientDemographicsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPatientDemographicsV1` mutation. */
export type CreatePatientDemographicsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userGenderId?: Maybe<Scalars['Int']>;
  userSexId?: Maybe<Scalars['Int']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  userGenderOther?: Maybe<Scalars['Boolean']>;
  userGenderOtherValue?: Maybe<Scalars['String']>;
  userSexOther?: Maybe<Scalars['Boolean']>;
  userSexOtherValue?: Maybe<Scalars['String']>;
};

/** The output of our `createPatientDemographicsV1` mutation. */
export type CreatePatientDemographicsV1Payload = {
  __typename?: 'CreatePatientDemographicsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPatientRequestEmail` mutation. */
export type CreatePatientRequestEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  mailto?: Maybe<Scalars['String']>;
  mailfrom?: Maybe<Scalars['String']>;
  tofirstname?: Maybe<Scalars['String']>;
  formurl?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createPatientRequestEmail` mutation. */
export type CreatePatientRequestEmailPayload = {
  __typename?: 'CreatePatientRequestEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPatientWithDependent` mutation. */
export type CreatePatientWithDependentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  userSexId?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Scalars['Int']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousZipCode?: Maybe<Scalars['String']>;
  iamId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createPatientWithDependent` mutation. */
export type CreatePatientWithDependentPayload = {
  __typename?: 'CreatePatientWithDependentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPatientWithDependentV1` mutation. */
export type CreatePatientWithDependentV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  userGenderId?: Maybe<Scalars['Int']>;
  userSexId?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Scalars['Int']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousZipCode?: Maybe<Scalars['String']>;
  iamId?: Maybe<Scalars['String']>;
  userGenderOther?: Maybe<Scalars['Boolean']>;
  userGenderOtherValue?: Maybe<Scalars['String']>;
  userSexOther?: Maybe<Scalars['Boolean']>;
  userSexOtherValue?: Maybe<Scalars['String']>;
};

/** The output of our `createPatientWithDependentV1` mutation. */
export type CreatePatientWithDependentV1Payload = {
  __typename?: 'CreatePatientWithDependentV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPersonDemographics` mutation. */
export type CreatePersonDemographicsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  gender?: Maybe<Scalars['String']>;
  personType?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
};

/** All input for the `createPersonDemographicsPatient` mutation. */
export type CreatePersonDemographicsPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  gender?: Maybe<Scalars['Int']>;
  personType?: Maybe<Scalars['Int']>;
  phone?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  suffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
};

/** The output of our `createPersonDemographicsPatient` mutation. */
export type CreatePersonDemographicsPatientPayload = {
  __typename?: 'CreatePersonDemographicsPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The output of our `createPersonDemographics` mutation. */
export type CreatePersonDemographicsPayload = {
  __typename?: 'CreatePersonDemographicsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createPersonDemographicsV1` mutation. */
export type CreatePersonDemographicsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  gender?: Maybe<Scalars['Int']>;
  personType?: Maybe<Scalars['Int']>;
  phone?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  suffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
};

/** The output of our `createPersonDemographicsV1` mutation. */
export type CreatePersonDemographicsV1Payload = {
  __typename?: 'CreatePersonDemographicsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `PreferredLanguageMasterV1` mutation. */
export type CreatePreferredLanguageMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PreferredLanguageMasterV1` to be created by this mutation. */
  preferredLanguageMasterV1: PreferredLanguageMasterV1Input;
};

/** The output of our create `PreferredLanguageMasterV1` mutation. */
export type CreatePreferredLanguageMasterV1Payload = {
  __typename?: 'CreatePreferredLanguageMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PreferredLanguageMasterV1` that was created by this mutation. */
  preferredLanguageMasterV1?: Maybe<PreferredLanguageMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `PreferredLanguageMasterV1`. May be used by Relay 1. */
  preferredLanguageMasterV1Edge?: Maybe<PreferredLanguageMasterV1sEdge>;
};


/** The output of our create `PreferredLanguageMasterV1` mutation. */
export type CreatePreferredLanguageMasterV1PayloadPreferredLanguageMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<PreferredLanguageMasterV1sOrderBy>>;
};

/** All input for the create `PreferredPronounsMaster` mutation. */
export type CreatePreferredPronounsMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PreferredPronounsMaster` to be created by this mutation. */
  preferredPronounsMaster: PreferredPronounsMasterInput;
};

/** The output of our create `PreferredPronounsMaster` mutation. */
export type CreatePreferredPronounsMasterPayload = {
  __typename?: 'CreatePreferredPronounsMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PreferredPronounsMaster` that was created by this mutation. */
  preferredPronounsMaster?: Maybe<PreferredPronounsMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `PreferredPronounsMaster`. May be used by Relay 1. */
  preferredPronounsMasterEdge?: Maybe<PreferredPronounsMastersEdge>;
};


/** The output of our create `PreferredPronounsMaster` mutation. */
export type CreatePreferredPronounsMasterPayloadPreferredPronounsMasterEdgeArgs = {
  orderBy?: Maybe<Array<PreferredPronounsMastersOrderBy>>;
};

/** All input for the create `RaceMasterV1` mutation. */
export type CreateRaceMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RaceMasterV1` to be created by this mutation. */
  raceMasterV1: RaceMasterV1Input;
};

/** The output of our create `RaceMasterV1` mutation. */
export type CreateRaceMasterV1Payload = {
  __typename?: 'CreateRaceMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RaceMasterV1` that was created by this mutation. */
  raceMasterV1?: Maybe<RaceMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RaceMasterV1`. May be used by Relay 1. */
  raceMasterV1Edge?: Maybe<RaceMasterV1sEdge>;
};


/** The output of our create `RaceMasterV1` mutation. */
export type CreateRaceMasterV1PayloadRaceMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<RaceMasterV1sOrderBy>>;
};

/** All input for the `createRelatedPerson` mutation. */
export type CreateRelatedPersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relationDetail?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientRepresentative?: Maybe<Scalars['String']>;
};

/** The output of our `createRelatedPerson` mutation. */
export type CreateRelatedPersonPayload = {
  __typename?: 'CreateRelatedPersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `RelatedPersonRelationshipMaster` mutation. */
export type CreateRelatedPersonRelationshipMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RelatedPersonRelationshipMaster` to be created by this mutation. */
  relatedPersonRelationshipMaster: RelatedPersonRelationshipMasterInput;
};

/** The output of our create `RelatedPersonRelationshipMaster` mutation. */
export type CreateRelatedPersonRelationshipMasterPayload = {
  __typename?: 'CreateRelatedPersonRelationshipMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RelatedPersonRelationshipMaster` that was created by this mutation. */
  relatedPersonRelationshipMaster?: Maybe<RelatedPersonRelationshipMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RelatedPersonRelationshipMaster`. May be used by Relay 1. */
  relatedPersonRelationshipMasterEdge?: Maybe<RelatedPersonRelationshipMastersEdge>;
};


/** The output of our create `RelatedPersonRelationshipMaster` mutation. */
export type CreateRelatedPersonRelationshipMasterPayloadRelatedPersonRelationshipMasterEdgeArgs = {
  orderBy?: Maybe<Array<RelatedPersonRelationshipMastersOrderBy>>;
};

/** All input for the create `RelationshipType` mutation. */
export type CreateRelationshipTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RelationshipType` to be created by this mutation. */
  relationshipType: RelationshipTypeInput;
};

/** The output of our create `RelationshipType` mutation. */
export type CreateRelationshipTypePayload = {
  __typename?: 'CreateRelationshipTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RelationshipType` that was created by this mutation. */
  relationshipType?: Maybe<RelationshipType>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RelationshipType`. May be used by Relay 1. */
  relationshipTypeEdge?: Maybe<RelationshipTypesEdge>;
};


/** The output of our create `RelationshipType` mutation. */
export type CreateRelationshipTypePayloadRelationshipTypeEdgeArgs = {
  orderBy?: Maybe<Array<RelationshipTypesOrderBy>>;
};

/** All input for the `createRequestDenialLetter` mutation. */
export type CreateRequestDenialLetterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  reasonids?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Scalars['Int']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  denialType?: Maybe<Scalars['String']>;
  exceptionids?: Maybe<Array<Maybe<Scalars['Int']>>>;
  isExceptionid?: Maybe<Scalars['Boolean']>;
  hasShareInternalDenial?: Maybe<Scalars['Boolean']>;
  remarks?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** All input for the `createRequestDenialLetterLat` mutation. */
export type CreateRequestDenialLetterLatInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  reasonids?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Scalars['Int']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  denialType?: Maybe<Scalars['String']>;
  exceptionids?: Maybe<Array<Maybe<Scalars['Int']>>>;
  isExceptionid?: Maybe<Scalars['Boolean']>;
  hasShareInternalDenial?: Maybe<Scalars['Boolean']>;
  remarks?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createRequestDenialLetterLat` mutation. */
export type CreateRequestDenialLetterLatPayload = {
  __typename?: 'CreateRequestDenialLetterLatPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The output of our `createRequestDenialLetter` mutation. */
export type CreateRequestDenialLetterPayload = {
  __typename?: 'CreateRequestDenialLetterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createRequestLogV1` mutation. */
export type CreateRequestLogV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  type?: Maybe<Scalars['Int']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

/** The output of our `createRequestLogV1` mutation. */
export type CreateRequestLogV1Payload = {
  __typename?: 'CreateRequestLogV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `RequestPriorityMaster` mutation. */
export type CreateRequestPriorityMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestPriorityMaster` to be created by this mutation. */
  requestPriorityMaster: RequestPriorityMasterInput;
};

/** The output of our create `RequestPriorityMaster` mutation. */
export type CreateRequestPriorityMasterPayload = {
  __typename?: 'CreateRequestPriorityMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestPriorityMaster` that was created by this mutation. */
  requestPriorityMaster?: Maybe<RequestPriorityMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RequestPriorityMaster`. May be used by Relay 1. */
  requestPriorityMasterEdge?: Maybe<RequestPriorityMastersEdge>;
};


/** The output of our create `RequestPriorityMaster` mutation. */
export type CreateRequestPriorityMasterPayloadRequestPriorityMasterEdgeArgs = {
  orderBy?: Maybe<Array<RequestPriorityMastersOrderBy>>;
};

/** All input for the `createRequestResponseV1` mutation. */
export type CreateRequestResponseV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  repliedBy?: Maybe<Scalars['UUID']>;
  response?: Maybe<Scalars['String']>;
  responseType?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['Int']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createRequestResponseV1` mutation. */
export type CreateRequestResponseV1Payload = {
  __typename?: 'CreateRequestResponseV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `RequestStatusMaster` mutation. */
export type CreateRequestStatusMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestStatusMaster` to be created by this mutation. */
  requestStatusMaster: RequestStatusMasterInput;
};

/** The output of our create `RequestStatusMaster` mutation. */
export type CreateRequestStatusMasterPayload = {
  __typename?: 'CreateRequestStatusMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestStatusMaster` that was created by this mutation. */
  requestStatusMaster?: Maybe<RequestStatusMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RequestStatusMaster`. May be used by Relay 1. */
  requestStatusMasterEdge?: Maybe<RequestStatusMastersEdge>;
};


/** The output of our create `RequestStatusMaster` mutation. */
export type CreateRequestStatusMasterPayloadRequestStatusMasterEdgeArgs = {
  orderBy?: Maybe<Array<RequestStatusMastersOrderBy>>;
};

/** All input for the create `RequestToken` mutation. */
export type CreateRequestTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestToken` to be created by this mutation. */
  requestToken: RequestTokenInput;
};

/** The output of our create `RequestToken` mutation. */
export type CreateRequestTokenPayload = {
  __typename?: 'CreateRequestTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestToken` that was created by this mutation. */
  requestToken?: Maybe<RequestToken>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RequestToken`. May be used by Relay 1. */
  requestTokenEdge?: Maybe<RequestTokensEdge>;
};


/** The output of our create `RequestToken` mutation. */
export type CreateRequestTokenPayloadRequestTokenEdgeArgs = {
  orderBy?: Maybe<Array<RequestTokensOrderBy>>;
};

/** All input for the create `RequestTypeMaster` mutation. */
export type CreateRequestTypeMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestTypeMaster` to be created by this mutation. */
  requestTypeMaster: RequestTypeMasterInput;
};

/** The output of our create `RequestTypeMaster` mutation. */
export type CreateRequestTypeMasterPayload = {
  __typename?: 'CreateRequestTypeMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `RequestTypeMaster` that was created by this mutation. */
  requestTypeMaster?: Maybe<RequestTypeMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `RequestTypeMaster`. May be used by Relay 1. */
  requestTypeMasterEdge?: Maybe<RequestTypeMastersEdge>;
};


/** The output of our create `RequestTypeMaster` mutation. */
export type CreateRequestTypeMasterPayloadRequestTypeMasterEdgeArgs = {
  orderBy?: Maybe<Array<RequestTypeMastersOrderBy>>;
};

/** All input for the create `ServiceCategoryMaster` mutation. */
export type CreateServiceCategoryMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ServiceCategoryMaster` to be created by this mutation. */
  serviceCategoryMaster: ServiceCategoryMasterInput;
};

/** The output of our create `ServiceCategoryMaster` mutation. */
export type CreateServiceCategoryMasterPayload = {
  __typename?: 'CreateServiceCategoryMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ServiceCategoryMaster` that was created by this mutation. */
  serviceCategoryMaster?: Maybe<ServiceCategoryMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ServiceCategoryMaster`. May be used by Relay 1. */
  serviceCategoryMasterEdge?: Maybe<ServiceCategoryMastersEdge>;
};


/** The output of our create `ServiceCategoryMaster` mutation. */
export type CreateServiceCategoryMasterPayloadServiceCategoryMasterEdgeArgs = {
  orderBy?: Maybe<Array<ServiceCategoryMastersOrderBy>>;
};

/** All input for the `createServiceDetails` mutation. */
export type CreateServiceDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  serviceName?: Maybe<Scalars['String']>;
  partyIam?: Maybe<Scalars['UUID']>;
  idName?: Maybe<Scalars['String']>;
};

/** The output of our `createServiceDetails` mutation. */
export type CreateServiceDetailsPayload = {
  __typename?: 'CreateServiceDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `SexMasterV1` mutation. */
export type CreateSexMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SexMasterV1` to be created by this mutation. */
  sexMasterV1: SexMasterV1Input;
};

/** The output of our create `SexMasterV1` mutation. */
export type CreateSexMasterV1Payload = {
  __typename?: 'CreateSexMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SexMasterV1` that was created by this mutation. */
  sexMasterV1?: Maybe<SexMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SexMasterV1`. May be used by Relay 1. */
  sexMasterV1Edge?: Maybe<SexMasterV1sEdge>;
};


/** The output of our create `SexMasterV1` mutation. */
export type CreateSexMasterV1PayloadSexMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<SexMasterV1sOrderBy>>;
};

/** All input for the create `SexualOrientationMasterV1` mutation. */
export type CreateSexualOrientationMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SexualOrientationMasterV1` to be created by this mutation. */
  sexualOrientationMasterV1: SexualOrientationMasterV1Input;
};

/** The output of our create `SexualOrientationMasterV1` mutation. */
export type CreateSexualOrientationMasterV1Payload = {
  __typename?: 'CreateSexualOrientationMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SexualOrientationMasterV1` that was created by this mutation. */
  sexualOrientationMasterV1?: Maybe<SexualOrientationMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SexualOrientationMasterV1`. May be used by Relay 1. */
  sexualOrientationMasterV1Edge?: Maybe<SexualOrientationMasterV1sEdge>;
};


/** The output of our create `SexualOrientationMasterV1` mutation. */
export type CreateSexualOrientationMasterV1PayloadSexualOrientationMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<SexualOrientationMasterV1sOrderBy>>;
};

/** All input for the create `SourceNatureMaster` mutation. */
export type CreateSourceNatureMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SourceNatureMaster` to be created by this mutation. */
  sourceNatureMaster: SourceNatureMasterInput;
};

/** The output of our create `SourceNatureMaster` mutation. */
export type CreateSourceNatureMasterPayload = {
  __typename?: 'CreateSourceNatureMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SourceNatureMaster` that was created by this mutation. */
  sourceNatureMaster?: Maybe<SourceNatureMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SourceNatureMaster`. May be used by Relay 1. */
  sourceNatureMasterEdge?: Maybe<SourceNatureMastersEdge>;
};


/** The output of our create `SourceNatureMaster` mutation. */
export type CreateSourceNatureMasterPayloadSourceNatureMasterEdgeArgs = {
  orderBy?: Maybe<Array<SourceNatureMastersOrderBy>>;
};

/** All input for the create `StateList` mutation. */
export type CreateStateListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StateList` to be created by this mutation. */
  stateList: StateListInput;
};

/** The output of our create `StateList` mutation. */
export type CreateStateListPayload = {
  __typename?: 'CreateStateListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StateList` that was created by this mutation. */
  stateList?: Maybe<StateList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `StateList`. May be used by Relay 1. */
  stateListEdge?: Maybe<StateListsEdge>;
};


/** The output of our create `StateList` mutation. */
export type CreateStateListPayloadStateListEdgeArgs = {
  orderBy?: Maybe<Array<StateListsOrderBy>>;
};

/** All input for the create `StateMasterV1` mutation. */
export type CreateStateMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StateMasterV1` to be created by this mutation. */
  stateMasterV1: StateMasterV1Input;
};

/** The output of our create `StateMasterV1` mutation. */
export type CreateStateMasterV1Payload = {
  __typename?: 'CreateStateMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StateMasterV1` that was created by this mutation. */
  stateMasterV1?: Maybe<StateMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `StateMasterV1`. May be used by Relay 1. */
  stateMasterV1Edge?: Maybe<StateMasterV1sEdge>;
};


/** The output of our create `StateMasterV1` mutation. */
export type CreateStateMasterV1PayloadStateMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<StateMasterV1sOrderBy>>;
};

/** All input for the create `StatusMaster` mutation. */
export type CreateStatusMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StatusMaster` to be created by this mutation. */
  statusMaster: StatusMasterInput;
};

/** The output of our create `StatusMaster` mutation. */
export type CreateStatusMasterPayload = {
  __typename?: 'CreateStatusMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `StatusMaster` that was created by this mutation. */
  statusMaster?: Maybe<StatusMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `StatusMaster`. May be used by Relay 1. */
  statusMasterEdge?: Maybe<StatusMastersEdge>;
};


/** The output of our create `StatusMaster` mutation. */
export type CreateStatusMasterPayloadStatusMasterEdgeArgs = {
  orderBy?: Maybe<Array<StatusMastersOrderBy>>;
};

/** All input for the `createSubstanceDisorderAuthEmail` mutation. */
export type CreateSubstanceDisorderAuthEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  mailto?: Maybe<Scalars['String']>;
  mailfrom?: Maybe<Scalars['String']>;
  tofirstname?: Maybe<Scalars['String']>;
  formurl?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `createSubstanceDisorderAuthEmail` mutation. */
export type CreateSubstanceDisorderAuthEmailPayload = {
  __typename?: 'CreateSubstanceDisorderAuthEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `SubstanceDisorderInformationMasterV1` mutation. */
export type CreateSubstanceDisorderInformationMasterV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SubstanceDisorderInformationMasterV1` to be created by this mutation. */
  substanceDisorderInformationMasterV1: SubstanceDisorderInformationMasterV1Input;
};

/** The output of our create `SubstanceDisorderInformationMasterV1` mutation. */
export type CreateSubstanceDisorderInformationMasterV1Payload = {
  __typename?: 'CreateSubstanceDisorderInformationMasterV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SubstanceDisorderInformationMasterV1` that was created by this mutation. */
  substanceDisorderInformationMasterV1?: Maybe<SubstanceDisorderInformationMasterV1>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SubstanceDisorderInformationMasterV1`. May be used by Relay 1. */
  substanceDisorderInformationMasterV1Edge?: Maybe<SubstanceDisorderInformationMasterV1sEdge>;
};


/** The output of our create `SubstanceDisorderInformationMasterV1` mutation. */
export type CreateSubstanceDisorderInformationMasterV1PayloadSubstanceDisorderInformationMasterV1EdgeArgs = {
  orderBy?: Maybe<Array<SubstanceDisorderInformationMasterV1sOrderBy>>;
};

/** All input for the `createSubstanceUseDisorderAuthorization` mutation. */
export type CreateSubstanceUseDisorderAuthorizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mrrRequestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  receivePerson?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['UUID']>;
  useDisorderAuthorizationTitleId?: Maybe<Scalars['Int']>;
  disorderTreatmentProgram?: Maybe<Scalars['String']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['Int']>;
};

/** The output of our `createSubstanceUseDisorderAuthorization` mutation. */
export type CreateSubstanceUseDisorderAuthorizationPayload = {
  __typename?: 'CreateSubstanceUseDisorderAuthorizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createSubstanceUseDisorderAuthorizationV1` mutation. */
export type CreateSubstanceUseDisorderAuthorizationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  receivePerson?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['UUID']>;
  useDisorderAuthorizationTitleId?: Maybe<Scalars['Int']>;
  disorderTreatmentProgram?: Maybe<Scalars['String']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['Int']>;
};

/** The output of our `createSubstanceUseDisorderAuthorizationV1` mutation. */
export type CreateSubstanceUseDisorderAuthorizationV1Payload = {
  __typename?: 'CreateSubstanceUseDisorderAuthorizationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the create `SurveyFormUpdate` mutation. */
export type CreateSurveyFormUpdateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyFormUpdate` to be created by this mutation. */
  surveyFormUpdate: SurveyFormUpdateInput;
};

/** The output of our create `SurveyFormUpdate` mutation. */
export type CreateSurveyFormUpdatePayload = {
  __typename?: 'CreateSurveyFormUpdatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyFormUpdate` that was created by this mutation. */
  surveyFormUpdate?: Maybe<SurveyFormUpdate>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SurveyFormUpdate`. May be used by Relay 1. */
  surveyFormUpdateEdge?: Maybe<SurveyFormUpdatesEdge>;
};


/** The output of our create `SurveyFormUpdate` mutation. */
export type CreateSurveyFormUpdatePayloadSurveyFormUpdateEdgeArgs = {
  orderBy?: Maybe<Array<SurveyFormUpdatesOrderBy>>;
};

/** All input for the create `SurveyList` mutation. */
export type CreateSurveyListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyList` to be created by this mutation. */
  surveyList: SurveyListInput;
};

/** The output of our create `SurveyList` mutation. */
export type CreateSurveyListPayload = {
  __typename?: 'CreateSurveyListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyList` that was created by this mutation. */
  surveyList?: Maybe<SurveyList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SurveyList`. May be used by Relay 1. */
  surveyListEdge?: Maybe<SurveyListsEdge>;
};


/** The output of our create `SurveyList` mutation. */
export type CreateSurveyListPayloadSurveyListEdgeArgs = {
  orderBy?: Maybe<Array<SurveyListsOrderBy>>;
};

/** All input for the create `UseDisorderAuthorizationTitleMaster` mutation. */
export type CreateUseDisorderAuthorizationTitleMasterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UseDisorderAuthorizationTitleMaster` to be created by this mutation. */
  useDisorderAuthorizationTitleMaster: UseDisorderAuthorizationTitleMasterInput;
};

/** The output of our create `UseDisorderAuthorizationTitleMaster` mutation. */
export type CreateUseDisorderAuthorizationTitleMasterPayload = {
  __typename?: 'CreateUseDisorderAuthorizationTitleMasterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UseDisorderAuthorizationTitleMaster` that was created by this mutation. */
  useDisorderAuthorizationTitleMaster?: Maybe<UseDisorderAuthorizationTitleMaster>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `UseDisorderAuthorizationTitleMaster`. May be used by Relay 1. */
  useDisorderAuthorizationTitleMasterEdge?: Maybe<UseDisorderAuthorizationTitleMastersEdge>;
};


/** The output of our create `UseDisorderAuthorizationTitleMaster` mutation. */
export type CreateUseDisorderAuthorizationTitleMasterPayloadUseDisorderAuthorizationTitleMasterEdgeArgs = {
  orderBy?: Maybe<Array<UseDisorderAuthorizationTitleMastersOrderBy>>;
};

/** All input for the `createUserInParty` mutation. */
export type CreateUserInPartyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userid?: Maybe<Scalars['UUID']>;
  username?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  signupEmail?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  userRole?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `createUserInParty` mutation. */
export type CreateUserInPartyPayload = {
  __typename?: 'CreateUserInPartyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createVirtualUser` mutation. */
export type CreateVirtualUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  tokenId?: Maybe<Scalars['UUID']>;
  fName?: Maybe<Scalars['String']>;
  mName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `createVirtualUser` mutation. */
export type CreateVirtualUserPayload = {
  __typename?: 'CreateVirtualUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `createVirtualUserV1` mutation. */
export type CreateVirtualUserV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  tokenId?: Maybe<Scalars['UUID']>;
  userRole?: Maybe<Scalars['String']>;
  fName?: Maybe<Scalars['String']>;
  mName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userPartyId?: Maybe<Scalars['UUID']>;
};

/** The output of our `createVirtualUserV1` mutation. */
export type CreateVirtualUserV1Payload = {
  __typename?: 'CreateVirtualUserV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type CuratedCount = {
  __typename?: 'CuratedCount';
  openProjectNews?: Maybe<Scalars['Int']>;
  scheduledProjectNews?: Maybe<Scalars['Int']>;
  openProjectEvents?: Maybe<Scalars['Int']>;
  scheduledOpenProjectEvents?: Maybe<Scalars['Int']>;
  openProjectCommunity?: Maybe<Scalars['Int']>;
  scheduledOpenProjectCommunity?: Maybe<Scalars['Int']>;
  curatedOffering?: Maybe<Scalars['Int']>;
  approvedOffering?: Maybe<Scalars['Int']>;
  scheduledOffering?: Maybe<Scalars['Int']>;
  lastFeedFetchedOn?: Maybe<Scalars['String']>;
  pressReleaseCount?: Maybe<Scalars['String']>;
};



/** A filter to be used against Date fields. All fields are combined with a logical ‘and.’ */
export type DateFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Date']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Date']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Date']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Date']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Date']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Date']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Date']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Date']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Date']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Date']>;
};


/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Datetime']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Datetime']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Datetime']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Datetime']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Datetime']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Datetime']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Datetime']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Datetime']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Datetime']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Datetime']>;
};

/** All input for the `deleteExternalSystem` mutation. */
export type DeleteExternalSystemInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `deleteExternalSystem` mutation. */
export type DeleteExternalSystemPayload = {
  __typename?: 'DeleteExternalSystemPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `deleteFileUploadByNodeId` mutation. */
export type DeleteFileUploadByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `FileUpload` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteFileUpload` mutation. */
export type DeleteFileUploadInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `FileUpload` mutation. */
export type DeleteFileUploadPayload = {
  __typename?: 'DeleteFileUploadPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FileUpload` that was deleted by this mutation. */
  fileUpload?: Maybe<FileUpload>;
  deletedFileUploadNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `FileUpload`. May be used by Relay 1. */
  fileUploadEdge?: Maybe<FileUploadsEdge>;
};


/** The output of our delete `FileUpload` mutation. */
export type DeleteFileUploadPayloadFileUploadEdgeArgs = {
  orderBy?: Maybe<Array<FileUploadsOrderBy>>;
};

/** All input for the `deleteInvite` mutation. */
export type DeleteInviteInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userInviteId?: Maybe<Scalars['UUID']>;
};

/** The output of our `deleteInvite` mutation. */
export type DeleteInvitePayload = {
  __typename?: 'DeleteInvitePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deletedRecordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `deleteMediaTypeByMimeTypeAndFileExtnAndLabel` mutation. */
export type DeleteMediaTypeByMimeTypeAndFileExtnAndLabelInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mimeType: Scalars['String'];
  fileExtn: Scalars['String'];
  label: Scalars['String'];
};

/** The output of our delete `MediaType` mutation. */
export type DeleteMediaTypePayload = {
  __typename?: 'DeleteMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was deleted by this mutation. */
  mediaType?: Maybe<MediaType>;
  deletedMediaTypeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
};


/** The output of our delete `MediaType` mutation. */
export type DeleteMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the `deleteRequestV1` mutation. */
export type DeleteRequestV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `deleteRequestV1` mutation. */
export type DeleteRequestV1Payload = {
  __typename?: 'DeleteRequestV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `deleteRequestV2` mutation. */
export type DeleteRequestV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `deleteRequestV2` mutation. */
export type DeleteRequestV2Payload = {
  __typename?: 'DeleteRequestV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `deleteSurveyFormUpdateByNodeId` mutation. */
export type DeleteSurveyFormUpdateByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SurveyFormUpdate` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteSurveyFormUpdate` mutation. */
export type DeleteSurveyFormUpdateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['UUID'];
};

/** The output of our delete `SurveyFormUpdate` mutation. */
export type DeleteSurveyFormUpdatePayload = {
  __typename?: 'DeleteSurveyFormUpdatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyFormUpdate` that was deleted by this mutation. */
  surveyFormUpdate?: Maybe<SurveyFormUpdate>;
  deletedSurveyFormUpdateNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SurveyFormUpdate`. May be used by Relay 1. */
  surveyFormUpdateEdge?: Maybe<SurveyFormUpdatesEdge>;
};


/** The output of our delete `SurveyFormUpdate` mutation. */
export type DeleteSurveyFormUpdatePayloadSurveyFormUpdateEdgeArgs = {
  orderBy?: Maybe<Array<SurveyFormUpdatesOrderBy>>;
};

export type DenialFormV1 = {
  __typename?: 'DenialFormV1';
  id?: Maybe<Scalars['UUID']>;
  remarks?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  denialType?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  createdBy?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  assignedfperson?: Maybe<Scalars['String']>;
  assignedmperson?: Maybe<Scalars['String']>;
  assignedlperson?: Maybe<Scalars['String']>;
  assignedemail?: Maybe<Scalars['String']>;
  denyfperson?: Maybe<Scalars['String']>;
  denymperson?: Maybe<Scalars['String']>;
  denylperson?: Maybe<Scalars['String']>;
  denyemail?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['UUID']>;
  hasShareInternalDenial?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['String']>;
  exceptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  codevalue?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `DenialFormV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type DenialFormV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `remarks` field. */
  remarks?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `denialType` field. */
  denialType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedfperson` field. */
  assignedfperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmperson` field. */
  assignedmperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlperson` field. */
  assignedlperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedemail` field. */
  assignedemail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `denyfperson` field. */
  denyfperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `denymperson` field. */
  denymperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `denylperson` field. */
  denylperson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `denyemail` field. */
  denyemail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `signature` field. */
  signature?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hasShareInternalDenial` field. */
  hasShareInternalDenial?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `notes` field. */
  notes?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `exceptions` field. */
  exceptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `codevalue` field. */
  codevalue?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `DenialFormV1` object types. All fields are combined with a logical ‘and.’ */
export type DenialFormV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `remarks` field. */
  remarks?: Maybe<StringFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `denialType` field. */
  denialType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedfperson` field. */
  assignedfperson?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmperson` field. */
  assignedmperson?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlperson` field. */
  assignedlperson?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedemail` field. */
  assignedemail?: Maybe<StringFilter>;
  /** Filter by the object’s `denyfperson` field. */
  denyfperson?: Maybe<StringFilter>;
  /** Filter by the object’s `denymperson` field. */
  denymperson?: Maybe<StringFilter>;
  /** Filter by the object’s `denylperson` field. */
  denylperson?: Maybe<StringFilter>;
  /** Filter by the object’s `denyemail` field. */
  denyemail?: Maybe<StringFilter>;
  /** Filter by the object’s `signature` field. */
  signature?: Maybe<UuidFilter>;
  /** Filter by the object’s `hasShareInternalDenial` field. */
  hasShareInternalDenial?: Maybe<BooleanFilter>;
  /** Filter by the object’s `notes` field. */
  notes?: Maybe<StringFilter>;
  /** Filter by the object’s `exceptions` field. */
  exceptions?: Maybe<StringListFilter>;
  /** Filter by the object’s `codevalue` field. */
  codevalue?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DenialFormV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DenialFormV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<DenialFormV1Filter>;
};

/** A connection to a list of `DenialFormV1` values. */
export type DenialFormV1sConnection = {
  __typename?: 'DenialFormV1sConnection';
  /** A list of `DenialFormV1` objects. */
  nodes: Array<Maybe<DenialFormV1>>;
  /** A list of edges which contains the `DenialFormV1` and cursor to aid in pagination. */
  edges: Array<DenialFormV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DenialFormV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `DenialFormV1` edge in the connection. */
export type DenialFormV1sEdge = {
  __typename?: 'DenialFormV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DenialFormV1` at the end of the edge. */
  node?: Maybe<DenialFormV1>;
};

/** Methods to use when ordering `DenialFormV1`. */
export enum DenialFormV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RemarksAsc = 'REMARKS_ASC',
  RemarksDesc = 'REMARKS_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  DenialTypeAsc = 'DENIAL_TYPE_ASC',
  DenialTypeDesc = 'DENIAL_TYPE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  AssignedfpersonAsc = 'ASSIGNEDFPERSON_ASC',
  AssignedfpersonDesc = 'ASSIGNEDFPERSON_DESC',
  AssignedmpersonAsc = 'ASSIGNEDMPERSON_ASC',
  AssignedmpersonDesc = 'ASSIGNEDMPERSON_DESC',
  AssignedlpersonAsc = 'ASSIGNEDLPERSON_ASC',
  AssignedlpersonDesc = 'ASSIGNEDLPERSON_DESC',
  AssignedemailAsc = 'ASSIGNEDEMAIL_ASC',
  AssignedemailDesc = 'ASSIGNEDEMAIL_DESC',
  DenyfpersonAsc = 'DENYFPERSON_ASC',
  DenyfpersonDesc = 'DENYFPERSON_DESC',
  DenympersonAsc = 'DENYMPERSON_ASC',
  DenympersonDesc = 'DENYMPERSON_DESC',
  DenylpersonAsc = 'DENYLPERSON_ASC',
  DenylpersonDesc = 'DENYLPERSON_DESC',
  DenyemailAsc = 'DENYEMAIL_ASC',
  DenyemailDesc = 'DENYEMAIL_DESC',
  SignatureAsc = 'SIGNATURE_ASC',
  SignatureDesc = 'SIGNATURE_DESC',
  HasShareInternalDenialAsc = 'HAS_SHARE_INTERNAL_DENIAL_ASC',
  HasShareInternalDenialDesc = 'HAS_SHARE_INTERNAL_DENIAL_DESC',
  NotesAsc = 'NOTES_ASC',
  NotesDesc = 'NOTES_DESC',
  ExceptionsAsc = 'EXCEPTIONS_ASC',
  ExceptionsDesc = 'EXCEPTIONS_DESC',
  CodevalueAsc = 'CODEVALUE_ASC',
  CodevalueDesc = 'CODEVALUE_DESC'
}

/** This view is used to show denial letter reasons in checkbox in UI. */
export type DenialLetterReasonMaster = {
  __typename?: 'DenialLetterReasonMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `DenialLetterReasonMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type DenialLetterReasonMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DenialLetterReasonMaster` object types. All fields are combined with a logical ‘and.’ */
export type DenialLetterReasonMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DenialLetterReasonMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DenialLetterReasonMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<DenialLetterReasonMasterFilter>;
};

/** An input for mutations affecting `DenialLetterReasonMaster` */
export type DenialLetterReasonMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `DenialLetterReasonMaster` values. */
export type DenialLetterReasonMastersConnection = {
  __typename?: 'DenialLetterReasonMastersConnection';
  /** A list of `DenialLetterReasonMaster` objects. */
  nodes: Array<Maybe<DenialLetterReasonMaster>>;
  /** A list of edges which contains the `DenialLetterReasonMaster` and cursor to aid in pagination. */
  edges: Array<DenialLetterReasonMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DenialLetterReasonMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `DenialLetterReasonMaster` edge in the connection. */
export type DenialLetterReasonMastersEdge = {
  __typename?: 'DenialLetterReasonMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DenialLetterReasonMaster` at the end of the edge. */
  node?: Maybe<DenialLetterReasonMaster>;
};

/** Methods to use when ordering `DenialLetterReasonMaster`. */
export enum DenialLetterReasonMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type DepartmentHeadMasterDetailsV1 = {
  __typename?: 'DepartmentHeadMasterDetailsV1';
  id?: Maybe<Scalars['UUID']>;
  assignedPersonId?: Maybe<Scalars['UUID']>;
  depId?: Maybe<Scalars['UUID']>;
  organizationId?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `DepartmentHeadMasterDetailsV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type DepartmentHeadMasterDetailsV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignedPersonId` field. */
  assignedPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `depId` field. */
  depId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DepartmentHeadMasterDetailsV1` object types. All fields are combined with a logical ‘and.’ */
export type DepartmentHeadMasterDetailsV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignedPersonId` field. */
  assignedPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `depId` field. */
  depId?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DepartmentHeadMasterDetailsV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DepartmentHeadMasterDetailsV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<DepartmentHeadMasterDetailsV1Filter>;
};

/** A connection to a list of `DepartmentHeadMasterDetailsV1` values. */
export type DepartmentHeadMasterDetailsV1sConnection = {
  __typename?: 'DepartmentHeadMasterDetailsV1sConnection';
  /** A list of `DepartmentHeadMasterDetailsV1` objects. */
  nodes: Array<Maybe<DepartmentHeadMasterDetailsV1>>;
  /** A list of edges which contains the `DepartmentHeadMasterDetailsV1` and cursor to aid in pagination. */
  edges: Array<DepartmentHeadMasterDetailsV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DepartmentHeadMasterDetailsV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `DepartmentHeadMasterDetailsV1` edge in the connection. */
export type DepartmentHeadMasterDetailsV1sEdge = {
  __typename?: 'DepartmentHeadMasterDetailsV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DepartmentHeadMasterDetailsV1` at the end of the edge. */
  node?: Maybe<DepartmentHeadMasterDetailsV1>;
};

/** Methods to use when ordering `DepartmentHeadMasterDetailsV1`. */
export enum DepartmentHeadMasterDetailsV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AssignedPersonIdAsc = 'ASSIGNED_PERSON_ID_ASC',
  AssignedPersonIdDesc = 'ASSIGNED_PERSON_ID_DESC',
  DepIdAsc = 'DEP_ID_ASC',
  DepIdDesc = 'DEP_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC'
}

export type Dependent = {
  __typename?: 'Dependent';
  id?: Maybe<Scalars['UUID']>;
  suffix?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  prefferedPronouns?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  personType?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  recordStatus?: Maybe<Scalars['String']>;
  registrationStatus?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  inviteDetails?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  relatedPersonRelationshipId?: Maybe<Scalars['Int']>;
  relatedPersonRelationshipValue?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `Dependent` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type DependentCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `address1` field. */
  address1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address2` field. */
  address2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zip` field. */
  zip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `relatedPersonRelationshipId` field. */
  relatedPersonRelationshipId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `relatedPersonRelationshipValue` field. */
  relatedPersonRelationshipValue?: Maybe<Scalars['String']>;
};

/** A filter to be used against `Dependent` object types. All fields are combined with a logical ‘and.’ */
export type DependentFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `address1` field. */
  address1?: Maybe<StringFilter>;
  /** Filter by the object’s `address2` field. */
  address2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `zip` field. */
  zip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<JsonFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `relatedPersonRelationshipId` field. */
  relatedPersonRelationshipId?: Maybe<IntFilter>;
  /** Filter by the object’s `relatedPersonRelationshipValue` field. */
  relatedPersonRelationshipValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DependentFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DependentFilter>>;
  /** Negates the expression. */
  not?: Maybe<DependentFilter>;
};

export type DependentList = {
  __typename?: 'DependentList';
  id?: Maybe<Scalars['UUID']>;
  suffix?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  prefferedPronouns?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  personType?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  recordStatus?: Maybe<Scalars['String']>;
  registrationStatus?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  inviteDetails?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  relatedPersonRelationshipId?: Maybe<Scalars['Int']>;
  relatedPersonRelationshipValue?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `DependentList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type DependentListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `address1` field. */
  address1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address2` field. */
  address2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zip` field. */
  zip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `relatedPersonRelationshipId` field. */
  relatedPersonRelationshipId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `relatedPersonRelationshipValue` field. */
  relatedPersonRelationshipValue?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DependentList` object types. All fields are combined with a logical ‘and.’ */
export type DependentListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `address1` field. */
  address1?: Maybe<StringFilter>;
  /** Filter by the object’s `address2` field. */
  address2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `zip` field. */
  zip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<JsonFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `relatedPersonRelationshipId` field. */
  relatedPersonRelationshipId?: Maybe<IntFilter>;
  /** Filter by the object’s `relatedPersonRelationshipValue` field. */
  relatedPersonRelationshipValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DependentListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DependentListFilter>>;
  /** Negates the expression. */
  not?: Maybe<DependentListFilter>;
};

/** A connection to a list of `DependentList` values. */
export type DependentListsConnection = {
  __typename?: 'DependentListsConnection';
  /** A list of `DependentList` objects. */
  nodes: Array<Maybe<DependentList>>;
  /** A list of edges which contains the `DependentList` and cursor to aid in pagination. */
  edges: Array<DependentListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DependentList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `DependentList` edge in the connection. */
export type DependentListsEdge = {
  __typename?: 'DependentListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DependentList` at the end of the edge. */
  node?: Maybe<DependentList>;
};

/** Methods to use when ordering `DependentList`. */
export enum DependentListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageAsc = 'PREFERRED_LANGUAGE_ASC',
  PreferredLanguageDesc = 'PREFERRED_LANGUAGE_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PrefferedPronounsAsc = 'PREFFERED_PRONOUNS_ASC',
  PrefferedPronounsDesc = 'PREFFERED_PRONOUNS_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  Address1Asc = 'ADDRESS1_ASC',
  Address1Desc = 'ADDRESS1_DESC',
  Address2Asc = 'ADDRESS2_ASC',
  Address2Desc = 'ADDRESS2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ZipAsc = 'ZIP_ASC',
  ZipDesc = 'ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  RegistrationStatusAsc = 'REGISTRATION_STATUS_ASC',
  RegistrationStatusDesc = 'REGISTRATION_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  InviteDetailsAsc = 'INVITE_DETAILS_ASC',
  InviteDetailsDesc = 'INVITE_DETAILS_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  RelatedPersonRelationshipIdAsc = 'RELATED_PERSON_RELATIONSHIP_ID_ASC',
  RelatedPersonRelationshipIdDesc = 'RELATED_PERSON_RELATIONSHIP_ID_DESC',
  RelatedPersonRelationshipValueAsc = 'RELATED_PERSON_RELATIONSHIP_VALUE_ASC',
  RelatedPersonRelationshipValueDesc = 'RELATED_PERSON_RELATIONSHIP_VALUE_DESC'
}

/** A connection to a list of `Dependent` values. */
export type DependentsConnection = {
  __typename?: 'DependentsConnection';
  /** A list of `Dependent` objects. */
  nodes: Array<Maybe<Dependent>>;
  /** A list of edges which contains the `Dependent` and cursor to aid in pagination. */
  edges: Array<DependentsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Dependent` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Dependent` edge in the connection. */
export type DependentsEdge = {
  __typename?: 'DependentsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Dependent` at the end of the edge. */
  node?: Maybe<Dependent>;
};

/** Methods to use when ordering `Dependent`. */
export enum DependentsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageAsc = 'PREFERRED_LANGUAGE_ASC',
  PreferredLanguageDesc = 'PREFERRED_LANGUAGE_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PrefferedPronounsAsc = 'PREFFERED_PRONOUNS_ASC',
  PrefferedPronounsDesc = 'PREFFERED_PRONOUNS_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  Address1Asc = 'ADDRESS1_ASC',
  Address1Desc = 'ADDRESS1_DESC',
  Address2Asc = 'ADDRESS2_ASC',
  Address2Desc = 'ADDRESS2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ZipAsc = 'ZIP_ASC',
  ZipDesc = 'ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  RegistrationStatusAsc = 'REGISTRATION_STATUS_ASC',
  RegistrationStatusDesc = 'REGISTRATION_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  InviteDetailsAsc = 'INVITE_DETAILS_ASC',
  InviteDetailsDesc = 'INVITE_DETAILS_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  RelatedPersonRelationshipIdAsc = 'RELATED_PERSON_RELATIONSHIP_ID_ASC',
  RelatedPersonRelationshipIdDesc = 'RELATED_PERSON_RELATIONSHIP_ID_DESC',
  RelatedPersonRelationshipValueAsc = 'RELATED_PERSON_RELATIONSHIP_VALUE_ASC',
  RelatedPersonRelationshipValueDesc = 'RELATED_PERSON_RELATIONSHIP_VALUE_DESC'
}

/** All input for the `editInstitution` mutation. */
export type EditInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsr?: Maybe<InstitutionProfileDatumInput>;
  communicationReqId?: Maybe<Scalars['UUID']>;
  appArea?: Maybe<Scalars['String']>;
};

/** The output of our `editInstitution` mutation. */
export type EditInstitutionPayload = {
  __typename?: 'EditInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `EmailRecipient` */
export type EmailRecipientInput = {
  displayname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

/** All input for the `emailValidation` mutation. */
export type EmailValidationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emails?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The output of our `emailValidation` mutation. */
export type EmailValidationPayload = {
  __typename?: 'EmailValidationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  httpResponse?: Maybe<HttpResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type EmailVerificationResult = {
  __typename?: 'EmailVerificationResult';
  success?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};

/** All input for the `encodeUri` mutation. */
export type EncodeUriInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mailto?: Maybe<Scalars['String']>;
};

/** The output of our `encodeUri` mutation. */
export type EncodeUriPayload = {
  __typename?: 'EncodeUriPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `encryptOrDecryptData` mutation. */
export type EncryptOrDecryptDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  encryption?: Maybe<Scalars['Boolean']>;
};

/** The output of our `encryptOrDecryptData` mutation. */
export type EncryptOrDecryptDataPayload = {
  __typename?: 'EncryptOrDecryptDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `enrolmentTokenDetails` mutation. */
export type EnrolmentTokenDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** The output of our `enrolmentTokenDetails` mutation. */
export type EnrolmentTokenDetailsPayload = {
  __typename?: 'EnrolmentTokenDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<EnrolmentTokenDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `enrolmentTokenDetails` mutation. */
export type EnrolmentTokenDetailsRecord = {
  __typename?: 'EnrolmentTokenDetailsRecord';
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  orgName?: Maybe<Scalars['String']>;
  orgEmail?: Maybe<Scalars['String']>;
  orgFax?: Maybe<Scalars['String']>;
  orgPhone?: Maybe<Scalars['String']>;
  orgWebsite?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  orgStateId?: Maybe<Scalars['Int']>;
  orgCountryId?: Maybe<Scalars['Int']>;
  orgZipcode?: Maybe<Scalars['String']>;
  serviceCategoryTypeId?: Maybe<Scalars['Int']>;
  serviceCategory?: Maybe<Scalars['String']>;
  userGroupId?: Maybe<Scalars['Int']>;
  userGroup?: Maybe<Scalars['String']>;
  inviteStatusId?: Maybe<Scalars['Int']>;
  userTokenStatus?: Maybe<Scalars['Boolean']>;
};

/** An input for mutations affecting `EstablishSessionInputRecord` */
export type EstablishSessionInputRecordInput = {
  username?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};

export type EstablishSessionResult = {
  __typename?: 'EstablishSessionResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<MedigySession>;
};

/** An input for mutations affecting `EstablishSessionSsoInputRecord` */
export type EstablishSessionSsoInputRecordInput = {
  accessCode?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
};

export type EthnicityMasterV1 = {
  __typename?: 'EthnicityMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `EthnicityMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type EthnicityMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `EthnicityMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type EthnicityMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<EthnicityMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<EthnicityMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<EthnicityMasterV1Filter>;
};

/** An input for mutations affecting `EthnicityMasterV1` */
export type EthnicityMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `EthnicityMasterV1` values. */
export type EthnicityMasterV1sConnection = {
  __typename?: 'EthnicityMasterV1sConnection';
  /** A list of `EthnicityMasterV1` objects. */
  nodes: Array<Maybe<EthnicityMasterV1>>;
  /** A list of edges which contains the `EthnicityMasterV1` and cursor to aid in pagination. */
  edges: Array<EthnicityMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EthnicityMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `EthnicityMasterV1` edge in the connection. */
export type EthnicityMasterV1sEdge = {
  __typename?: 'EthnicityMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `EthnicityMasterV1` at the end of the edge. */
  node?: Maybe<EthnicityMasterV1>;
};

/** Methods to use when ordering `EthnicityMasterV1`. */
export enum EthnicityMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}


/** An input for mutations affecting `ExternalIntegrationInfo` */
export type ExternalIntegrationInfoInput = {
  systemName?: Maybe<Scalars['String']>;
  systemCode?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  logoFileId?: Maybe<Scalars['UUID']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  partyIdVerification?: Maybe<Scalars['Boolean']>;
  identityVerificationPartnerUri?: Maybe<Scalars['String']>;
  enableOptOut?: Maybe<Scalars['Boolean']>;
};

export type ExternalSystemInfo = {
  __typename?: 'ExternalSystemInfo';
  name?: Maybe<Scalars['String']>;
  idVerificationBaseUrl?: Maybe<Scalars['String']>;
  params?: Maybe<Array<Maybe<ExternalSystemParam>>>;
};

export type ExternalSystemParam = {
  __typename?: 'ExternalSystemParam';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FeedbackDetail = {
  __typename?: 'FeedbackDetail';
  id?: Maybe<Scalars['UUID']>;
  feedbackId?: Maybe<Scalars['UUID']>;
  ticketNumber?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  attachmentFileName?: Maybe<Scalars['String']>;
  attachmentPath?: Maybe<Scalars['String']>;
  fileType?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<Scalars['UUID']>;
  status?: Maybe<Scalars['String']>;
  dueDate?: Maybe<Scalars['Date']>;
  feedbackQueryTypeId?: Maybe<Scalars['Int']>;
  createdBy?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `FeedbackDetail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type FeedbackDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `feedbackId` field. */
  feedbackId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `ticketNumber` field. */
  ticketNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `subject` field. */
  subject?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phone` field. */
  phone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachmentFileName` field. */
  attachmentFileName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachmentPath` field. */
  attachmentPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fileType` field. */
  fileType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedTo` field. */
  assignedTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dueDate` field. */
  dueDate?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `feedbackQueryTypeId` field. */
  feedbackQueryTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `FeedbackDetail` object types. All fields are combined with a logical ‘and.’ */
export type FeedbackDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `feedbackId` field. */
  feedbackId?: Maybe<UuidFilter>;
  /** Filter by the object’s `ticketNumber` field. */
  ticketNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `subject` field. */
  subject?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `phone` field. */
  phone?: Maybe<StringFilter>;
  /** Filter by the object’s `attachmentFileName` field. */
  attachmentFileName?: Maybe<StringFilter>;
  /** Filter by the object’s `attachmentPath` field. */
  attachmentPath?: Maybe<StringFilter>;
  /** Filter by the object’s `fileType` field. */
  fileType?: Maybe<StringFilter>;
  /** Filter by the object’s `priority` field. */
  priority?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedTo` field. */
  assignedTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `dueDate` field. */
  dueDate?: Maybe<DateFilter>;
  /** Filter by the object’s `feedbackQueryTypeId` field. */
  feedbackQueryTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FeedbackDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FeedbackDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<FeedbackDetailFilter>;
};

/** A connection to a list of `FeedbackDetail` values. */
export type FeedbackDetailsConnection = {
  __typename?: 'FeedbackDetailsConnection';
  /** A list of `FeedbackDetail` objects. */
  nodes: Array<Maybe<FeedbackDetail>>;
  /** A list of edges which contains the `FeedbackDetail` and cursor to aid in pagination. */
  edges: Array<FeedbackDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `FeedbackDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `FeedbackDetail` edge in the connection. */
export type FeedbackDetailsEdge = {
  __typename?: 'FeedbackDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `FeedbackDetail` at the end of the edge. */
  node?: Maybe<FeedbackDetail>;
};

/** Methods to use when ordering `FeedbackDetail`. */
export enum FeedbackDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FeedbackIdAsc = 'FEEDBACK_ID_ASC',
  FeedbackIdDesc = 'FEEDBACK_ID_DESC',
  TicketNumberAsc = 'TICKET_NUMBER_ASC',
  TicketNumberDesc = 'TICKET_NUMBER_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  SubjectAsc = 'SUBJECT_ASC',
  SubjectDesc = 'SUBJECT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  PhoneAsc = 'PHONE_ASC',
  PhoneDesc = 'PHONE_DESC',
  AttachmentFileNameAsc = 'ATTACHMENT_FILE_NAME_ASC',
  AttachmentFileNameDesc = 'ATTACHMENT_FILE_NAME_DESC',
  AttachmentPathAsc = 'ATTACHMENT_PATH_ASC',
  AttachmentPathDesc = 'ATTACHMENT_PATH_DESC',
  FileTypeAsc = 'FILE_TYPE_ASC',
  FileTypeDesc = 'FILE_TYPE_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  AssignedToAsc = 'ASSIGNED_TO_ASC',
  AssignedToDesc = 'ASSIGNED_TO_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  DueDateAsc = 'DUE_DATE_ASC',
  DueDateDesc = 'DUE_DATE_DESC',
  FeedbackQueryTypeIdAsc = 'FEEDBACK_QUERY_TYPE_ID_ASC',
  FeedbackQueryTypeIdDesc = 'FEEDBACK_QUERY_TYPE_ID_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC'
}

/** This view is used to show the business area where we are providing feedback in UI. */
export type FeedbackQueryTypeMaster = {
  __typename?: 'FeedbackQueryTypeMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `FeedbackQueryTypeMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type FeedbackQueryTypeMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `FeedbackQueryTypeMaster` object types. All fields are combined with a logical ‘and.’ */
export type FeedbackQueryTypeMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FeedbackQueryTypeMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FeedbackQueryTypeMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<FeedbackQueryTypeMasterFilter>;
};

/** An input for mutations affecting `FeedbackQueryTypeMaster` */
export type FeedbackQueryTypeMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `FeedbackQueryTypeMaster` values. */
export type FeedbackQueryTypeMastersConnection = {
  __typename?: 'FeedbackQueryTypeMastersConnection';
  /** A list of `FeedbackQueryTypeMaster` objects. */
  nodes: Array<Maybe<FeedbackQueryTypeMaster>>;
  /** A list of edges which contains the `FeedbackQueryTypeMaster` and cursor to aid in pagination. */
  edges: Array<FeedbackQueryTypeMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `FeedbackQueryTypeMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `FeedbackQueryTypeMaster` edge in the connection. */
export type FeedbackQueryTypeMastersEdge = {
  __typename?: 'FeedbackQueryTypeMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `FeedbackQueryTypeMaster` at the end of the edge. */
  node?: Maybe<FeedbackQueryTypeMaster>;
};

/** Methods to use when ordering `FeedbackQueryTypeMaster`. */
export enum FeedbackQueryTypeMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type FeedbackResult = {
  __typename?: 'FeedbackResult';
  success?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `FileInputRecord` */
export type FileInputRecordInput = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['String']>;
  shareId?: Maybe<Scalars['String']>;
};

export type FileUpload = Node & {
  __typename?: 'FileUpload';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['UUID'];
  fileName: Scalars['String'];
  fileType?: Maybe<Scalars['String']>;
  createdAt: Scalars['Datetime'];
  updatedOn?: Maybe<Scalars['Datetime']>;
  recordStatusId: Scalars['Int'];
  attachmentTypeId?: Maybe<Scalars['Int']>;
  fileTypeId?: Maybe<Scalars['Int']>;
  associatedEntityId?: Maybe<Scalars['UUID']>;
  createdBy?: Maybe<Scalars['UUID']>;
  updatedBy?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `FileUpload` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type FileUploadCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `fileName` field. */
  fileName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fileType` field. */
  fileType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedOn` field. */
  updatedOn?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `attachmentTypeId` field. */
  attachmentTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `fileTypeId` field. */
  fileTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `associatedEntityId` field. */
  associatedEntityId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `updatedBy` field. */
  updatedBy?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `FileUpload` object types. All fields are combined with a logical ‘and.’ */
export type FileUploadFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `fileName` field. */
  fileName?: Maybe<StringFilter>;
  /** Filter by the object’s `fileType` field. */
  fileType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedOn` field. */
  updatedOn?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `attachmentTypeId` field. */
  attachmentTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `fileTypeId` field. */
  fileTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `associatedEntityId` field. */
  associatedEntityId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `updatedBy` field. */
  updatedBy?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FileUploadFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FileUploadFilter>>;
  /** Negates the expression. */
  not?: Maybe<FileUploadFilter>;
};

/** An input for mutations affecting `FileUpload` */
export type FileUploadInput = {
  id?: Maybe<Scalars['UUID']>;
  fileName?: Maybe<Scalars['Upload']>;
  fileType?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedOn?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  attachmentTypeId?: Maybe<Scalars['Int']>;
  fileTypeId?: Maybe<Scalars['Int']>;
  associatedEntityId?: Maybe<Scalars['UUID']>;
  createdBy?: Maybe<Scalars['UUID']>;
  updatedBy?: Maybe<Scalars['UUID']>;
};

/** Represents an update to a `FileUpload`. Fields that are set will be updated. */
export type FileUploadPatch = {
  id?: Maybe<Scalars['UUID']>;
  fileName?: Maybe<Scalars['Upload']>;
  fileType?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedOn?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  attachmentTypeId?: Maybe<Scalars['Int']>;
  fileTypeId?: Maybe<Scalars['Int']>;
  associatedEntityId?: Maybe<Scalars['UUID']>;
  createdBy?: Maybe<Scalars['UUID']>;
  updatedBy?: Maybe<Scalars['UUID']>;
};

/** A connection to a list of `FileUpload` values. */
export type FileUploadsConnection = {
  __typename?: 'FileUploadsConnection';
  /** A list of `FileUpload` objects. */
  nodes: Array<Maybe<FileUpload>>;
  /** A list of edges which contains the `FileUpload` and cursor to aid in pagination. */
  edges: Array<FileUploadsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `FileUpload` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `FileUpload` edge in the connection. */
export type FileUploadsEdge = {
  __typename?: 'FileUploadsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `FileUpload` at the end of the edge. */
  node?: Maybe<FileUpload>;
};

/** Methods to use when ordering `FileUpload`. */
export enum FileUploadsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FileNameAsc = 'FILE_NAME_ASC',
  FileNameDesc = 'FILE_NAME_DESC',
  FileTypeAsc = 'FILE_TYPE_ASC',
  FileTypeDesc = 'FILE_TYPE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedOnAsc = 'UPDATED_ON_ASC',
  UpdatedOnDesc = 'UPDATED_ON_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  AttachmentTypeIdAsc = 'ATTACHMENT_TYPE_ID_ASC',
  AttachmentTypeIdDesc = 'ATTACHMENT_TYPE_ID_DESC',
  FileTypeIdAsc = 'FILE_TYPE_ID_ASC',
  FileTypeIdDesc = 'FILE_TYPE_ID_DESC',
  AssociatedEntityIdAsc = 'ASSOCIATED_ENTITY_ID_ASC',
  AssociatedEntityIdDesc = 'ASSOCIATED_ENTITY_ID_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC',
  UpdatedByAsc = 'UPDATED_BY_ASC',
  UpdatedByDesc = 'UPDATED_BY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A filter to be used against Float fields. All fields are combined with a logical ‘and.’ */
export type FloatFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Float']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Float']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Float']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Float']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Float']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Float']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Float']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Float']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Float']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Float']>;
};

/** All input for the `forgotPasswordIam` mutation. */
export type ForgotPasswordIamInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `forgotPasswordIam` mutation. */
export type ForgotPasswordIamPayload = {
  __typename?: 'ForgotPasswordIamPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  forgotPasswordResult?: Maybe<ForgotPasswordResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `forgotPassword` mutation. */
export type ForgotPasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
};

/** The output of our `forgotPassword` mutation. */
export type ForgotPasswordPayload = {
  __typename?: 'ForgotPasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  forgotPasswordResult?: Maybe<ForgotPasswordResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ForgotPasswordResult = {
  __typename?: 'ForgotPasswordResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type FrostSullivanArtificialIntelligenceOffering = {
  __typename?: 'FrostSullivanArtificialIntelligenceOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `FrostSullivanArtificialIntelligenceOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type FrostSullivanArtificialIntelligenceOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `FrostSullivanArtificialIntelligenceOffering` object types. All fields are combined with a logical ‘and.’ */
export type FrostSullivanArtificialIntelligenceOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FrostSullivanArtificialIntelligenceOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FrostSullivanArtificialIntelligenceOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<FrostSullivanArtificialIntelligenceOfferingFilter>;
};

/** A connection to a list of `FrostSullivanArtificialIntelligenceOffering` values. */
export type FrostSullivanArtificialIntelligenceOfferingsConnection = {
  __typename?: 'FrostSullivanArtificialIntelligenceOfferingsConnection';
  /** A list of `FrostSullivanArtificialIntelligenceOffering` objects. */
  nodes: Array<Maybe<FrostSullivanArtificialIntelligenceOffering>>;
  /** A list of edges which contains the `FrostSullivanArtificialIntelligenceOffering` and cursor to aid in pagination. */
  edges: Array<FrostSullivanArtificialIntelligenceOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `FrostSullivanArtificialIntelligenceOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `FrostSullivanArtificialIntelligenceOffering` edge in the connection. */
export type FrostSullivanArtificialIntelligenceOfferingsEdge = {
  __typename?: 'FrostSullivanArtificialIntelligenceOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `FrostSullivanArtificialIntelligenceOffering` at the end of the edge. */
  node?: Maybe<FrostSullivanArtificialIntelligenceOffering>;
};

/** Methods to use when ordering `FrostSullivanArtificialIntelligenceOffering`. */
export enum FrostSullivanArtificialIntelligenceOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type FrostSullivanElectronicHealthRecordsEhrsOffering = {
  __typename?: 'FrostSullivanElectronicHealthRecordsEhrsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against
 * `FrostSullivanElectronicHealthRecordsEhrsOffering` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type FrostSullivanElectronicHealthRecordsEhrsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `FrostSullivanElectronicHealthRecordsEhrsOffering` object types. All fields are combined with a logical ‘and.’ */
export type FrostSullivanElectronicHealthRecordsEhrsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FrostSullivanElectronicHealthRecordsEhrsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FrostSullivanElectronicHealthRecordsEhrsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingFilter>;
};

/** A connection to a list of `FrostSullivanElectronicHealthRecordsEhrsOffering` values. */
export type FrostSullivanElectronicHealthRecordsEhrsOfferingsConnection = {
  __typename?: 'FrostSullivanElectronicHealthRecordsEhrsOfferingsConnection';
  /** A list of `FrostSullivanElectronicHealthRecordsEhrsOffering` objects. */
  nodes: Array<Maybe<FrostSullivanElectronicHealthRecordsEhrsOffering>>;
  /** A list of edges which contains the `FrostSullivanElectronicHealthRecordsEhrsOffering` and cursor to aid in pagination. */
  edges: Array<FrostSullivanElectronicHealthRecordsEhrsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `FrostSullivanElectronicHealthRecordsEhrsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `FrostSullivanElectronicHealthRecordsEhrsOffering` edge in the connection. */
export type FrostSullivanElectronicHealthRecordsEhrsOfferingsEdge = {
  __typename?: 'FrostSullivanElectronicHealthRecordsEhrsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `FrostSullivanElectronicHealthRecordsEhrsOffering` at the end of the edge. */
  node?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOffering>;
};

/** Methods to use when ordering `FrostSullivanElectronicHealthRecordsEhrsOffering`. */
export enum FrostSullivanElectronicHealthRecordsEhrsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type GartnerDataAnalyticsOffering = {
  __typename?: 'GartnerDataAnalyticsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GartnerDataAnalyticsOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type GartnerDataAnalyticsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GartnerDataAnalyticsOffering` object types. All fields are combined with a logical ‘and.’ */
export type GartnerDataAnalyticsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GartnerDataAnalyticsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GartnerDataAnalyticsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<GartnerDataAnalyticsOfferingFilter>;
};

/** A connection to a list of `GartnerDataAnalyticsOffering` values. */
export type GartnerDataAnalyticsOfferingsConnection = {
  __typename?: 'GartnerDataAnalyticsOfferingsConnection';
  /** A list of `GartnerDataAnalyticsOffering` objects. */
  nodes: Array<Maybe<GartnerDataAnalyticsOffering>>;
  /** A list of edges which contains the `GartnerDataAnalyticsOffering` and cursor to aid in pagination. */
  edges: Array<GartnerDataAnalyticsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GartnerDataAnalyticsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GartnerDataAnalyticsOffering` edge in the connection. */
export type GartnerDataAnalyticsOfferingsEdge = {
  __typename?: 'GartnerDataAnalyticsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GartnerDataAnalyticsOffering` at the end of the edge. */
  node?: Maybe<GartnerDataAnalyticsOffering>;
};

/** Methods to use when ordering `GartnerDataAnalyticsOffering`. */
export enum GartnerDataAnalyticsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type GartnerPcmPatientCareManagementOffering = {
  __typename?: 'GartnerPcmPatientCareManagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GartnerPcmPatientCareManagementOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type GartnerPcmPatientCareManagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GartnerPcmPatientCareManagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type GartnerPcmPatientCareManagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GartnerPcmPatientCareManagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GartnerPcmPatientCareManagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<GartnerPcmPatientCareManagementOfferingFilter>;
};

/** A connection to a list of `GartnerPcmPatientCareManagementOffering` values. */
export type GartnerPcmPatientCareManagementOfferingsConnection = {
  __typename?: 'GartnerPcmPatientCareManagementOfferingsConnection';
  /** A list of `GartnerPcmPatientCareManagementOffering` objects. */
  nodes: Array<Maybe<GartnerPcmPatientCareManagementOffering>>;
  /** A list of edges which contains the `GartnerPcmPatientCareManagementOffering` and cursor to aid in pagination. */
  edges: Array<GartnerPcmPatientCareManagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GartnerPcmPatientCareManagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GartnerPcmPatientCareManagementOffering` edge in the connection. */
export type GartnerPcmPatientCareManagementOfferingsEdge = {
  __typename?: 'GartnerPcmPatientCareManagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GartnerPcmPatientCareManagementOffering` at the end of the edge. */
  node?: Maybe<GartnerPcmPatientCareManagementOffering>;
};

/** Methods to use when ordering `GartnerPcmPatientCareManagementOffering`. */
export enum GartnerPcmPatientCareManagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type GartnerRemoteDiagnosticsOffering = {
  __typename?: 'GartnerRemoteDiagnosticsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GartnerRemoteDiagnosticsOffering` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type GartnerRemoteDiagnosticsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GartnerRemoteDiagnosticsOffering` object types. All fields are combined with a logical ‘and.’ */
export type GartnerRemoteDiagnosticsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GartnerRemoteDiagnosticsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GartnerRemoteDiagnosticsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<GartnerRemoteDiagnosticsOfferingFilter>;
};

/** A connection to a list of `GartnerRemoteDiagnosticsOffering` values. */
export type GartnerRemoteDiagnosticsOfferingsConnection = {
  __typename?: 'GartnerRemoteDiagnosticsOfferingsConnection';
  /** A list of `GartnerRemoteDiagnosticsOffering` objects. */
  nodes: Array<Maybe<GartnerRemoteDiagnosticsOffering>>;
  /** A list of edges which contains the `GartnerRemoteDiagnosticsOffering` and cursor to aid in pagination. */
  edges: Array<GartnerRemoteDiagnosticsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GartnerRemoteDiagnosticsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GartnerRemoteDiagnosticsOffering` edge in the connection. */
export type GartnerRemoteDiagnosticsOfferingsEdge = {
  __typename?: 'GartnerRemoteDiagnosticsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GartnerRemoteDiagnosticsOffering` at the end of the edge. */
  node?: Maybe<GartnerRemoteDiagnosticsOffering>;
};

/** Methods to use when ordering `GartnerRemoteDiagnosticsOffering`. */
export enum GartnerRemoteDiagnosticsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type GartnerRoboticProcessAutomationRpaOffering = {
  __typename?: 'GartnerRoboticProcessAutomationRpaOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GartnerRoboticProcessAutomationRpaOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type GartnerRoboticProcessAutomationRpaOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GartnerRoboticProcessAutomationRpaOffering` object types. All fields are combined with a logical ‘and.’ */
export type GartnerRoboticProcessAutomationRpaOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GartnerRoboticProcessAutomationRpaOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GartnerRoboticProcessAutomationRpaOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<GartnerRoboticProcessAutomationRpaOfferingFilter>;
};

/** A connection to a list of `GartnerRoboticProcessAutomationRpaOffering` values. */
export type GartnerRoboticProcessAutomationRpaOfferingsConnection = {
  __typename?: 'GartnerRoboticProcessAutomationRpaOfferingsConnection';
  /** A list of `GartnerRoboticProcessAutomationRpaOffering` objects. */
  nodes: Array<Maybe<GartnerRoboticProcessAutomationRpaOffering>>;
  /** A list of edges which contains the `GartnerRoboticProcessAutomationRpaOffering` and cursor to aid in pagination. */
  edges: Array<GartnerRoboticProcessAutomationRpaOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GartnerRoboticProcessAutomationRpaOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GartnerRoboticProcessAutomationRpaOffering` edge in the connection. */
export type GartnerRoboticProcessAutomationRpaOfferingsEdge = {
  __typename?: 'GartnerRoboticProcessAutomationRpaOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GartnerRoboticProcessAutomationRpaOffering` at the end of the edge. */
  node?: Maybe<GartnerRoboticProcessAutomationRpaOffering>;
};

/** Methods to use when ordering `GartnerRoboticProcessAutomationRpaOffering`. */
export enum GartnerRoboticProcessAutomationRpaOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type GartnerSupplyChainOffering = {
  __typename?: 'GartnerSupplyChainOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GartnerSupplyChainOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type GartnerSupplyChainOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GartnerSupplyChainOffering` object types. All fields are combined with a logical ‘and.’ */
export type GartnerSupplyChainOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GartnerSupplyChainOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GartnerSupplyChainOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<GartnerSupplyChainOfferingFilter>;
};

/** A connection to a list of `GartnerSupplyChainOffering` values. */
export type GartnerSupplyChainOfferingsConnection = {
  __typename?: 'GartnerSupplyChainOfferingsConnection';
  /** A list of `GartnerSupplyChainOffering` objects. */
  nodes: Array<Maybe<GartnerSupplyChainOffering>>;
  /** A list of edges which contains the `GartnerSupplyChainOffering` and cursor to aid in pagination. */
  edges: Array<GartnerSupplyChainOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GartnerSupplyChainOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GartnerSupplyChainOffering` edge in the connection. */
export type GartnerSupplyChainOfferingsEdge = {
  __typename?: 'GartnerSupplyChainOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GartnerSupplyChainOffering` at the end of the edge. */
  node?: Maybe<GartnerSupplyChainOffering>;
};

/** Methods to use when ordering `GartnerSupplyChainOffering`. */
export enum GartnerSupplyChainOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

/** An input for mutations affecting `GenderInfo` */
export type GenderInfoInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Boolean']>;
  otherValue?: Maybe<Scalars['String']>;
};

export type GenderMasterV1 = {
  __typename?: 'GenderMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GenderMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type GenderMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GenderMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type GenderMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GenderMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GenderMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<GenderMasterV1Filter>;
};

/** An input for mutations affecting `GenderMasterV1` */
export type GenderMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `GenderMasterV1` values. */
export type GenderMasterV1sConnection = {
  __typename?: 'GenderMasterV1sConnection';
  /** A list of `GenderMasterV1` objects. */
  nodes: Array<Maybe<GenderMasterV1>>;
  /** A list of edges which contains the `GenderMasterV1` and cursor to aid in pagination. */
  edges: Array<GenderMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GenderMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GenderMasterV1` edge in the connection. */
export type GenderMasterV1sEdge = {
  __typename?: 'GenderMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GenderMasterV1` at the end of the edge. */
  node?: Maybe<GenderMasterV1>;
};

/** Methods to use when ordering `GenderMasterV1`. */
export enum GenderMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `generateDashboardMetrics` mutation. */
export type GenerateDashboardMetricsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  startDateParam?: Maybe<Scalars['Date']>;
  endDateParam?: Maybe<Scalars['Date']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `generateDashboardMetrics` mutation. */
export type GenerateDashboardMetricsPayload = {
  __typename?: 'GenerateDashboardMetricsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateFhirPatient` mutation. */
export type GenerateFhirPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  clientUri?: Maybe<Scalars['String']>;
  patientMrn?: Maybe<Scalars['String']>;
  fhirResourceId?: Maybe<Scalars['String']>;
  envUrl?: Maybe<Scalars['String']>;
};

/** The output of our `generateFhirPatient` mutation. */
export type GenerateFhirPatientPayload = {
  __typename?: 'GenerateFhirPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateJourneyMetrics` mutation. */
export type GenerateJourneyMetricsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  startDateParam?: Maybe<Scalars['Date']>;
  endDateParam?: Maybe<Scalars['Date']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `generateJourneyMetrics` mutation. */
export type GenerateJourneyMetricsPayload = {
  __typename?: 'GenerateJourneyMetricsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateJourneyMetricsV1` mutation. */
export type GenerateJourneyMetricsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  startDateParam?: Maybe<Scalars['Date']>;
  endDateParam?: Maybe<Scalars['Date']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `generateJourneyMetricsV1` mutation. */
export type GenerateJourneyMetricsV1Payload = {
  __typename?: 'GenerateJourneyMetricsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateJwtTokenV1` mutation. */
export type GenerateJwtTokenV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['String']>;
};

/** The output of our `generateJwtTokenV1` mutation. */
export type GenerateJwtTokenV1Payload = {
  __typename?: 'GenerateJwtTokenV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateMetricsAndGetData` mutation. */
export type GenerateMetricsAndGetDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  startDateParam?: Maybe<Scalars['Date']>;
  endDateParam?: Maybe<Scalars['Date']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `generateMetricsAndGetData` mutation. */
export type GenerateMetricsAndGetDataPayload = {
  __typename?: 'GenerateMetricsAndGetDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateMetricsAndGetJson` mutation. */
export type GenerateMetricsAndGetJsonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `generateMetricsAndGetJson` mutation. */
export type GenerateMetricsAndGetJsonPayload = {
  __typename?: 'GenerateMetricsAndGetJsonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateMetrics` mutation. */
export type GenerateMetricsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `generateMetrics` mutation. */
export type GenerateMetricsPayload = {
  __typename?: 'GenerateMetricsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateTicketNumber` mutation. */
export type GenerateTicketNumberInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  prefix?: Maybe<Scalars['String']>;
};

/** The output of our `generateTicketNumber` mutation. */
export type GenerateTicketNumberPayload = {
  __typename?: 'GenerateTicketNumberPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `generateTransactionNumber` mutation. */
export type GenerateTransactionNumberInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transactionCategoryCode?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  extSystemId?: Maybe<Scalars['UUID']>;
  useHyphens?: Maybe<Scalars['Boolean']>;
};

/** The output of our `generateTransactionNumber` mutation. */
export type GenerateTransactionNumberPayload = {
  __typename?: 'GenerateTransactionNumberPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getAccessToken` mutation. */
export type GetAccessTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** The output of our `getAccessToken` mutation. */
export type GetAccessTokenPayload = {
  __typename?: 'GetAccessTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getAccessTokenResult?: Maybe<GetAccessTokenResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type GetAccessTokenResult = {
  __typename?: 'GetAccessTokenResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

export type GetChatroomDetail = {
  __typename?: 'GetChatroomDetail';
  id?: Maybe<Scalars['Int']>;
  requestId?: Maybe<Scalars['UUID']>;
  chatroomId?: Maybe<Scalars['String']>;
  applicationArea?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `GetChatroomDetail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type GetChatroomDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `chatroomId` field. */
  chatroomId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicationArea` field. */
  applicationArea?: Maybe<Scalars['String']>;
};

/** A filter to be used against `GetChatroomDetail` object types. All fields are combined with a logical ‘and.’ */
export type GetChatroomDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `chatroomId` field. */
  chatroomId?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationArea` field. */
  applicationArea?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<GetChatroomDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<GetChatroomDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<GetChatroomDetailFilter>;
};

/** An input for mutations affecting `GetChatroomDetail` */
export type GetChatroomDetailInput = {
  id?: Maybe<Scalars['Int']>;
  requestId?: Maybe<Scalars['UUID']>;
  chatroomId?: Maybe<Scalars['String']>;
  applicationArea?: Maybe<Scalars['String']>;
};

/** A connection to a list of `GetChatroomDetail` values. */
export type GetChatroomDetailsConnection = {
  __typename?: 'GetChatroomDetailsConnection';
  /** A list of `GetChatroomDetail` objects. */
  nodes: Array<Maybe<GetChatroomDetail>>;
  /** A list of edges which contains the `GetChatroomDetail` and cursor to aid in pagination. */
  edges: Array<GetChatroomDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `GetChatroomDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `GetChatroomDetail` edge in the connection. */
export type GetChatroomDetailsEdge = {
  __typename?: 'GetChatroomDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `GetChatroomDetail` at the end of the edge. */
  node?: Maybe<GetChatroomDetail>;
};

/** Methods to use when ordering `GetChatroomDetail`. */
export enum GetChatroomDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  ChatroomIdAsc = 'CHATROOM_ID_ASC',
  ChatroomIdDesc = 'CHATROOM_ID_DESC',
  ApplicationAreaAsc = 'APPLICATION_AREA_ASC',
  ApplicationAreaDesc = 'APPLICATION_AREA_DESC'
}

/** All input for the `getCompanyNames` mutation. */
export type GetCompanyNamesInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
};

/** The output of our `getCompanyNames` mutation. */
export type GetCompanyNamesPayload = {
  __typename?: 'GetCompanyNamesPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  comapnyListResponse?: Maybe<ComapnyListResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getCurrentUser` mutation. */
export type GetCurrentUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `getCurrentUser` mutation. */
export type GetCurrentUserPayload = {
  __typename?: 'GetCurrentUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getExecutionDetails` mutation. */
export type GetExecutionDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

/** The output of our `getExecutionDetails` mutation. */
export type GetExecutionDetailsPayload = {
  __typename?: 'GetExecutionDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getExternalIntegrationConfigurationV1` mutation. */
export type GetExternalIntegrationConfigurationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getExternalIntegrationConfigurationV1` mutation. */
export type GetExternalIntegrationConfigurationV1Payload = {
  __typename?: 'GetExternalIntegrationConfigurationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getGitlabAccessToken` mutation. */
export type GetGitlabAccessTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `getGitlabAccessToken` mutation. */
export type GetGitlabAccessTokenPayload = {
  __typename?: 'GetGitlabAccessTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getIdVerificationTransaction` mutation. */
export type GetIdVerificationTransactionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getIdVerificationTransaction` mutation. */
export type GetIdVerificationTransactionPayload = {
  __typename?: 'GetIdVerificationTransactionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transactionRequestLogResponse?: Maybe<TransactionRequestLogResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getInstitutionApprovalInfo` mutation. */
export type GetInstitutionApprovalInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  reqTrackId?: Maybe<Scalars['String']>;
  commReqId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getInstitutionApprovalInfo` mutation. */
export type GetInstitutionApprovalInfoPayload = {
  __typename?: 'GetInstitutionApprovalInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<GetInstitutionApprovalInfoRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `getInstitutionApprovalInfo` mutation. */
export type GetInstitutionApprovalInfoRecord = {
  __typename?: 'GetInstitutionApprovalInfoRecord';
  id?: Maybe<Scalars['UUID']>;
  communicationMetaValue?: Maybe<Scalars['JSON']>;
  approvedMetaValue?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
};

/** All input for the `getJourneyMetricsData` mutation. */
export type GetJourneyMetricsDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `getJourneyMetricsData` mutation. */
export type GetJourneyMetricsDataPayload = {
  __typename?: 'GetJourneyMetricsDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<GetJourneyMetricsDataRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `getJourneyMetricsData` mutation. */
export type GetJourneyMetricsDataRecord = {
  __typename?: 'GetJourneyMetricsDataRecord';
  name?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Int']>;
  metricDt?: Maybe<Scalars['Datetime']>;
};

/** All input for the `getMedicalRecordImportStatus` mutation. */
export type GetMedicalRecordImportStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transId?: Maybe<Scalars['UUID']>;
  requestResultId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `getMedicalRecordImportStatus` mutation. */
export type GetMedicalRecordImportStatusPayload = {
  __typename?: 'GetMedicalRecordImportStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getMedicalRecordImportStatusTest` mutation. */
export type GetMedicalRecordImportStatusTestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transId?: Maybe<Scalars['UUID']>;
  requestResultId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `getMedicalRecordImportStatusTest` mutation. */
export type GetMedicalRecordImportStatusTestPayload = {
  __typename?: 'GetMedicalRecordImportStatusTestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getMetricsData` mutation. */
export type GetMetricsDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `getMetricsData` mutation. */
export type GetMetricsDataPayload = {
  __typename?: 'GetMetricsDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<GetMetricsDataRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `getMetricsData` mutation. */
export type GetMetricsDataRecord = {
  __typename?: 'GetMetricsDataRecord';
  metricName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  groupType?: Maybe<Scalars['String']>;
  metricCount?: Maybe<Scalars['Int']>;
  metricDt?: Maybe<Scalars['Datetime']>;
};

/** All input for the `getMetricsDataV1` mutation. */
export type GetMetricsDataV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
};

/** The output of our `getMetricsDataV1` mutation. */
export type GetMetricsDataV1Payload = {
  __typename?: 'GetMetricsDataV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<GetMetricsDataV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `getMetricsDataV1` mutation. */
export type GetMetricsDataV1Record = {
  __typename?: 'GetMetricsDataV1Record';
  metricName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  groupType?: Maybe<Scalars['String']>;
  metricCount?: Maybe<Scalars['Int']>;
  metricDt?: Maybe<Scalars['Datetime']>;
};

/** All input for the `getNotificationDetails` mutation. */
export type GetNotificationDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  notificationCode?: Maybe<Scalars['String']>;
};

/** The output of our `getNotificationDetails` mutation. */
export type GetNotificationDetailsPayload = {
  __typename?: 'GetNotificationDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPatientIndividualMedicalRecordDocument` mutation. */
export type GetPatientIndividualMedicalRecordDocumentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  resourceParam?: Maybe<Scalars['String']>;
  transId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getPatientIndividualMedicalRecordDocument` mutation. */
export type GetPatientIndividualMedicalRecordDocumentPayload = {
  __typename?: 'GetPatientIndividualMedicalRecordDocumentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPatientMedicalRecordDocument` mutation. */
export type GetPatientMedicalRecordDocumentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `getPatientMedicalRecordDocument` mutation. */
export type GetPatientMedicalRecordDocumentPayload = {
  __typename?: 'GetPatientMedicalRecordDocumentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPatientMedicalRecordDocumentTest` mutation. */
export type GetPatientMedicalRecordDocumentTestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `getPatientMedicalRecordDocumentTest` mutation. */
export type GetPatientMedicalRecordDocumentTestPayload = {
  __typename?: 'GetPatientMedicalRecordDocumentTestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPatientVerificationAccessToken` mutation. */
export type GetPatientVerificationAccessTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getPatientVerificationAccessToken` mutation. */
export type GetPatientVerificationAccessTokenPayload = {
  __typename?: 'GetPatientVerificationAccessTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPatientVerificationStatus` mutation. */
export type GetPatientVerificationStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getPatientVerificationStatus` mutation. */
export type GetPatientVerificationStatusPayload = {
  __typename?: 'GetPatientVerificationStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  integer?: Maybe<Scalars['Int']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getPrometheusData` mutation. */
export type GetPrometheusDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getPrometheusInput?: Maybe<GetPrometheusInputRecordInput>;
};

/** The output of our `getPrometheusData` mutation. */
export type GetPrometheusDataPayload = {
  __typename?: 'GetPrometheusDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getPrometheusDataResult?: Maybe<GetPrometheusDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type GetPrometheusDataResult = {
  __typename?: 'GetPrometheusDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `GetPrometheusInputRecord` */
export type GetPrometheusInputRecordInput = {
  metricName?: Maybe<Scalars['String']>;
  metricQuery?: Maybe<Scalars['String']>;
  groupByParam?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** All input for the `getRelatedPartyId` mutation. */
export type GetRelatedPartyIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientRepresentative?: Maybe<Scalars['String']>;
};

/** The output of our `getRelatedPartyId` mutation. */
export type GetRelatedPartyIdPayload = {
  __typename?: 'GetRelatedPartyIdPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedPartyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getRelatedTopics` mutation. */
export type GetRelatedTopicsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `getRelatedTopics` mutation. */
export type GetRelatedTopicsPayload = {
  __typename?: 'GetRelatedTopicsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedTopics?: Maybe<Array<Maybe<RelatedTopic>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getResetPassword` mutation. */
export type GetResetPasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** The output of our `getResetPassword` mutation. */
export type GetResetPasswordPayload = {
  __typename?: 'GetResetPasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getResetPasswordResult?: Maybe<GetResetPasswordResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type GetResetPasswordResult = {
  __typename?: 'GetResetPasswordResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** All input for the `getTrendingData` mutation. */
export type GetTrendingDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
};

/** The output of our `getTrendingData` mutation. */
export type GetTrendingDataPayload = {
  __typename?: 'GetTrendingDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getUserType` mutation. */
export type GetUserTypeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getUserType` mutation. */
export type GetUserTypePayload = {
  __typename?: 'GetUserTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `getVerifiedExternalPatientResourceId` mutation. */
export type GetVerifiedExternalPatientResourceIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/** The output of our `getVerifiedExternalPatientResourceId` mutation. */
export type GetVerifiedExternalPatientResourceIdPayload = {
  __typename?: 'GetVerifiedExternalPatientResourceIdPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  verifiedPatientResource?: Maybe<VerifiedPatientResource>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `gitAccessUserRepoClaimOffering` mutation. */
export type GitAccessUserRepoClaimOfferingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  offeringId?: Maybe<Scalars['Int']>;
  institutionId?: Maybe<Scalars['Int']>;
};

/** The output of our `gitAccessUserRepoClaimOffering` mutation. */
export type GitAccessUserRepoClaimOfferingPayload = {
  __typename?: 'GitAccessUserRepoClaimOfferingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitAccessUserRepoResult?: Maybe<GitAccessUserRepoResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `gitAccessUserRepo` mutation. */
export type GitAccessUserRepoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** The output of our `gitAccessUserRepo` mutation. */
export type GitAccessUserRepoPayload = {
  __typename?: 'GitAccessUserRepoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitAccessUserRepoResult?: Maybe<GitAccessUserRepoResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type GitAccessUserRepoResult = {
  __typename?: 'GitAccessUserRepoResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** All input for the `gitAddUserProfile` mutation. */
export type GitAddUserProfileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  addUserInput?: Maybe<GitAddUserProfileInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
  claimed?: Maybe<Scalars['Boolean']>;
};

/** An input for mutations affecting `GitAddUserProfileInputRecord` */
export type GitAddUserProfileInputRecordInput = {
  userName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

/** The output of our `gitAddUserProfile` mutation. */
export type GitAddUserProfilePayload = {
  __typename?: 'GitAddUserProfilePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitAddUserProfileResult?: Maybe<GitAddUserProfileResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type GitAddUserProfileResult = {
  __typename?: 'GitAddUserProfileResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** All input for the `gitAddUserProfileUbh` mutation. */
export type GitAddUserProfileUbhInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  addUserInput?: Maybe<GitAddUserProfileInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
  claimed?: Maybe<Scalars['Boolean']>;
};

/** The output of our `gitAddUserProfileUbh` mutation. */
export type GitAddUserProfileUbhPayload = {
  __typename?: 'GitAddUserProfileUbhPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitAddUserProfileResult?: Maybe<GitAddUserProfileResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `GitImageInputRecord` */
export type GitImageInputRecordInput = {
  projectId?: Maybe<Scalars['Int']>;
  filePath?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  commitMessage?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userEmail?: Maybe<Scalars['String']>;
  imageContent?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
};

export type GitResponse = {
  __typename?: 'GitResponse';
  status?: Maybe<Scalars['String']>;
  statusmessage?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

export type GitResponseHdo = {
  __typename?: 'GitResponseHdo';
  status?: Maybe<Scalars['String']>;
  statusmessage?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  gitLabId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['String']>;
};

/** All input for the `gitlabLhcFormUpdate` mutation. */
export type GitlabLhcFormUpdateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  fileName?: Maybe<Scalars['String']>;
  lhcForm?: Maybe<Scalars['String']>;
  commitMsg?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** The output of our `gitlabLhcFormUpdate` mutation. */
export type GitlabLhcFormUpdatePayload = {
  __typename?: 'GitlabLhcFormUpdatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** A filter to be used against GitlabNamespaceId fields. All fields are combined with a logical ‘and.’ */
export type GitlabNamespaceIdFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['GitlabNamespaceId']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['GitlabNamespaceId']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['GitlabNamespaceId']>;
};

/** All input for the `gitlabPatToken` mutation. */
export type GitlabPatTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `gitlabPatToken` mutation. */
export type GitlabPatTokenPayload = {
  __typename?: 'GitlabPatTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `gitlabProjectAssetHttpRequest` mutation. */
export type GitlabProjectAssetHttpRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  prov?: Maybe<GitlabProvenanceInput>;
  projectId?: Maybe<Scalars['Int']>;
  assetFilePath?: Maybe<Scalars['String']>;
  branchortag?: Maybe<Scalars['String']>;
};

/** The output of our `gitlabProjectAssetHttpRequest` mutation. */
export type GitlabProjectAssetHttpRequestPayload = {
  __typename?: 'GitlabProjectAssetHttpRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  httpRequest?: Maybe<HttpRequest>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `gitlabProjectCommitHttpRequest` mutation. */
export type GitlabProjectCommitHttpRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  prov?: Maybe<GitlabProvenanceInput>;
  projectId?: Maybe<Scalars['Int']>;
  commitId?: Maybe<Scalars['String']>;
};

/** The output of our `gitlabProjectCommitHttpRequest` mutation. */
export type GitlabProjectCommitHttpRequestPayload = {
  __typename?: 'GitlabProjectCommitHttpRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  httpRequest?: Maybe<HttpRequest>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** A filter to be used against GitlabProjectId fields. All fields are combined with a logical ‘and.’ */
export type GitlabProjectIdFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['GitlabProjectId']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['GitlabProjectId']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['GitlabProjectId']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['GitlabProjectId']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['GitlabProjectId']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['GitlabProjectId']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['GitlabProjectId']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['GitlabProjectId']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['GitlabProjectId']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['GitlabProjectId']>;
};

/** An input for mutations affecting `GitlabProvenance` */
export type GitlabProvenanceInput = {
  identity: Scalars['GitlabServerIdentity'];
  context: Scalars['ExecutionContext'];
  apiBaseUrl: Scalars['String'];
  secretAuthnToken: Scalars['String'];
  authnTokenCreatedAt: Scalars['Datetime'];
  authnTokenCreatedBy: Scalars['String'];
  authnTokenExpiresAt: Scalars['Datetime'];
  meta?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  createdBy?: Maybe<Scalars['String']>;
};


/** All input for the `gitlabUserProfile` mutation. */
export type GitlabUserProfileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  authToken?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `gitlabUserProfile` mutation. */
export type GitlabUserProfilePayload = {
  __typename?: 'GitlabUserProfilePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userProfileResponse?: Maybe<UserProfileResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `gitlabUserSyncV1` mutation. */
export type GitlabUserSyncV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `gitlabUserSyncV1` mutation. */
export type GitlabUserSyncV1Payload = {
  __typename?: 'GitlabUserSyncV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `HdoInputRecord` */
export type HdoInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  hdoEmail?: Maybe<Scalars['String']>;
};

/** This view is used as dropdown under title in hippa form. */
export type HealthAuthAuthorizationTitleMaster = {
  __typename?: 'HealthAuthAuthorizationTitleMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthAuthAuthorizationTitleMaster` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthAuthAuthorizationTitleMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthAuthAuthorizationTitleMaster` object types. All fields are combined with a logical ‘and.’ */
export type HealthAuthAuthorizationTitleMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthAuthAuthorizationTitleMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthAuthAuthorizationTitleMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthAuthAuthorizationTitleMasterFilter>;
};

/** An input for mutations affecting `HealthAuthAuthorizationTitleMaster` */
export type HealthAuthAuthorizationTitleMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `HealthAuthAuthorizationTitleMaster` values. */
export type HealthAuthAuthorizationTitleMastersConnection = {
  __typename?: 'HealthAuthAuthorizationTitleMastersConnection';
  /** A list of `HealthAuthAuthorizationTitleMaster` objects. */
  nodes: Array<Maybe<HealthAuthAuthorizationTitleMaster>>;
  /** A list of edges which contains the `HealthAuthAuthorizationTitleMaster` and cursor to aid in pagination. */
  edges: Array<HealthAuthAuthorizationTitleMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthAuthAuthorizationTitleMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthAuthAuthorizationTitleMaster` edge in the connection. */
export type HealthAuthAuthorizationTitleMastersEdge = {
  __typename?: 'HealthAuthAuthorizationTitleMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthAuthAuthorizationTitleMaster` at the end of the edge. */
  node?: Maybe<HealthAuthAuthorizationTitleMaster>;
};

/** Methods to use when ordering `HealthAuthAuthorizationTitleMaster`. */
export enum HealthAuthAuthorizationTitleMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type HealthInfoAuthorizationV1 = {
  __typename?: 'HealthInfoAuthorizationV1';
  id?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  receivePerson?: Maybe<Scalars['String']>;
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  image?: Maybe<Scalars['UUID']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `HealthInfoAuthorizationV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthInfoAuthorizationV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `purpose` field. */
  purpose?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `startFrom` field. */
  startFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `endTo` field. */
  endTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `expiryDate` field. */
  expiryDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `signatureFile` field. */
  signatureFile?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `receivePerson` field. */
  receivePerson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `healthAuthAuthorizationTitleId` field. */
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isValidAfterDeath` field. */
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `image` field. */
  image?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientRelation` field. */
  patientRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `HealthInfoAuthorizationV1` object types. All fields are combined with a logical ‘and.’ */
export type HealthInfoAuthorizationV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `purpose` field. */
  purpose?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<IntFilter>;
  /** Filter by the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<StringFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `startFrom` field. */
  startFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `endTo` field. */
  endTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `expiryDate` field. */
  expiryDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `signatureFile` field. */
  signatureFile?: Maybe<UuidFilter>;
  /** Filter by the object’s `receivePerson` field. */
  receivePerson?: Maybe<StringFilter>;
  /** Filter by the object’s `healthAuthAuthorizationTitleId` field. */
  healthAuthAuthorizationTitleId?: Maybe<IntFilter>;
  /** Filter by the object’s `isValidAfterDeath` field. */
  isValidAfterDeath?: Maybe<BooleanFilter>;
  /** Filter by the object’s `image` field. */
  image?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<StringFilter>;
  /** Filter by the object’s `patientRelation` field. */
  patientRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthInfoAuthorizationV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthInfoAuthorizationV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<HealthInfoAuthorizationV1Filter>;
};

/** A connection to a list of `HealthInfoAuthorizationV1` values. */
export type HealthInfoAuthorizationV1sConnection = {
  __typename?: 'HealthInfoAuthorizationV1sConnection';
  /** A list of `HealthInfoAuthorizationV1` objects. */
  nodes: Array<Maybe<HealthInfoAuthorizationV1>>;
  /** A list of edges which contains the `HealthInfoAuthorizationV1` and cursor to aid in pagination. */
  edges: Array<HealthInfoAuthorizationV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthInfoAuthorizationV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthInfoAuthorizationV1` edge in the connection. */
export type HealthInfoAuthorizationV1sEdge = {
  __typename?: 'HealthInfoAuthorizationV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthInfoAuthorizationV1` at the end of the edge. */
  node?: Maybe<HealthInfoAuthorizationV1>;
};

/** Methods to use when ordering `HealthInfoAuthorizationV1`. */
export enum HealthInfoAuthorizationV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PurposeAsc = 'PURPOSE_ASC',
  PurposeDesc = 'PURPOSE_DESC',
  AuthorizationOthersAsc = 'AUTHORIZATION_OTHERS_ASC',
  AuthorizationOthersDesc = 'AUTHORIZATION_OTHERS_DESC',
  AuthorizationServiceProvidersTypeAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_ASC',
  AuthorizationServiceProvidersTypeDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_DESC',
  AuthorizationServiceProvidersOthersAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_ASC',
  AuthorizationServiceProvidersOthersDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  AuthorizationExpireEventAsc = 'AUTHORIZATION_EXPIRE_EVENT_ASC',
  AuthorizationExpireEventDesc = 'AUTHORIZATION_EXPIRE_EVENT_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  StartFromAsc = 'START_FROM_ASC',
  StartFromDesc = 'START_FROM_DESC',
  EndToAsc = 'END_TO_ASC',
  EndToDesc = 'END_TO_DESC',
  ExpiryDateAsc = 'EXPIRY_DATE_ASC',
  ExpiryDateDesc = 'EXPIRY_DATE_DESC',
  SignatureFileAsc = 'SIGNATURE_FILE_ASC',
  SignatureFileDesc = 'SIGNATURE_FILE_DESC',
  ReceivePersonAsc = 'RECEIVE_PERSON_ASC',
  ReceivePersonDesc = 'RECEIVE_PERSON_DESC',
  HealthAuthAuthorizationTitleIdAsc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_ID_ASC',
  HealthAuthAuthorizationTitleIdDesc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_ID_DESC',
  IsValidAfterDeathAsc = 'IS_VALID_AFTER_DEATH_ASC',
  IsValidAfterDeathDesc = 'IS_VALID_AFTER_DEATH_DESC',
  ImageAsc = 'IMAGE_ASC',
  ImageDesc = 'IMAGE_DESC',
  PatientRepresentativeAsc = 'PATIENT_REPRESENTATIVE_ASC',
  PatientRepresentativeDesc = 'PATIENT_REPRESENTATIVE_DESC',
  PatientRelationAsc = 'PATIENT_RELATION_ASC',
  PatientRelationDesc = 'PATIENT_RELATION_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

export type HealthInfoAuthorizationV2 = {
  __typename?: 'HealthInfoAuthorizationV2';
  id?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  receivePerson?: Maybe<Scalars['String']>;
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  healthAuthAuthorizationTitle?: Maybe<Scalars['String']>;
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  image?: Maybe<Scalars['UUID']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  legalId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `HealthInfoAuthorizationV2` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthInfoAuthorizationV2Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `purpose` field. */
  purpose?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `startFrom` field. */
  startFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `endTo` field. */
  endTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `expiryDate` field. */
  expiryDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `signatureFile` field. */
  signatureFile?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `receivePerson` field. */
  receivePerson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `healthAuthAuthorizationTitleId` field. */
  healthAuthAuthorizationTitleId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `healthAuthAuthorizationTitle` field. */
  healthAuthAuthorizationTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isValidAfterDeath` field. */
  isValidAfterDeath?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `image` field. */
  image?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientRelation` field. */
  patientRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `legalId` field. */
  legalId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `HealthInfoAuthorizationV2` object types. All fields are combined with a logical ‘and.’ */
export type HealthInfoAuthorizationV2Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `purpose` field. */
  purpose?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<IntFilter>;
  /** Filter by the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<StringFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `startFrom` field. */
  startFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `endTo` field. */
  endTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `expiryDate` field. */
  expiryDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `signatureFile` field. */
  signatureFile?: Maybe<UuidFilter>;
  /** Filter by the object’s `receivePerson` field. */
  receivePerson?: Maybe<StringFilter>;
  /** Filter by the object’s `healthAuthAuthorizationTitleId` field. */
  healthAuthAuthorizationTitleId?: Maybe<IntFilter>;
  /** Filter by the object’s `healthAuthAuthorizationTitle` field. */
  healthAuthAuthorizationTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `isValidAfterDeath` field. */
  isValidAfterDeath?: Maybe<BooleanFilter>;
  /** Filter by the object’s `image` field. */
  image?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<StringFilter>;
  /** Filter by the object’s `patientRelation` field. */
  patientRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `legalId` field. */
  legalId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthInfoAuthorizationV2Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthInfoAuthorizationV2Filter>>;
  /** Negates the expression. */
  not?: Maybe<HealthInfoAuthorizationV2Filter>;
};

/** A connection to a list of `HealthInfoAuthorizationV2` values. */
export type HealthInfoAuthorizationV2sConnection = {
  __typename?: 'HealthInfoAuthorizationV2sConnection';
  /** A list of `HealthInfoAuthorizationV2` objects. */
  nodes: Array<Maybe<HealthInfoAuthorizationV2>>;
  /** A list of edges which contains the `HealthInfoAuthorizationV2` and cursor to aid in pagination. */
  edges: Array<HealthInfoAuthorizationV2sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthInfoAuthorizationV2` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthInfoAuthorizationV2` edge in the connection. */
export type HealthInfoAuthorizationV2sEdge = {
  __typename?: 'HealthInfoAuthorizationV2sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthInfoAuthorizationV2` at the end of the edge. */
  node?: Maybe<HealthInfoAuthorizationV2>;
};

/** Methods to use when ordering `HealthInfoAuthorizationV2`. */
export enum HealthInfoAuthorizationV2sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PurposeAsc = 'PURPOSE_ASC',
  PurposeDesc = 'PURPOSE_DESC',
  AuthorizationOthersAsc = 'AUTHORIZATION_OTHERS_ASC',
  AuthorizationOthersDesc = 'AUTHORIZATION_OTHERS_DESC',
  AuthorizationServiceProvidersTypeAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_ASC',
  AuthorizationServiceProvidersTypeDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_DESC',
  AuthorizationServiceProvidersOthersAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_ASC',
  AuthorizationServiceProvidersOthersDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  AuthorizationExpireEventAsc = 'AUTHORIZATION_EXPIRE_EVENT_ASC',
  AuthorizationExpireEventDesc = 'AUTHORIZATION_EXPIRE_EVENT_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  StartFromAsc = 'START_FROM_ASC',
  StartFromDesc = 'START_FROM_DESC',
  EndToAsc = 'END_TO_ASC',
  EndToDesc = 'END_TO_DESC',
  ExpiryDateAsc = 'EXPIRY_DATE_ASC',
  ExpiryDateDesc = 'EXPIRY_DATE_DESC',
  SignatureFileAsc = 'SIGNATURE_FILE_ASC',
  SignatureFileDesc = 'SIGNATURE_FILE_DESC',
  ReceivePersonAsc = 'RECEIVE_PERSON_ASC',
  ReceivePersonDesc = 'RECEIVE_PERSON_DESC',
  HealthAuthAuthorizationTitleIdAsc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_ID_ASC',
  HealthAuthAuthorizationTitleIdDesc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_ID_DESC',
  HealthAuthAuthorizationTitleAsc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_ASC',
  HealthAuthAuthorizationTitleDesc = 'HEALTH_AUTH_AUTHORIZATION_TITLE_DESC',
  IsValidAfterDeathAsc = 'IS_VALID_AFTER_DEATH_ASC',
  IsValidAfterDeathDesc = 'IS_VALID_AFTER_DEATH_DESC',
  ImageAsc = 'IMAGE_ASC',
  ImageDesc = 'IMAGE_DESC',
  PatientRepresentativeAsc = 'PATIENT_REPRESENTATIVE_ASC',
  PatientRepresentativeDesc = 'PATIENT_REPRESENTATIVE_DESC',
  PatientRelationAsc = 'PATIENT_RELATION_ASC',
  PatientRelationDesc = 'PATIENT_RELATION_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  LegalIdAsc = 'LEGAL_ID_ASC',
  LegalIdDesc = 'LEGAL_ID_DESC'
}

export type HealthcareItNewsAppointmentSchedulingOffering = {
  __typename?: 'HealthcareItNewsAppointmentSchedulingOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsAppointmentSchedulingOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsAppointmentSchedulingOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsAppointmentSchedulingOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsAppointmentSchedulingOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsAppointmentSchedulingOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsAppointmentSchedulingOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsAppointmentSchedulingOffering` values. */
export type HealthcareItNewsAppointmentSchedulingOfferingsConnection = {
  __typename?: 'HealthcareItNewsAppointmentSchedulingOfferingsConnection';
  /** A list of `HealthcareItNewsAppointmentSchedulingOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsAppointmentSchedulingOffering>>;
  /** A list of edges which contains the `HealthcareItNewsAppointmentSchedulingOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsAppointmentSchedulingOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsAppointmentSchedulingOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsAppointmentSchedulingOffering` edge in the connection. */
export type HealthcareItNewsAppointmentSchedulingOfferingsEdge = {
  __typename?: 'HealthcareItNewsAppointmentSchedulingOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsAppointmentSchedulingOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsAppointmentSchedulingOffering>;
};

/** Methods to use when ordering `HealthcareItNewsAppointmentSchedulingOffering`. */
export enum HealthcareItNewsAppointmentSchedulingOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsCybersecurityOffering = {
  __typename?: 'HealthcareItNewsCybersecurityOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsCybersecurityOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsCybersecurityOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsCybersecurityOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsCybersecurityOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsCybersecurityOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsCybersecurityOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsCybersecurityOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsCybersecurityOffering` values. */
export type HealthcareItNewsCybersecurityOfferingsConnection = {
  __typename?: 'HealthcareItNewsCybersecurityOfferingsConnection';
  /** A list of `HealthcareItNewsCybersecurityOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsCybersecurityOffering>>;
  /** A list of edges which contains the `HealthcareItNewsCybersecurityOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsCybersecurityOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsCybersecurityOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsCybersecurityOffering` edge in the connection. */
export type HealthcareItNewsCybersecurityOfferingsEdge = {
  __typename?: 'HealthcareItNewsCybersecurityOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsCybersecurityOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsCybersecurityOffering>;
};

/** Methods to use when ordering `HealthcareItNewsCybersecurityOffering`. */
export enum HealthcareItNewsCybersecurityOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsDigitalTransformationOffering = {
  __typename?: 'HealthcareItNewsDigitalTransformationOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsDigitalTransformationOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsDigitalTransformationOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsDigitalTransformationOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsDigitalTransformationOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsDigitalTransformationOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsDigitalTransformationOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsDigitalTransformationOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsDigitalTransformationOffering` values. */
export type HealthcareItNewsDigitalTransformationOfferingsConnection = {
  __typename?: 'HealthcareItNewsDigitalTransformationOfferingsConnection';
  /** A list of `HealthcareItNewsDigitalTransformationOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsDigitalTransformationOffering>>;
  /** A list of edges which contains the `HealthcareItNewsDigitalTransformationOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsDigitalTransformationOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsDigitalTransformationOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsDigitalTransformationOffering` edge in the connection. */
export type HealthcareItNewsDigitalTransformationOfferingsEdge = {
  __typename?: 'HealthcareItNewsDigitalTransformationOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsDigitalTransformationOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsDigitalTransformationOffering>;
};

/** Methods to use when ordering `HealthcareItNewsDigitalTransformationOffering`. */
export enum HealthcareItNewsDigitalTransformationOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsHealthInformationTechnologyHitOffering = {
  __typename?: 'HealthcareItNewsHealthInformationTechnologyHitOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against
 * `HealthcareItNewsHealthInformationTechnologyHitOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsHealthInformationTechnologyHitOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsHealthInformationTechnologyHitOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsHealthInformationTechnologyHitOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsHealthInformationTechnologyHitOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsHealthInformationTechnologyHitOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsHealthInformationTechnologyHitOffering` values. */
export type HealthcareItNewsHealthInformationTechnologyHitOfferingsConnection = {
  __typename?: 'HealthcareItNewsHealthInformationTechnologyHitOfferingsConnection';
  /** A list of `HealthcareItNewsHealthInformationTechnologyHitOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsHealthInformationTechnologyHitOffering>>;
  /**
   * A list of edges which contains the
   * `HealthcareItNewsHealthInformationTechnologyHitOffering` and cursor to aid in pagination.
   */
  edges: Array<HealthcareItNewsHealthInformationTechnologyHitOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsHealthInformationTechnologyHitOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsHealthInformationTechnologyHitOffering` edge in the connection. */
export type HealthcareItNewsHealthInformationTechnologyHitOfferingsEdge = {
  __typename?: 'HealthcareItNewsHealthInformationTechnologyHitOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsHealthInformationTechnologyHitOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOffering>;
};

/** Methods to use when ordering `HealthcareItNewsHealthInformationTechnologyHitOffering`. */
export enum HealthcareItNewsHealthInformationTechnologyHitOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsImagingTechnologyOffering = {
  __typename?: 'HealthcareItNewsImagingTechnologyOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsImagingTechnologyOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsImagingTechnologyOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsImagingTechnologyOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsImagingTechnologyOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsImagingTechnologyOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsImagingTechnologyOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsImagingTechnologyOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsImagingTechnologyOffering` values. */
export type HealthcareItNewsImagingTechnologyOfferingsConnection = {
  __typename?: 'HealthcareItNewsImagingTechnologyOfferingsConnection';
  /** A list of `HealthcareItNewsImagingTechnologyOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsImagingTechnologyOffering>>;
  /** A list of edges which contains the `HealthcareItNewsImagingTechnologyOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsImagingTechnologyOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsImagingTechnologyOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsImagingTechnologyOffering` edge in the connection. */
export type HealthcareItNewsImagingTechnologyOfferingsEdge = {
  __typename?: 'HealthcareItNewsImagingTechnologyOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsImagingTechnologyOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsImagingTechnologyOffering>;
};

/** Methods to use when ordering `HealthcareItNewsImagingTechnologyOffering`. */
export enum HealthcareItNewsImagingTechnologyOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsMachineLearningOffering = {
  __typename?: 'HealthcareItNewsMachineLearningOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsMachineLearningOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsMachineLearningOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsMachineLearningOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsMachineLearningOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsMachineLearningOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsMachineLearningOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsMachineLearningOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsMachineLearningOffering` values. */
export type HealthcareItNewsMachineLearningOfferingsConnection = {
  __typename?: 'HealthcareItNewsMachineLearningOfferingsConnection';
  /** A list of `HealthcareItNewsMachineLearningOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsMachineLearningOffering>>;
  /** A list of edges which contains the `HealthcareItNewsMachineLearningOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsMachineLearningOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsMachineLearningOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsMachineLearningOffering` edge in the connection. */
export type HealthcareItNewsMachineLearningOfferingsEdge = {
  __typename?: 'HealthcareItNewsMachineLearningOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsMachineLearningOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsMachineLearningOffering>;
};

/** Methods to use when ordering `HealthcareItNewsMachineLearningOffering`. */
export enum HealthcareItNewsMachineLearningOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsMergersAcquisitionsOffering = {
  __typename?: 'HealthcareItNewsMergersAcquisitionsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsMergersAcquisitionsOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsMergersAcquisitionsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsMergersAcquisitionsOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsMergersAcquisitionsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsMergersAcquisitionsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsMergersAcquisitionsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsMergersAcquisitionsOffering` values. */
export type HealthcareItNewsMergersAcquisitionsOfferingsConnection = {
  __typename?: 'HealthcareItNewsMergersAcquisitionsOfferingsConnection';
  /** A list of `HealthcareItNewsMergersAcquisitionsOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsMergersAcquisitionsOffering>>;
  /** A list of edges which contains the `HealthcareItNewsMergersAcquisitionsOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsMergersAcquisitionsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsMergersAcquisitionsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsMergersAcquisitionsOffering` edge in the connection. */
export type HealthcareItNewsMergersAcquisitionsOfferingsEdge = {
  __typename?: 'HealthcareItNewsMergersAcquisitionsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsMergersAcquisitionsOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsMergersAcquisitionsOffering>;
};

/** Methods to use when ordering `HealthcareItNewsMergersAcquisitionsOffering`. */
export enum HealthcareItNewsMergersAcquisitionsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsMobileHealthMhealthOffering = {
  __typename?: 'HealthcareItNewsMobileHealthMhealthOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsMobileHealthMhealthOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsMobileHealthMhealthOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsMobileHealthMhealthOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsMobileHealthMhealthOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsMobileHealthMhealthOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsMobileHealthMhealthOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsMobileHealthMhealthOffering` values. */
export type HealthcareItNewsMobileHealthMhealthOfferingsConnection = {
  __typename?: 'HealthcareItNewsMobileHealthMhealthOfferingsConnection';
  /** A list of `HealthcareItNewsMobileHealthMhealthOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsMobileHealthMhealthOffering>>;
  /** A list of edges which contains the `HealthcareItNewsMobileHealthMhealthOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsMobileHealthMhealthOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsMobileHealthMhealthOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsMobileHealthMhealthOffering` edge in the connection. */
export type HealthcareItNewsMobileHealthMhealthOfferingsEdge = {
  __typename?: 'HealthcareItNewsMobileHealthMhealthOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsMobileHealthMhealthOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsMobileHealthMhealthOffering>;
};

/** Methods to use when ordering `HealthcareItNewsMobileHealthMhealthOffering`. */
export enum HealthcareItNewsMobileHealthMhealthOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsOncologyOffering = {
  __typename?: 'HealthcareItNewsOncologyOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsOncologyOffering` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsOncologyOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsOncologyOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsOncologyOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsOncologyOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsOncologyOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsOncologyOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsOncologyOffering` values. */
export type HealthcareItNewsOncologyOfferingsConnection = {
  __typename?: 'HealthcareItNewsOncologyOfferingsConnection';
  /** A list of `HealthcareItNewsOncologyOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsOncologyOffering>>;
  /** A list of edges which contains the `HealthcareItNewsOncologyOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsOncologyOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsOncologyOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsOncologyOffering` edge in the connection. */
export type HealthcareItNewsOncologyOfferingsEdge = {
  __typename?: 'HealthcareItNewsOncologyOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsOncologyOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsOncologyOffering>;
};

/** Methods to use when ordering `HealthcareItNewsOncologyOffering`. */
export enum HealthcareItNewsOncologyOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsPatientEngagementOffering = {
  __typename?: 'HealthcareItNewsPatientEngagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsPatientEngagementOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsPatientEngagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsPatientEngagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsPatientEngagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsPatientEngagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsPatientEngagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsPatientEngagementOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsPatientEngagementOffering` values. */
export type HealthcareItNewsPatientEngagementOfferingsConnection = {
  __typename?: 'HealthcareItNewsPatientEngagementOfferingsConnection';
  /** A list of `HealthcareItNewsPatientEngagementOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsPatientEngagementOffering>>;
  /** A list of edges which contains the `HealthcareItNewsPatientEngagementOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsPatientEngagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsPatientEngagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsPatientEngagementOffering` edge in the connection. */
export type HealthcareItNewsPatientEngagementOfferingsEdge = {
  __typename?: 'HealthcareItNewsPatientEngagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsPatientEngagementOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsPatientEngagementOffering>;
};

/** Methods to use when ordering `HealthcareItNewsPatientEngagementOffering`. */
export enum HealthcareItNewsPatientEngagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsPublicHealthOffering = {
  __typename?: 'HealthcareItNewsPublicHealthOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsPublicHealthOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsPublicHealthOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsPublicHealthOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsPublicHealthOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsPublicHealthOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsPublicHealthOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsPublicHealthOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsPublicHealthOffering` values. */
export type HealthcareItNewsPublicHealthOfferingsConnection = {
  __typename?: 'HealthcareItNewsPublicHealthOfferingsConnection';
  /** A list of `HealthcareItNewsPublicHealthOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsPublicHealthOffering>>;
  /** A list of edges which contains the `HealthcareItNewsPublicHealthOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsPublicHealthOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsPublicHealthOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsPublicHealthOffering` edge in the connection. */
export type HealthcareItNewsPublicHealthOfferingsEdge = {
  __typename?: 'HealthcareItNewsPublicHealthOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsPublicHealthOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsPublicHealthOffering>;
};

/** Methods to use when ordering `HealthcareItNewsPublicHealthOffering`. */
export enum HealthcareItNewsPublicHealthOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HealthcareItNewsRevenueCycleManagementOffering = {
  __typename?: 'HealthcareItNewsRevenueCycleManagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HealthcareItNewsRevenueCycleManagementOffering`
 * object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type HealthcareItNewsRevenueCycleManagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HealthcareItNewsRevenueCycleManagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type HealthcareItNewsRevenueCycleManagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HealthcareItNewsRevenueCycleManagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HealthcareItNewsRevenueCycleManagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingFilter>;
};

/** A connection to a list of `HealthcareItNewsRevenueCycleManagementOffering` values. */
export type HealthcareItNewsRevenueCycleManagementOfferingsConnection = {
  __typename?: 'HealthcareItNewsRevenueCycleManagementOfferingsConnection';
  /** A list of `HealthcareItNewsRevenueCycleManagementOffering` objects. */
  nodes: Array<Maybe<HealthcareItNewsRevenueCycleManagementOffering>>;
  /** A list of edges which contains the `HealthcareItNewsRevenueCycleManagementOffering` and cursor to aid in pagination. */
  edges: Array<HealthcareItNewsRevenueCycleManagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HealthcareItNewsRevenueCycleManagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HealthcareItNewsRevenueCycleManagementOffering` edge in the connection. */
export type HealthcareItNewsRevenueCycleManagementOfferingsEdge = {
  __typename?: 'HealthcareItNewsRevenueCycleManagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HealthcareItNewsRevenueCycleManagementOffering` at the end of the edge. */
  node?: Maybe<HealthcareItNewsRevenueCycleManagementOffering>;
};

/** Methods to use when ordering `HealthcareItNewsRevenueCycleManagementOffering`. */
export enum HealthcareItNewsRevenueCycleManagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HimssComplianceOffering = {
  __typename?: 'HimssComplianceOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HimssComplianceOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HimssComplianceOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HimssComplianceOffering` object types. All fields are combined with a logical ‘and.’ */
export type HimssComplianceOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HimssComplianceOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HimssComplianceOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HimssComplianceOfferingFilter>;
};

/** A connection to a list of `HimssComplianceOffering` values. */
export type HimssComplianceOfferingsConnection = {
  __typename?: 'HimssComplianceOfferingsConnection';
  /** A list of `HimssComplianceOffering` objects. */
  nodes: Array<Maybe<HimssComplianceOffering>>;
  /** A list of edges which contains the `HimssComplianceOffering` and cursor to aid in pagination. */
  edges: Array<HimssComplianceOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HimssComplianceOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HimssComplianceOffering` edge in the connection. */
export type HimssComplianceOfferingsEdge = {
  __typename?: 'HimssComplianceOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HimssComplianceOffering` at the end of the edge. */
  node?: Maybe<HimssComplianceOffering>;
};

/** Methods to use when ordering `HimssComplianceOffering`. */
export enum HimssComplianceOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HimssDigitalHealthOffering = {
  __typename?: 'HimssDigitalHealthOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HimssDigitalHealthOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HimssDigitalHealthOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HimssDigitalHealthOffering` object types. All fields are combined with a logical ‘and.’ */
export type HimssDigitalHealthOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HimssDigitalHealthOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HimssDigitalHealthOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HimssDigitalHealthOfferingFilter>;
};

/** A connection to a list of `HimssDigitalHealthOffering` values. */
export type HimssDigitalHealthOfferingsConnection = {
  __typename?: 'HimssDigitalHealthOfferingsConnection';
  /** A list of `HimssDigitalHealthOffering` objects. */
  nodes: Array<Maybe<HimssDigitalHealthOffering>>;
  /** A list of edges which contains the `HimssDigitalHealthOffering` and cursor to aid in pagination. */
  edges: Array<HimssDigitalHealthOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HimssDigitalHealthOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HimssDigitalHealthOffering` edge in the connection. */
export type HimssDigitalHealthOfferingsEdge = {
  __typename?: 'HimssDigitalHealthOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HimssDigitalHealthOffering` at the end of the edge. */
  node?: Maybe<HimssDigitalHealthOffering>;
};

/** Methods to use when ordering `HimssDigitalHealthOffering`. */
export enum HimssDigitalHealthOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HimssHealthAndWellnessOffering = {
  __typename?: 'HimssHealthAndWellnessOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HimssHealthAndWellnessOffering` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type HimssHealthAndWellnessOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HimssHealthAndWellnessOffering` object types. All fields are combined with a logical ‘and.’ */
export type HimssHealthAndWellnessOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HimssHealthAndWellnessOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HimssHealthAndWellnessOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HimssHealthAndWellnessOfferingFilter>;
};

/** A connection to a list of `HimssHealthAndWellnessOffering` values. */
export type HimssHealthAndWellnessOfferingsConnection = {
  __typename?: 'HimssHealthAndWellnessOfferingsConnection';
  /** A list of `HimssHealthAndWellnessOffering` objects. */
  nodes: Array<Maybe<HimssHealthAndWellnessOffering>>;
  /** A list of edges which contains the `HimssHealthAndWellnessOffering` and cursor to aid in pagination. */
  edges: Array<HimssHealthAndWellnessOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HimssHealthAndWellnessOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HimssHealthAndWellnessOffering` edge in the connection. */
export type HimssHealthAndWellnessOfferingsEdge = {
  __typename?: 'HimssHealthAndWellnessOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HimssHealthAndWellnessOffering` at the end of the edge. */
  node?: Maybe<HimssHealthAndWellnessOffering>;
};

/** Methods to use when ordering `HimssHealthAndWellnessOffering`. */
export enum HimssHealthAndWellnessOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HimssInformaticsOffering = {
  __typename?: 'HimssInformaticsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HimssInformaticsOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HimssInformaticsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HimssInformaticsOffering` object types. All fields are combined with a logical ‘and.’ */
export type HimssInformaticsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HimssInformaticsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HimssInformaticsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HimssInformaticsOfferingFilter>;
};

/** A connection to a list of `HimssInformaticsOffering` values. */
export type HimssInformaticsOfferingsConnection = {
  __typename?: 'HimssInformaticsOfferingsConnection';
  /** A list of `HimssInformaticsOffering` objects. */
  nodes: Array<Maybe<HimssInformaticsOffering>>;
  /** A list of edges which contains the `HimssInformaticsOffering` and cursor to aid in pagination. */
  edges: Array<HimssInformaticsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HimssInformaticsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HimssInformaticsOffering` edge in the connection. */
export type HimssInformaticsOfferingsEdge = {
  __typename?: 'HimssInformaticsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HimssInformaticsOffering` at the end of the edge. */
  node?: Maybe<HimssInformaticsOffering>;
};

/** Methods to use when ordering `HimssInformaticsOffering`. */
export enum HimssInformaticsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type HimssInteroperabilityOffering = {
  __typename?: 'HimssInteroperabilityOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `HimssInteroperabilityOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type HimssInteroperabilityOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `HimssInteroperabilityOffering` object types. All fields are combined with a logical ‘and.’ */
export type HimssInteroperabilityOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<HimssInteroperabilityOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<HimssInteroperabilityOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<HimssInteroperabilityOfferingFilter>;
};

/** A connection to a list of `HimssInteroperabilityOffering` values. */
export type HimssInteroperabilityOfferingsConnection = {
  __typename?: 'HimssInteroperabilityOfferingsConnection';
  /** A list of `HimssInteroperabilityOffering` objects. */
  nodes: Array<Maybe<HimssInteroperabilityOffering>>;
  /** A list of edges which contains the `HimssInteroperabilityOffering` and cursor to aid in pagination. */
  edges: Array<HimssInteroperabilityOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `HimssInteroperabilityOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `HimssInteroperabilityOffering` edge in the connection. */
export type HimssInteroperabilityOfferingsEdge = {
  __typename?: 'HimssInteroperabilityOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `HimssInteroperabilityOffering` at the end of the edge. */
  node?: Maybe<HimssInteroperabilityOffering>;
};

/** Methods to use when ordering `HimssInteroperabilityOffering`. */
export enum HimssInteroperabilityOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

/** All input for the `httpClientGraphqlAnonymousQueryResult` mutation. */
export type HttpClientGraphqlAnonymousQueryResultInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  endpointUrl?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
};

/** The output of our `httpClientGraphqlAnonymousQueryResult` mutation. */
export type HttpClientGraphqlAnonymousQueryResultPayload = {
  __typename?: 'HttpClientGraphqlAnonymousQueryResultPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `httpClientGraphqlAuthnHeaderQueryResult` mutation. */
export type HttpClientGraphqlAuthnHeaderQueryResultInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  endpointUrl?: Maybe<Scalars['String']>;
  authTokenHeaderName?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
};

/** The output of our `httpClientGraphqlAuthnHeaderQueryResult` mutation. */
export type HttpClientGraphqlAuthnHeaderQueryResultPayload = {
  __typename?: 'HttpClientGraphqlAuthnHeaderQueryResultPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type HttpHeader = {
  __typename?: 'HttpHeader';
  field?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};


export type HttpRequest = {
  __typename?: 'HttpRequest';
  method?: Maybe<Scalars['HttpMethod']>;
  uri?: Maybe<Scalars['String']>;
  headers?: Maybe<Array<Maybe<HttpHeader>>>;
  contentType?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type HttpResponse = {
  __typename?: 'HttpResponse';
  status?: Maybe<Scalars['Int']>;
  contentType?: Maybe<Scalars['String']>;
  headers?: Maybe<Array<Maybe<HttpHeader>>>;
  content?: Maybe<Scalars['String']>;
};

export type ImageContent = {
  __typename?: 'ImageContent';
  provenance?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  imageFormat?: Maybe<Scalars['String']>;
  imageWidth?: Maybe<Scalars['Int']>;
  imageHeight?: Maybe<Scalars['Int']>;
  imageSizeBytes?: Maybe<Scalars['Int']>;
  mimeType?: Maybe<Scalars['String']>;
  imageFormatOriginal?: Maybe<Scalars['String']>;
  imageSizeOriginal?: Maybe<Scalars['Int']>;
  imageWidthOriginal?: Maybe<Scalars['Int']>;
  imageHeightOriginal?: Maybe<Scalars['Int']>;
  imageFileExtensionOriginal?: Maybe<Scalars['String']>;
  mimeTypeOriginal?: Maybe<Scalars['String']>;
  imageHash?: Maybe<Scalars['String']>;
  isTransformed?: Maybe<Scalars['Boolean']>;
  imageIsValid?: Maybe<Scalars['Boolean']>;
  imageFileExtension?: Maybe<Scalars['String']>;
  imageStatusMsg?: Maybe<Scalars['String']>;
};


/** A filter to be used against ImageContentBytea fields. All fields are combined with a logical ‘and.’ */
export type ImageContentByteaFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['ImageContentBytea']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['ImageContentBytea']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['ImageContentBytea']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['ImageContentBytea']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['ImageContentBytea']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['ImageContentBytea']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['ImageContentBytea']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['ImageContentBytea']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['ImageContentBytea']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['ImageContentBytea']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['ImageContentBytea']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['ImageContentBytea']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['ImageContentBytea']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['ImageContentBytea']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['ImageContentBytea']>;
  /** Matches the specified pattern using the SQL standard's definition of a regular expression. */
  similarTo?: Maybe<Scalars['ImageContentBytea']>;
  /** Does not match the specified pattern using the SQL standard's definition of a regular expression. */
  notSimilarTo?: Maybe<Scalars['ImageContentBytea']>;
};

export type ImageMetaDatum = {
  __typename?: 'ImageMetaDatum';
  provenance?: Maybe<Scalars['String']>;
  imageFormat?: Maybe<Scalars['String']>;
  imageWidth?: Maybe<Scalars['Int']>;
  imageHeight?: Maybe<Scalars['Int']>;
  imageSizeBytes?: Maybe<Scalars['Int']>;
  imageIsValid?: Maybe<Scalars['Boolean']>;
  imageStatusMsg?: Maybe<Scalars['String']>;
};

/** This view is used as dropdown under title in hippa form. */
export type ImpactSeverityMaster = {
  __typename?: 'ImpactSeverityMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `ImpactSeverityMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ImpactSeverityMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `ImpactSeverityMaster` object types. All fields are combined with a logical ‘and.’ */
export type ImpactSeverityMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ImpactSeverityMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ImpactSeverityMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<ImpactSeverityMasterFilter>;
};

/** An input for mutations affecting `ImpactSeverityMaster` */
export type ImpactSeverityMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `ImpactSeverityMaster` values. */
export type ImpactSeverityMastersConnection = {
  __typename?: 'ImpactSeverityMastersConnection';
  /** A list of `ImpactSeverityMaster` objects. */
  nodes: Array<Maybe<ImpactSeverityMaster>>;
  /** A list of edges which contains the `ImpactSeverityMaster` and cursor to aid in pagination. */
  edges: Array<ImpactSeverityMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ImpactSeverityMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ImpactSeverityMaster` edge in the connection. */
export type ImpactSeverityMastersEdge = {
  __typename?: 'ImpactSeverityMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ImpactSeverityMaster` at the end of the edge. */
  node?: Maybe<ImpactSeverityMaster>;
};

/** Methods to use when ordering `ImpactSeverityMaster`. */
export enum ImpactSeverityMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** This view is used as master table for information blocking exceptions used as checkboxes in UI */
export type InformationBlockingExceptionsMaster = {
  __typename?: 'InformationBlockingExceptionsMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `InformationBlockingExceptionsMaster` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type InformationBlockingExceptionsMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `InformationBlockingExceptionsMaster` object types. All fields are combined with a logical ‘and.’ */
export type InformationBlockingExceptionsMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InformationBlockingExceptionsMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InformationBlockingExceptionsMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<InformationBlockingExceptionsMasterFilter>;
};

/** An input for mutations affecting `InformationBlockingExceptionsMaster` */
export type InformationBlockingExceptionsMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `InformationBlockingExceptionsMaster` values. */
export type InformationBlockingExceptionsMastersConnection = {
  __typename?: 'InformationBlockingExceptionsMastersConnection';
  /** A list of `InformationBlockingExceptionsMaster` objects. */
  nodes: Array<Maybe<InformationBlockingExceptionsMaster>>;
  /** A list of edges which contains the `InformationBlockingExceptionsMaster` and cursor to aid in pagination. */
  edges: Array<InformationBlockingExceptionsMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InformationBlockingExceptionsMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InformationBlockingExceptionsMaster` edge in the connection. */
export type InformationBlockingExceptionsMastersEdge = {
  __typename?: 'InformationBlockingExceptionsMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InformationBlockingExceptionsMaster` at the end of the edge. */
  node?: Maybe<InformationBlockingExceptionsMaster>;
};

/** Methods to use when ordering `InformationBlockingExceptionsMaster`. */
export enum InformationBlockingExceptionsMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `initIdentityVerificationV1` mutation. */
export type InitIdentityVerificationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  userTransactionId?: Maybe<Scalars['String']>;
};

/** The output of our `initIdentityVerificationV1` mutation. */
export type InitIdentityVerificationV1Payload = {
  __typename?: 'InitIdentityVerificationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  verificationMeta?: Maybe<VerificationMeta>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `insertChatroomDetails` mutation. */
export type InsertChatroomDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  chatRequestId?: Maybe<Scalars['UUID']>;
  chatRoomId?: Maybe<Scalars['String']>;
  appArea?: Maybe<Scalars['String']>;
};

/** The output of our `insertChatroomDetails` mutation. */
export type InsertChatroomDetailsPayload = {
  __typename?: 'InsertChatroomDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  boolean?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `insertDomainRealm` mutation. */
export type InsertDomainRealmInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  domainName?: Maybe<Scalars['String']>;
  realmName?: Maybe<Scalars['String']>;
  clientname?: Maybe<Scalars['String']>;
  clientid?: Maybe<Scalars['String']>;
};

/** The output of our `insertDomainRealm` mutation. */
export type InsertDomainRealmPayload = {
  __typename?: 'InsertDomainRealmPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `insertOrganizationRealm` mutation. */
export type InsertOrganizationRealmInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgzName?: Maybe<Scalars['String']>;
  deptName?: Maybe<Scalars['String']>;
};

/** The output of our `insertOrganizationRealm` mutation. */
export type InsertOrganizationRealmPayload = {
  __typename?: 'InsertOrganizationRealmPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `insertStaticEmails` mutation. */
export type InsertStaticEmailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `insertStaticEmails` mutation. */
export type InsertStaticEmailsPayload = {
  __typename?: 'InsertStaticEmailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `inspectImageMetaData` mutation. */
export type InspectImageMetaDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  provenance?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
};

/** The output of our `inspectImageMetaData` mutation. */
export type InspectImageMetaDataPayload = {
  __typename?: 'InspectImageMetaDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageMetaDatum?: Maybe<ImageMetaDatum>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `InstSourceOfInvitation` */
export type InstSourceOfInvitationInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type Institution = {
  __typename?: 'Institution';
  id?: Maybe<Scalars['UUID']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionType?: Maybe<Scalars['String']>;
  institutionTypeId?: Maybe<Scalars['String']>;
  institutionEmail?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  metaStatus?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  directAddress?: Maybe<Scalars['String']>;
  institutionDescription?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterName?: Maybe<Scalars['String']>;
  approverName?: Maybe<Scalars['String']>;
  approverEmail?: Maybe<Scalars['String']>;
};

export type InstitutionAliasesList = {
  __typename?: 'InstitutionAliasesList';
  satId: Scalars['SatGitlabInstitutionProfileLhcFormId'];
  glProjectId: Scalars['GitlabProjectId'];
  alias?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `InstitutionAliasesList` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionAliasesListCondition = {
  /** Checks for equality with the object’s `satId` field. */
  satId?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Checks for equality with the object’s `glProjectId` field. */
  glProjectId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `alias` field. */
  alias?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `InstitutionAliasesList` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionAliasesListFilter = {
  /** Filter by the object’s `satId` field. */
  satId?: Maybe<SatGitlabInstitutionProfileLhcFormIdFilter>;
  /** Filter by the object’s `glProjectId` field. */
  glProjectId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `alias` field. */
  alias?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionAliasesListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionAliasesListFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionAliasesListFilter>;
};

/** A connection to a list of `InstitutionAliasesList` values. */
export type InstitutionAliasesListsConnection = {
  __typename?: 'InstitutionAliasesListsConnection';
  /** A list of `InstitutionAliasesList` objects. */
  nodes: Array<Maybe<InstitutionAliasesList>>;
  /** A list of edges which contains the `InstitutionAliasesList` and cursor to aid in pagination. */
  edges: Array<InstitutionAliasesListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionAliasesList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionAliasesList` edge in the connection. */
export type InstitutionAliasesListsEdge = {
  __typename?: 'InstitutionAliasesListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionAliasesList` at the end of the edge. */
  node?: Maybe<InstitutionAliasesList>;
};

/** Methods to use when ordering `InstitutionAliasesList`. */
export enum InstitutionAliasesListsOrderBy {
  Natural = 'NATURAL',
  SatIdAsc = 'SAT_ID_ASC',
  SatIdDesc = 'SAT_ID_DESC',
  GlProjectIdAsc = 'GL_PROJECT_ID_ASC',
  GlProjectIdDesc = 'GL_PROJECT_ID_DESC',
  AliasAsc = 'ALIAS_ASC',
  AliasDesc = 'ALIAS_DESC'
}

export type InstitutionAssetsProject = {
  __typename?: 'InstitutionAssetsProject';
  institutionId?: Maybe<Scalars['Int']>;
  institutionAssetProjectId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `InstitutionAssetsProject` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionAssetsProjectCondition = {
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionAssetProjectId` field. */
  institutionAssetProjectId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `InstitutionAssetsProject` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionAssetsProjectFilter = {
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionAssetProjectId` field. */
  institutionAssetProjectId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionAssetsProjectFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionAssetsProjectFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionAssetsProjectFilter>;
};

/** A connection to a list of `InstitutionAssetsProject` values. */
export type InstitutionAssetsProjectsConnection = {
  __typename?: 'InstitutionAssetsProjectsConnection';
  /** A list of `InstitutionAssetsProject` objects. */
  nodes: Array<Maybe<InstitutionAssetsProject>>;
  /** A list of edges which contains the `InstitutionAssetsProject` and cursor to aid in pagination. */
  edges: Array<InstitutionAssetsProjectsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionAssetsProject` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionAssetsProject` edge in the connection. */
export type InstitutionAssetsProjectsEdge = {
  __typename?: 'InstitutionAssetsProjectsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionAssetsProject` at the end of the edge. */
  node?: Maybe<InstitutionAssetsProject>;
};

/** Methods to use when ordering `InstitutionAssetsProject`. */
export enum InstitutionAssetsProjectsOrderBy {
  Natural = 'NATURAL',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  InstitutionAssetProjectIdAsc = 'INSTITUTION_ASSET_PROJECT_ID_ASC',
  InstitutionAssetProjectIdDesc = 'INSTITUTION_ASSET_PROJECT_ID_DESC'
}

export type InstitutionBrokenUrlList = {
  __typename?: 'InstitutionBrokenUrlList';
  id: Scalars['Int'];
  institutionId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `InstitutionBrokenUrlList` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionBrokenUrlListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `website` field. */
  website?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `InstitutionBrokenUrlList` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionBrokenUrlListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `website` field. */
  website?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionBrokenUrlListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionBrokenUrlListFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionBrokenUrlListFilter>;
};

/** An input for mutations affecting `InstitutionBrokenUrlList` */
export type InstitutionBrokenUrlListInput = {
  institutionId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `InstitutionBrokenUrlList` values. */
export type InstitutionBrokenUrlListsConnection = {
  __typename?: 'InstitutionBrokenUrlListsConnection';
  /** A list of `InstitutionBrokenUrlList` objects. */
  nodes: Array<Maybe<InstitutionBrokenUrlList>>;
  /** A list of edges which contains the `InstitutionBrokenUrlList` and cursor to aid in pagination. */
  edges: Array<InstitutionBrokenUrlListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionBrokenUrlList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionBrokenUrlList` edge in the connection. */
export type InstitutionBrokenUrlListsEdge = {
  __typename?: 'InstitutionBrokenUrlListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionBrokenUrlList` at the end of the edge. */
  node?: Maybe<InstitutionBrokenUrlList>;
};

/** Methods to use when ordering `InstitutionBrokenUrlList`. */
export enum InstitutionBrokenUrlListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  WebsiteAsc = 'WEBSITE_ASC',
  WebsiteDesc = 'WEBSITE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC'
}

/**
 * A condition to be used against `Institution` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type InstitutionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `institutionName` field. */
  institutionName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionType` field. */
  institutionType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionTypeId` field. */
  institutionTypeId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionEmail` field. */
  institutionEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaStatus` field. */
  metaStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `website` field. */
  website?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zipCode` field. */
  zipCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `faxNumber` field. */
  faxNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `directAddress` field. */
  directAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionDescription` field. */
  institutionDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requesterEmail` field. */
  requesterEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requesterName` field. */
  requesterName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approverName` field. */
  approverName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approverEmail` field. */
  approverEmail?: Maybe<Scalars['String']>;
};

export type InstitutionDatum = {
  __typename?: 'InstitutionDatum';
  institutionId?: Maybe<Scalars['Int']>;
  institutionName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `Institution` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `institutionName` field. */
  institutionName?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionType` field. */
  institutionType?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionTypeId` field. */
  institutionTypeId?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionEmail` field. */
  institutionEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `metaStatus` field. */
  metaStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `website` field. */
  website?: Maybe<StringFilter>;
  /** Filter by the object’s `zipCode` field. */
  zipCode?: Maybe<StringFilter>;
  /** Filter by the object’s `faxNumber` field. */
  faxNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `directAddress` field. */
  directAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionDescription` field. */
  institutionDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `requesterEmail` field. */
  requesterEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `requesterName` field. */
  requesterName?: Maybe<StringFilter>;
  /** Filter by the object’s `approverName` field. */
  approverName?: Maybe<StringFilter>;
  /** Filter by the object’s `approverEmail` field. */
  approverEmail?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionFilter>;
};

export type InstitutionInviteDataResult = {
  __typename?: 'InstitutionInviteDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `InstitutionInviteInputRecord` */
export type InstitutionInviteInputRecordInput = {
  email?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  fromName?: Maybe<Scalars['String']>;
  toName?: Maybe<Scalars['String']>;
  institutionName?: Maybe<Scalars['String']>;
};

export type InstitutionMergePendingList = {
  __typename?: 'InstitutionMergePendingList';
  id: Scalars['GitlabNamespaceId'];
  title?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  institutionPath?: Maybe<Scalars['String']>;
  iid?: Maybe<Scalars['Int']>;
  profileProjectId: Scalars['GitlabProjectId'];
};

/**
 * A condition to be used against `InstitutionMergePendingList` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionMergePendingListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mergeStatus` field. */
  mergeStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `iid` field. */
  iid?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `profileProjectId` field. */
  profileProjectId?: Maybe<Scalars['GitlabProjectId']>;
};

/** A filter to be used against `InstitutionMergePendingList` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionMergePendingListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `mergeStatus` field. */
  mergeStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `iid` field. */
  iid?: Maybe<IntFilter>;
  /** Filter by the object’s `profileProjectId` field. */
  profileProjectId?: Maybe<GitlabProjectIdFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionMergePendingListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionMergePendingListFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionMergePendingListFilter>;
};

/** A connection to a list of `InstitutionMergePendingList` values. */
export type InstitutionMergePendingListsConnection = {
  __typename?: 'InstitutionMergePendingListsConnection';
  /** A list of `InstitutionMergePendingList` objects. */
  nodes: Array<Maybe<InstitutionMergePendingList>>;
  /** A list of edges which contains the `InstitutionMergePendingList` and cursor to aid in pagination. */
  edges: Array<InstitutionMergePendingListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionMergePendingList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionMergePendingList` edge in the connection. */
export type InstitutionMergePendingListsEdge = {
  __typename?: 'InstitutionMergePendingListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionMergePendingList` at the end of the edge. */
  node?: Maybe<InstitutionMergePendingList>;
};

/** Methods to use when ordering `InstitutionMergePendingList`. */
export enum InstitutionMergePendingListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  MergeStatusAsc = 'MERGE_STATUS_ASC',
  MergeStatusDesc = 'MERGE_STATUS_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  IidAsc = 'IID_ASC',
  IidDesc = 'IID_DESC',
  ProfileProjectIdAsc = 'PROFILE_PROJECT_ID_ASC',
  ProfileProjectIdDesc = 'PROFILE_PROJECT_ID_DESC'
}

/** An input for mutations affecting `InstitutionProfileDatum` */
export type InstitutionProfileDatumInput = {
  authToken?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  ownerType?: Maybe<Scalars['String']>;
  ownerJobTitle?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  incorporationDate?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  companyTypeId?: Maybe<Scalars['Int']>;
  registrationNumber?: Maybe<Scalars['String']>;
  industry?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  networth?: Maybe<Scalars['String']>;
  companySize?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  workEmail?: Maybe<Scalars['String']>;
  workPhone?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  addressHouseBuilding?: Maybe<Scalars['String']>;
  addressTownCity?: Maybe<Scalars['String']>;
  addressStateProvince?: Maybe<Scalars['String']>;
  addressZipPostalCode?: Maybe<Scalars['String']>;
  addressCountryRegion?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  githubDetails?: Maybe<Scalars['String']>;
  sourceOfInvitation?: Maybe<SourceOfInvitationDatumInput>;
  directAddress?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `InstitutionProfile` */
export type InstitutionProfileInput = {
  authToken?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  ownerType?: Maybe<Scalars['String']>;
  ownerJobTitle?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  incorporationDate?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  industry?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  networth?: Maybe<Scalars['String']>;
  companySize?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  workEmail?: Maybe<Scalars['String']>;
  workPhone?: Maybe<Scalars['String']>;
  anotherPhone?: Maybe<Scalars['String']>;
  addressHouseBuilding?: Maybe<Scalars['String']>;
  addressTownCity?: Maybe<Scalars['String']>;
  addressStateProvince?: Maybe<Scalars['String']>;
  addressZipPostalCode?: Maybe<Scalars['String']>;
  addressCountryRegion?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  githubDetails?: Maybe<Scalars['String']>;
  sourceOfInvitation?: Maybe<InstSourceOfInvitationInput>;
};

export type InstitutionProfileJune20213 = {
  __typename?: 'InstitutionProfileJune20213';
  id: Scalars['GitlabNamespaceId'];
  institutionId: Scalars['GitlabNamespaceId'];
  createdDate?: Maybe<Scalars['Datetime']>;
  updatedDate?: Maybe<Scalars['Datetime']>;
  profileProjectId: Scalars['GitlabProjectId'];
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  dateOfIncorporation?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  industry?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  networth?: Maybe<Scalars['String']>;
  companySize?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  workEmail?: Maybe<Scalars['String']>;
  workPhone?: Maybe<Scalars['String']>;
  anotherPhone?: Maybe<Scalars['String']>;
  house?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  sourceOfInvitation?: Maybe<Scalars['JSON']>;
  crmIdentifier?: Maybe<Scalars['JSON']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  ogurl?: Maybe<Scalars['String']>;
  searchCategory?: Maybe<Scalars['String']>;
  masthead?: Maybe<Scalars['String']>;
  breadcrumb?: Maybe<Scalars['JSON']>;
  breadcrumbLinks?: Maybe<Scalars['JSON']>;
  featuredImg?: Maybe<Scalars['String']>;
  logoImg?: Maybe<Scalars['String']>;
  featuredContent?: Maybe<Scalars['String']>;
  logoContent?: Maybe<Scalars['String']>;
  instAssetId?: Maybe<Scalars['Int']>;
  sub?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  vendorType?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `InstitutionProfileJune20213` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionProfileJune20213Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `createdDate` field. */
  createdDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedDate` field. */
  updatedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `profileProjectId` field. */
  profileProjectId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyDescription` field. */
  companyDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dateOfIncorporation` field. */
  dateOfIncorporation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyType` field. */
  companyType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationNumber` field. */
  registrationNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `industry` field. */
  industry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `currency` field. */
  currency?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `networth` field. */
  networth?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySize` field. */
  companySize?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `website` field. */
  website?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `workEmail` field. */
  workEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `workPhone` field. */
  workPhone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `anotherPhone` field. */
  anotherPhone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `house` field. */
  house?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zip` field. */
  zip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceOfInvitation` field. */
  sourceOfInvitation?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `crmIdentifier` field. */
  crmIdentifier?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `uuid` field. */
  uuid?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ogurl` field. */
  ogurl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `searchCategory` field. */
  searchCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `masthead` field. */
  masthead?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `breadcrumb` field. */
  breadcrumb?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `breadcrumbLinks` field. */
  breadcrumbLinks?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `featuredImg` field. */
  featuredImg?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImg` field. */
  logoImg?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredContent` field. */
  featuredContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoContent` field. */
  logoContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instAssetId` field. */
  instAssetId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sub` field. */
  sub?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorType` field. */
  vendorType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `jobTitle` field. */
  jobTitle?: Maybe<Scalars['String']>;
};

/** A filter to be used against `InstitutionProfileJune20213` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionProfileJune20213Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `createdDate` field. */
  createdDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedDate` field. */
  updatedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `profileProjectId` field. */
  profileProjectId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `companyDescription` field. */
  companyDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `dateOfIncorporation` field. */
  dateOfIncorporation?: Maybe<StringFilter>;
  /** Filter by the object’s `companyType` field. */
  companyType?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationNumber` field. */
  registrationNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `industry` field. */
  industry?: Maybe<StringFilter>;
  /** Filter by the object’s `currency` field. */
  currency?: Maybe<StringFilter>;
  /** Filter by the object’s `networth` field. */
  networth?: Maybe<StringFilter>;
  /** Filter by the object’s `companySize` field. */
  companySize?: Maybe<StringFilter>;
  /** Filter by the object’s `website` field. */
  website?: Maybe<StringFilter>;
  /** Filter by the object’s `workEmail` field. */
  workEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `workPhone` field. */
  workPhone?: Maybe<StringFilter>;
  /** Filter by the object’s `anotherPhone` field. */
  anotherPhone?: Maybe<StringFilter>;
  /** Filter by the object’s `house` field. */
  house?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `zip` field. */
  zip?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceOfInvitation` field. */
  sourceOfInvitation?: Maybe<JsonFilter>;
  /** Filter by the object’s `crmIdentifier` field. */
  crmIdentifier?: Maybe<JsonFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `uuid` field. */
  uuid?: Maybe<JsonFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `ogurl` field. */
  ogurl?: Maybe<StringFilter>;
  /** Filter by the object’s `searchCategory` field. */
  searchCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `masthead` field. */
  masthead?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImg` field. */
  featuredImg?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImg` field. */
  logoImg?: Maybe<StringFilter>;
  /** Filter by the object’s `instAssetId` field. */
  instAssetId?: Maybe<IntFilter>;
  /** Filter by the object’s `sub` field. */
  sub?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorType` field. */
  vendorType?: Maybe<StringFilter>;
  /** Filter by the object’s `jobTitle` field. */
  jobTitle?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionProfileJune20213Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionProfileJune20213Filter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionProfileJune20213Filter>;
};

/** A connection to a list of `InstitutionProfileJune20213` values. */
export type InstitutionProfileJune20213sConnection = {
  __typename?: 'InstitutionProfileJune20213sConnection';
  /** A list of `InstitutionProfileJune20213` objects. */
  nodes: Array<Maybe<InstitutionProfileJune20213>>;
  /** A list of edges which contains the `InstitutionProfileJune20213` and cursor to aid in pagination. */
  edges: Array<InstitutionProfileJune20213sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionProfileJune20213` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionProfileJune20213` edge in the connection. */
export type InstitutionProfileJune20213sEdge = {
  __typename?: 'InstitutionProfileJune20213sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionProfileJune20213` at the end of the edge. */
  node?: Maybe<InstitutionProfileJune20213>;
};

/** Methods to use when ordering `InstitutionProfileJune20213`. */
export enum InstitutionProfileJune20213sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  CreatedDateAsc = 'CREATED_DATE_ASC',
  CreatedDateDesc = 'CREATED_DATE_DESC',
  UpdatedDateAsc = 'UPDATED_DATE_ASC',
  UpdatedDateDesc = 'UPDATED_DATE_DESC',
  ProfileProjectIdAsc = 'PROFILE_PROJECT_ID_ASC',
  ProfileProjectIdDesc = 'PROFILE_PROJECT_ID_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  CompanyDescriptionAsc = 'COMPANY_DESCRIPTION_ASC',
  CompanyDescriptionDesc = 'COMPANY_DESCRIPTION_DESC',
  DateOfIncorporationAsc = 'DATE_OF_INCORPORATION_ASC',
  DateOfIncorporationDesc = 'DATE_OF_INCORPORATION_DESC',
  CompanyTypeAsc = 'COMPANY_TYPE_ASC',
  CompanyTypeDesc = 'COMPANY_TYPE_DESC',
  RegistrationNumberAsc = 'REGISTRATION_NUMBER_ASC',
  RegistrationNumberDesc = 'REGISTRATION_NUMBER_DESC',
  IndustryAsc = 'INDUSTRY_ASC',
  IndustryDesc = 'INDUSTRY_DESC',
  CurrencyAsc = 'CURRENCY_ASC',
  CurrencyDesc = 'CURRENCY_DESC',
  NetworthAsc = 'NETWORTH_ASC',
  NetworthDesc = 'NETWORTH_DESC',
  CompanySizeAsc = 'COMPANY_SIZE_ASC',
  CompanySizeDesc = 'COMPANY_SIZE_DESC',
  WebsiteAsc = 'WEBSITE_ASC',
  WebsiteDesc = 'WEBSITE_DESC',
  WorkEmailAsc = 'WORK_EMAIL_ASC',
  WorkEmailDesc = 'WORK_EMAIL_DESC',
  WorkPhoneAsc = 'WORK_PHONE_ASC',
  WorkPhoneDesc = 'WORK_PHONE_DESC',
  AnotherPhoneAsc = 'ANOTHER_PHONE_ASC',
  AnotherPhoneDesc = 'ANOTHER_PHONE_DESC',
  HouseAsc = 'HOUSE_ASC',
  HouseDesc = 'HOUSE_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  ZipAsc = 'ZIP_ASC',
  ZipDesc = 'ZIP_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  SourceOfInvitationAsc = 'SOURCE_OF_INVITATION_ASC',
  SourceOfInvitationDesc = 'SOURCE_OF_INVITATION_DESC',
  CrmIdentifierAsc = 'CRM_IDENTIFIER_ASC',
  CrmIdentifierDesc = 'CRM_IDENTIFIER_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  UuidAsc = 'UUID_ASC',
  UuidDesc = 'UUID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  OgurlAsc = 'OGURL_ASC',
  OgurlDesc = 'OGURL_DESC',
  SearchCategoryAsc = 'SEARCH_CATEGORY_ASC',
  SearchCategoryDesc = 'SEARCH_CATEGORY_DESC',
  MastheadAsc = 'MASTHEAD_ASC',
  MastheadDesc = 'MASTHEAD_DESC',
  BreadcrumbAsc = 'BREADCRUMB_ASC',
  BreadcrumbDesc = 'BREADCRUMB_DESC',
  BreadcrumbLinksAsc = 'BREADCRUMB_LINKS_ASC',
  BreadcrumbLinksDesc = 'BREADCRUMB_LINKS_DESC',
  FeaturedImgAsc = 'FEATURED_IMG_ASC',
  FeaturedImgDesc = 'FEATURED_IMG_DESC',
  LogoImgAsc = 'LOGO_IMG_ASC',
  LogoImgDesc = 'LOGO_IMG_DESC',
  FeaturedContentAsc = 'FEATURED_CONTENT_ASC',
  FeaturedContentDesc = 'FEATURED_CONTENT_DESC',
  LogoContentAsc = 'LOGO_CONTENT_ASC',
  LogoContentDesc = 'LOGO_CONTENT_DESC',
  InstAssetIdAsc = 'INST_ASSET_ID_ASC',
  InstAssetIdDesc = 'INST_ASSET_ID_DESC',
  SubAsc = 'SUB_ASC',
  SubDesc = 'SUB_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  VendorTypeAsc = 'VENDOR_TYPE_ASC',
  VendorTypeDesc = 'VENDOR_TYPE_DESC',
  JobTitleAsc = 'JOB_TITLE_ASC',
  JobTitleDesc = 'JOB_TITLE_DESC'
}

export type InstitutionProfileSearch = {
  __typename?: 'InstitutionProfileSearch';
  id: Scalars['GitlabNamespaceId'];
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  breadCrumb?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  searchCategory?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Datetime']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `InstitutionProfileSearch` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type InstitutionProfileSearchCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `breadCrumb` field. */
  breadCrumb?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyDescription` field. */
  companyDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `searchCategory` field. */
  searchCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdDate` field. */
  createdDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `InstitutionProfileSearch` object types. All fields are combined with a logical ‘and.’ */
export type InstitutionProfileSearchFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `breadCrumb` field. */
  breadCrumb?: Maybe<StringFilter>;
  /** Filter by the object’s `companyDescription` field. */
  companyDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `searchCategory` field. */
  searchCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `createdDate` field. */
  createdDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<InstitutionProfileSearchFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<InstitutionProfileSearchFilter>>;
  /** Negates the expression. */
  not?: Maybe<InstitutionProfileSearchFilter>;
};

/** A connection to a list of `InstitutionProfileSearch` values. */
export type InstitutionProfileSearchesConnection = {
  __typename?: 'InstitutionProfileSearchesConnection';
  /** A list of `InstitutionProfileSearch` objects. */
  nodes: Array<Maybe<InstitutionProfileSearch>>;
  /** A list of edges which contains the `InstitutionProfileSearch` and cursor to aid in pagination. */
  edges: Array<InstitutionProfileSearchesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `InstitutionProfileSearch` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `InstitutionProfileSearch` edge in the connection. */
export type InstitutionProfileSearchesEdge = {
  __typename?: 'InstitutionProfileSearchesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `InstitutionProfileSearch` at the end of the edge. */
  node?: Maybe<InstitutionProfileSearch>;
};

/** Methods to use when ordering `InstitutionProfileSearch`. */
export enum InstitutionProfileSearchesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  BreadCrumbAsc = 'BREAD_CRUMB_ASC',
  BreadCrumbDesc = 'BREAD_CRUMB_DESC',
  CompanyDescriptionAsc = 'COMPANY_DESCRIPTION_ASC',
  CompanyDescriptionDesc = 'COMPANY_DESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SearchCategoryAsc = 'SEARCH_CATEGORY_ASC',
  SearchCategoryDesc = 'SEARCH_CATEGORY_DESC',
  CreatedDateAsc = 'CREATED_DATE_ASC',
  CreatedDateDesc = 'CREATED_DATE_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC'
}

export type InstitutionResponse = {
  __typename?: 'InstitutionResponse';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<InstitutionDatum>;
};

export type InstitutionResponseHdo = {
  __typename?: 'InstitutionResponseHdo';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<InstitutionDatum>;
  communicationRequestId?: Maybe<Scalars['String']>;
};

export type InstitutionResult = {
  __typename?: 'InstitutionResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<NewInstitutionDatum>;
  communicationRequestId?: Maybe<Scalars['String']>;
};

/** All input for the `institutionUrlStatus` mutation. */
export type InstitutionUrlStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  monthRange?: Maybe<Scalars['String']>;
};

/** The output of our `institutionUrlStatus` mutation. */
export type InstitutionUrlStatusPayload = {
  __typename?: 'InstitutionUrlStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `InstitutionalProfileInputRecord` */
export type InstitutionalProfileInputRecordInput = {
  email?: Maybe<Scalars['String']>;
  ownerType?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  workEmail?: Maybe<Scalars['String']>;
  workPhone?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Institution` values. */
export type InstitutionsConnection = {
  __typename?: 'InstitutionsConnection';
  /** A list of `Institution` objects. */
  nodes: Array<Maybe<Institution>>;
  /** A list of edges which contains the `Institution` and cursor to aid in pagination. */
  edges: Array<InstitutionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Institution` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Institution` edge in the connection. */
export type InstitutionsEdge = {
  __typename?: 'InstitutionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Institution` at the end of the edge. */
  node?: Maybe<Institution>;
};

/** Methods to use when ordering `Institution`. */
export enum InstitutionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  InstitutionNameAsc = 'INSTITUTION_NAME_ASC',
  InstitutionNameDesc = 'INSTITUTION_NAME_DESC',
  InstitutionTypeAsc = 'INSTITUTION_TYPE_ASC',
  InstitutionTypeDesc = 'INSTITUTION_TYPE_DESC',
  InstitutionTypeIdAsc = 'INSTITUTION_TYPE_ID_ASC',
  InstitutionTypeIdDesc = 'INSTITUTION_TYPE_ID_DESC',
  InstitutionEmailAsc = 'INSTITUTION_EMAIL_ASC',
  InstitutionEmailDesc = 'INSTITUTION_EMAIL_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  MetaStatusAsc = 'META_STATUS_ASC',
  MetaStatusDesc = 'META_STATUS_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  WebsiteAsc = 'WEBSITE_ASC',
  WebsiteDesc = 'WEBSITE_DESC',
  ZipCodeAsc = 'ZIP_CODE_ASC',
  ZipCodeDesc = 'ZIP_CODE_DESC',
  FaxNumberAsc = 'FAX_NUMBER_ASC',
  FaxNumberDesc = 'FAX_NUMBER_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  DirectAddressAsc = 'DIRECT_ADDRESS_ASC',
  DirectAddressDesc = 'DIRECT_ADDRESS_DESC',
  InstitutionDescriptionAsc = 'INSTITUTION_DESCRIPTION_ASC',
  InstitutionDescriptionDesc = 'INSTITUTION_DESCRIPTION_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  RequesterEmailAsc = 'REQUESTER_EMAIL_ASC',
  RequesterEmailDesc = 'REQUESTER_EMAIL_DESC',
  RequesterNameAsc = 'REQUESTER_NAME_ASC',
  RequesterNameDesc = 'REQUESTER_NAME_DESC',
  ApproverNameAsc = 'APPROVER_NAME_ASC',
  ApproverNameDesc = 'APPROVER_NAME_DESC',
  ApproverEmailAsc = 'APPROVER_EMAIL_ASC',
  ApproverEmailDesc = 'APPROVER_EMAIL_DESC'
}

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Int']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Int']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Int']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Int']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Int']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Int']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Int']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Int']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Int']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Int']>;
};

/** A filter to be used against Int List fields. All fields are combined with a logical ‘and.’ */
export type IntListFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Contains the specified list of values. */
  contains?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Contained by the specified list of values. */
  containedBy?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Any array item is equal to the specified value. */
  anyEqualTo?: Maybe<Scalars['Int']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: Maybe<Scalars['Int']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: Maybe<Scalars['Int']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: Maybe<Scalars['Int']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: Maybe<Scalars['Int']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: Maybe<Scalars['Int']>;
};

export type Integration = {
  __typename?: 'Integration';
  id?: Maybe<Scalars['UUID']>;
  systemName?: Maybe<Scalars['String']>;
  systemCode?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  logoFileId?: Maybe<Scalars['UUID']>;
  partyIdVerification?: Maybe<Scalars['Boolean']>;
  identityVerificationPartnerUri?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['UUID']>;
  updatedBy?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  activityLog?: Maybe<Scalars['JSON']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  verificationId?: Maybe<Scalars['UUID']>;
  methodName?: Maybe<Scalars['String']>;
  verificationStatus?: Maybe<Scalars['Int']>;
  verifiedAt?: Maybe<Scalars['Datetime']>;
  expiredAt?: Maybe<Scalars['Datetime']>;
  transactionId?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['Datetime']>;
  enableOptOut?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `Integration` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type IntegrationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `systemName` field. */
  systemName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `systemCode` field. */
  systemCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoFileId` field. */
  logoFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyIdVerification` field. */
  partyIdVerification?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `identityVerificationPartnerUri` field. */
  identityVerificationPartnerUri?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `updatedBy` field. */
  updatedBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `activityLog` field. */
  activityLog?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `verificationId` field. */
  verificationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `methodName` field. */
  methodName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `verificationStatus` field. */
  verificationStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `expiredAt` field. */
  expiredAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `transactionId` field. */
  transactionId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `deletedAt` field. */
  deletedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `enableOptOut` field. */
  enableOptOut?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `Integration` object types. All fields are combined with a logical ‘and.’ */
export type IntegrationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `systemName` field. */
  systemName?: Maybe<StringFilter>;
  /** Filter by the object’s `systemCode` field. */
  systemCode?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `logoFileId` field. */
  logoFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyIdVerification` field. */
  partyIdVerification?: Maybe<BooleanFilter>;
  /** Filter by the object’s `identityVerificationPartnerUri` field. */
  identityVerificationPartnerUri?: Maybe<StringFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `updatedBy` field. */
  updatedBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `activityLog` field. */
  activityLog?: Maybe<JsonFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `verificationId` field. */
  verificationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `methodName` field. */
  methodName?: Maybe<StringFilter>;
  /** Filter by the object’s `verificationStatus` field. */
  verificationStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `expiredAt` field. */
  expiredAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `transactionId` field. */
  transactionId?: Maybe<StringFilter>;
  /** Filter by the object’s `deletedAt` field. */
  deletedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `enableOptOut` field. */
  enableOptOut?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<IntegrationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<IntegrationFilter>>;
  /** Negates the expression. */
  not?: Maybe<IntegrationFilter>;
};

/** A connection to a list of `Integration` values. */
export type IntegrationsConnection = {
  __typename?: 'IntegrationsConnection';
  /** A list of `Integration` objects. */
  nodes: Array<Maybe<Integration>>;
  /** A list of edges which contains the `Integration` and cursor to aid in pagination. */
  edges: Array<IntegrationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Integration` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Integration` edge in the connection. */
export type IntegrationsEdge = {
  __typename?: 'IntegrationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Integration` at the end of the edge. */
  node?: Maybe<Integration>;
};

/** Methods to use when ordering `Integration`. */
export enum IntegrationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SystemNameAsc = 'SYSTEM_NAME_ASC',
  SystemNameDesc = 'SYSTEM_NAME_DESC',
  SystemCodeAsc = 'SYSTEM_CODE_ASC',
  SystemCodeDesc = 'SYSTEM_CODE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  LogoFileIdAsc = 'LOGO_FILE_ID_ASC',
  LogoFileIdDesc = 'LOGO_FILE_ID_DESC',
  PartyIdVerificationAsc = 'PARTY_ID_VERIFICATION_ASC',
  PartyIdVerificationDesc = 'PARTY_ID_VERIFICATION_DESC',
  IdentityVerificationPartnerUriAsc = 'IDENTITY_VERIFICATION_PARTNER_URI_ASC',
  IdentityVerificationPartnerUriDesc = 'IDENTITY_VERIFICATION_PARTNER_URI_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC',
  UpdatedByAsc = 'UPDATED_BY_ASC',
  UpdatedByDesc = 'UPDATED_BY_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  ActivityLogAsc = 'ACTIVITY_LOG_ASC',
  ActivityLogDesc = 'ACTIVITY_LOG_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  VerificationIdAsc = 'VERIFICATION_ID_ASC',
  VerificationIdDesc = 'VERIFICATION_ID_DESC',
  MethodNameAsc = 'METHOD_NAME_ASC',
  MethodNameDesc = 'METHOD_NAME_DESC',
  VerificationStatusAsc = 'VERIFICATION_STATUS_ASC',
  VerificationStatusDesc = 'VERIFICATION_STATUS_DESC',
  VerifiedAtAsc = 'VERIFIED_AT_ASC',
  VerifiedAtDesc = 'VERIFIED_AT_DESC',
  ExpiredAtAsc = 'EXPIRED_AT_ASC',
  ExpiredAtDesc = 'EXPIRED_AT_DESC',
  TransactionIdAsc = 'TRANSACTION_ID_ASC',
  TransactionIdDesc = 'TRANSACTION_ID_DESC',
  DeletedAtAsc = 'DELETED_AT_ASC',
  DeletedAtDesc = 'DELETED_AT_DESC',
  EnableOptOutAsc = 'ENABLE_OPT_OUT_ASC',
  EnableOptOutDesc = 'ENABLE_OPT_OUT_DESC'
}

/** All input for the `inviteUser` mutation. */
export type InviteUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  serviceCategoryId?: Maybe<Scalars['Int']>;
  groupId?: Maybe<Scalars['Int']>;
  isMyOrg?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  fName?: Maybe<Scalars['String']>;
  mName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `inviteUser` mutation. */
export type InviteUserPayload = {
  __typename?: 'InviteUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<InviteUserRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `inviteUser` mutation. */
export type InviteUserRecord = {
  __typename?: 'InviteUserRecord';
  userExist?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
};

/** All input for the `inviteUserV1` mutation. */
export type InviteUserV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  serviceCategoryId?: Maybe<Scalars['Int']>;
  groupId?: Maybe<Scalars['Int']>;
  isMyOrg?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  fName?: Maybe<Scalars['String']>;
  mName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userPartyId?: Maybe<Scalars['UUID']>;
};

/** The output of our `inviteUserV1` mutation. */
export type InviteUserV1Payload = {
  __typename?: 'InviteUserV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<InviteUserV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `inviteUserV1` mutation. */
export type InviteUserV1Record = {
  __typename?: 'InviteUserV1Record';
  userExist?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
};

/** This view is used as dropdown under title in hippa form. */
export type IssueDescriptionMaster = {
  __typename?: 'IssueDescriptionMaster';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterName?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `IssueDescriptionMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type IssueDescriptionMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterName` field. */
  issueDescriptionMasterName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `IssueDescriptionMaster` object types. All fields are combined with a logical ‘and.’ */
export type IssueDescriptionMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterName` field. */
  issueDescriptionMasterName?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<IssueDescriptionMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<IssueDescriptionMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<IssueDescriptionMasterFilter>;
};

/** An input for mutations affecting `IssueDescriptionMaster` */
export type IssueDescriptionMasterInput = {
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterName?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `IssueDescriptionMaster` values. */
export type IssueDescriptionMastersConnection = {
  __typename?: 'IssueDescriptionMastersConnection';
  /** A list of `IssueDescriptionMaster` objects. */
  nodes: Array<Maybe<IssueDescriptionMaster>>;
  /** A list of edges which contains the `IssueDescriptionMaster` and cursor to aid in pagination. */
  edges: Array<IssueDescriptionMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IssueDescriptionMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `IssueDescriptionMaster` edge in the connection. */
export type IssueDescriptionMastersEdge = {
  __typename?: 'IssueDescriptionMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `IssueDescriptionMaster` at the end of the edge. */
  node?: Maybe<IssueDescriptionMaster>;
};

/** This view is used as dropdown under title in hippa form. */
export type IssueDescriptionMastersMedical = {
  __typename?: 'IssueDescriptionMastersMedical';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `IssueDescriptionMastersMedical` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type IssueDescriptionMastersMedicalCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `IssueDescriptionMastersMedical` object types. All fields are combined with a logical ‘and.’ */
export type IssueDescriptionMastersMedicalFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `priority` field. */
  priority?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<IssueDescriptionMastersMedicalFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<IssueDescriptionMastersMedicalFilter>>;
  /** Negates the expression. */
  not?: Maybe<IssueDescriptionMastersMedicalFilter>;
};

/** An input for mutations affecting `IssueDescriptionMastersMedical` */
export type IssueDescriptionMastersMedicalInput = {
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `IssueDescriptionMastersMedical` values. */
export type IssueDescriptionMastersMedicalsConnection = {
  __typename?: 'IssueDescriptionMastersMedicalsConnection';
  /** A list of `IssueDescriptionMastersMedical` objects. */
  nodes: Array<Maybe<IssueDescriptionMastersMedical>>;
  /** A list of edges which contains the `IssueDescriptionMastersMedical` and cursor to aid in pagination. */
  edges: Array<IssueDescriptionMastersMedicalsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IssueDescriptionMastersMedical` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `IssueDescriptionMastersMedical` edge in the connection. */
export type IssueDescriptionMastersMedicalsEdge = {
  __typename?: 'IssueDescriptionMastersMedicalsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `IssueDescriptionMastersMedical` at the end of the edge. */
  node?: Maybe<IssueDescriptionMastersMedical>;
};

/** Methods to use when ordering `IssueDescriptionMastersMedical`. */
export enum IssueDescriptionMastersMedicalsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC'
}

/** Methods to use when ordering `IssueDescriptionMaster`. */
export enum IssueDescriptionMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  IssueDescriptionMasterNameAsc = 'ISSUE_DESCRIPTION_MASTER_NAME_ASC',
  IssueDescriptionMasterNameDesc = 'ISSUE_DESCRIPTION_MASTER_NAME_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

/** This view is used as dropdown under title in hippa form. */
export type IssueImpactMaster = {
  __typename?: 'IssueImpactMaster';
  id?: Maybe<Scalars['UUID']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `IssueImpactMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type IssueImpactMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `IssueImpactMaster` object types. All fields are combined with a logical ‘and.’ */
export type IssueImpactMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<IssueImpactMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<IssueImpactMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<IssueImpactMasterFilter>;
};

/** An input for mutations affecting `IssueImpactMaster` */
export type IssueImpactMasterInput = {
  id?: Maybe<Scalars['UUID']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `IssueImpactMaster` values. */
export type IssueImpactMastersConnection = {
  __typename?: 'IssueImpactMastersConnection';
  /** A list of `IssueImpactMaster` objects. */
  nodes: Array<Maybe<IssueImpactMaster>>;
  /** A list of edges which contains the `IssueImpactMaster` and cursor to aid in pagination. */
  edges: Array<IssueImpactMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IssueImpactMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `IssueImpactMaster` edge in the connection. */
export type IssueImpactMastersEdge = {
  __typename?: 'IssueImpactMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `IssueImpactMaster` at the end of the edge. */
  node?: Maybe<IssueImpactMaster>;
};

/** Methods to use when ordering `IssueImpactMaster`. */
export enum IssueImpactMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}


/** A filter to be used against JSON fields. All fields are combined with a logical ‘and.’ */
export type JsonFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['JSON']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['JSON']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['JSON']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['JSON']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['JSON']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['JSON']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['JSON']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['JSON']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['JSON']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['JSON']>;
  /** Contains the specified JSON. */
  contains?: Maybe<Scalars['JSON']>;
  /** Contains the specified key. */
  containsKey?: Maybe<Scalars['String']>;
  /** Contains all of the specified keys. */
  containsAllKeys?: Maybe<Array<Scalars['String']>>;
  /** Contains any of the specified keys. */
  containsAnyKeys?: Maybe<Array<Scalars['String']>>;
  /** Contained by the specified JSON. */
  containedBy?: Maybe<Scalars['JSON']>;
};

export type JoinInstitutionDataResult = {
  __typename?: 'JoinInstitutionDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** All input for the `joinInstitution` mutation. */
export type JoinInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionId?: Maybe<Scalars['Int']>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `joinInstitution` mutation. */
export type JoinInstitutionPayload = {
  __typename?: 'JoinInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  joinInstitutionDataResult?: Maybe<JoinInstitutionDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type JourneyMetricsCurrentWeek = {
  __typename?: 'JourneyMetricsCurrentWeek';
  metricsName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  metricsDescription?: Maybe<Scalars['String']>;
  metricsCount?: Maybe<Scalars['Int']>;
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `JourneyMetricsCurrentWeek` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type JourneyMetricsCurrentWeekCondition = {
  /** Checks for equality with the object’s `metricsName` field. */
  metricsName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsDescription` field. */
  metricsDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCount` field. */
  metricsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `generatedDate` field. */
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `JourneyMetricsCurrentWeek` object types. All fields are combined with a logical ‘and.’ */
export type JourneyMetricsCurrentWeekFilter = {
  /** Filter by the object’s `metricsName` field. */
  metricsName?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsDescription` field. */
  metricsDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCount` field. */
  metricsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `generatedDate` field. */
  generatedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<JourneyMetricsCurrentWeekFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<JourneyMetricsCurrentWeekFilter>>;
  /** Negates the expression. */
  not?: Maybe<JourneyMetricsCurrentWeekFilter>;
};

/** A connection to a list of `JourneyMetricsCurrentWeek` values. */
export type JourneyMetricsCurrentWeeksConnection = {
  __typename?: 'JourneyMetricsCurrentWeeksConnection';
  /** A list of `JourneyMetricsCurrentWeek` objects. */
  nodes: Array<Maybe<JourneyMetricsCurrentWeek>>;
  /** A list of edges which contains the `JourneyMetricsCurrentWeek` and cursor to aid in pagination. */
  edges: Array<JourneyMetricsCurrentWeeksEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `JourneyMetricsCurrentWeek` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `JourneyMetricsCurrentWeek` edge in the connection. */
export type JourneyMetricsCurrentWeeksEdge = {
  __typename?: 'JourneyMetricsCurrentWeeksEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `JourneyMetricsCurrentWeek` at the end of the edge. */
  node?: Maybe<JourneyMetricsCurrentWeek>;
};

/** Methods to use when ordering `JourneyMetricsCurrentWeek`. */
export enum JourneyMetricsCurrentWeeksOrderBy {
  Natural = 'NATURAL',
  MetricsNameAsc = 'METRICS_NAME_ASC',
  MetricsNameDesc = 'METRICS_NAME_DESC',
  MetricsCategoryAsc = 'METRICS_CATEGORY_ASC',
  MetricsCategoryDesc = 'METRICS_CATEGORY_DESC',
  MetricsDescriptionAsc = 'METRICS_DESCRIPTION_ASC',
  MetricsDescriptionDesc = 'METRICS_DESCRIPTION_DESC',
  MetricsCountAsc = 'METRICS_COUNT_ASC',
  MetricsCountDesc = 'METRICS_COUNT_DESC',
  GeneratedDateAsc = 'GENERATED_DATE_ASC',
  GeneratedDateDesc = 'GENERATED_DATE_DESC'
}

/** User credentials Postgraphile will use to create JWT for API authentication */
export type JwtTokenPostgraphile = {
  __typename?: 'JwtTokenPostgraphile';
  role?: Maybe<Scalars['String']>;
  exp?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  username?: Maybe<Scalars['String']>;
};

/** All input for the `keycloakPartySynchronizationV1` mutation. */
export type KeycloakPartySynchronizationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `keycloakPartySynchronizationV1` mutation. */
export type KeycloakPartySynchronizationV1Payload = {
  __typename?: 'KeycloakPartySynchronizationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type KlasClaimsManagementOffering = {
  __typename?: 'KlasClaimsManagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `KlasClaimsManagementOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type KlasClaimsManagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `KlasClaimsManagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type KlasClaimsManagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<KlasClaimsManagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<KlasClaimsManagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<KlasClaimsManagementOfferingFilter>;
};

/** A connection to a list of `KlasClaimsManagementOffering` values. */
export type KlasClaimsManagementOfferingsConnection = {
  __typename?: 'KlasClaimsManagementOfferingsConnection';
  /** A list of `KlasClaimsManagementOffering` objects. */
  nodes: Array<Maybe<KlasClaimsManagementOffering>>;
  /** A list of edges which contains the `KlasClaimsManagementOffering` and cursor to aid in pagination. */
  edges: Array<KlasClaimsManagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `KlasClaimsManagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `KlasClaimsManagementOffering` edge in the connection. */
export type KlasClaimsManagementOfferingsEdge = {
  __typename?: 'KlasClaimsManagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `KlasClaimsManagementOffering` at the end of the edge. */
  node?: Maybe<KlasClaimsManagementOffering>;
};

/** Methods to use when ordering `KlasClaimsManagementOffering`. */
export enum KlasClaimsManagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type KlasHomeHealthOffering = {
  __typename?: 'KlasHomeHealthOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `KlasHomeHealthOffering` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type KlasHomeHealthOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `KlasHomeHealthOffering` object types. All fields are combined with a logical ‘and.’ */
export type KlasHomeHealthOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<KlasHomeHealthOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<KlasHomeHealthOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<KlasHomeHealthOfferingFilter>;
};

/** A connection to a list of `KlasHomeHealthOffering` values. */
export type KlasHomeHealthOfferingsConnection = {
  __typename?: 'KlasHomeHealthOfferingsConnection';
  /** A list of `KlasHomeHealthOffering` objects. */
  nodes: Array<Maybe<KlasHomeHealthOffering>>;
  /** A list of edges which contains the `KlasHomeHealthOffering` and cursor to aid in pagination. */
  edges: Array<KlasHomeHealthOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `KlasHomeHealthOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `KlasHomeHealthOffering` edge in the connection. */
export type KlasHomeHealthOfferingsEdge = {
  __typename?: 'KlasHomeHealthOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `KlasHomeHealthOffering` at the end of the edge. */
  node?: Maybe<KlasHomeHealthOffering>;
};

/** Methods to use when ordering `KlasHomeHealthOffering`. */
export enum KlasHomeHealthOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type KlasPatientPortalsOffering = {
  __typename?: 'KlasPatientPortalsOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `KlasPatientPortalsOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type KlasPatientPortalsOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `KlasPatientPortalsOffering` object types. All fields are combined with a logical ‘and.’ */
export type KlasPatientPortalsOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<KlasPatientPortalsOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<KlasPatientPortalsOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<KlasPatientPortalsOfferingFilter>;
};

/** A connection to a list of `KlasPatientPortalsOffering` values. */
export type KlasPatientPortalsOfferingsConnection = {
  __typename?: 'KlasPatientPortalsOfferingsConnection';
  /** A list of `KlasPatientPortalsOffering` objects. */
  nodes: Array<Maybe<KlasPatientPortalsOffering>>;
  /** A list of edges which contains the `KlasPatientPortalsOffering` and cursor to aid in pagination. */
  edges: Array<KlasPatientPortalsOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `KlasPatientPortalsOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `KlasPatientPortalsOffering` edge in the connection. */
export type KlasPatientPortalsOfferingsEdge = {
  __typename?: 'KlasPatientPortalsOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `KlasPatientPortalsOffering` at the end of the edge. */
  node?: Maybe<KlasPatientPortalsOffering>;
};

/** Methods to use when ordering `KlasPatientPortalsOffering`. */
export enum KlasPatientPortalsOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type KlasPracticeManagementOffering = {
  __typename?: 'KlasPracticeManagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `KlasPracticeManagementOffering` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type KlasPracticeManagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `KlasPracticeManagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type KlasPracticeManagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<KlasPracticeManagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<KlasPracticeManagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<KlasPracticeManagementOfferingFilter>;
};

/** A connection to a list of `KlasPracticeManagementOffering` values. */
export type KlasPracticeManagementOfferingsConnection = {
  __typename?: 'KlasPracticeManagementOfferingsConnection';
  /** A list of `KlasPracticeManagementOffering` objects. */
  nodes: Array<Maybe<KlasPracticeManagementOffering>>;
  /** A list of edges which contains the `KlasPracticeManagementOffering` and cursor to aid in pagination. */
  edges: Array<KlasPracticeManagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `KlasPracticeManagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `KlasPracticeManagementOffering` edge in the connection. */
export type KlasPracticeManagementOfferingsEdge = {
  __typename?: 'KlasPracticeManagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `KlasPracticeManagementOffering` at the end of the edge. */
  node?: Maybe<KlasPracticeManagementOffering>;
};

/** Methods to use when ordering `KlasPracticeManagementOffering`. */
export enum KlasPracticeManagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type KlasRemotePatientMonitoringOffering = {
  __typename?: 'KlasRemotePatientMonitoringOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `KlasRemotePatientMonitoringOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type KlasRemotePatientMonitoringOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `KlasRemotePatientMonitoringOffering` object types. All fields are combined with a logical ‘and.’ */
export type KlasRemotePatientMonitoringOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<KlasRemotePatientMonitoringOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<KlasRemotePatientMonitoringOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<KlasRemotePatientMonitoringOfferingFilter>;
};

/** A connection to a list of `KlasRemotePatientMonitoringOffering` values. */
export type KlasRemotePatientMonitoringOfferingsConnection = {
  __typename?: 'KlasRemotePatientMonitoringOfferingsConnection';
  /** A list of `KlasRemotePatientMonitoringOffering` objects. */
  nodes: Array<Maybe<KlasRemotePatientMonitoringOffering>>;
  /** A list of edges which contains the `KlasRemotePatientMonitoringOffering` and cursor to aid in pagination. */
  edges: Array<KlasRemotePatientMonitoringOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `KlasRemotePatientMonitoringOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `KlasRemotePatientMonitoringOffering` edge in the connection. */
export type KlasRemotePatientMonitoringOfferingsEdge = {
  __typename?: 'KlasRemotePatientMonitoringOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `KlasRemotePatientMonitoringOffering` at the end of the edge. */
  node?: Maybe<KlasRemotePatientMonitoringOffering>;
};

/** Methods to use when ordering `KlasRemotePatientMonitoringOffering`. */
export enum KlasRemotePatientMonitoringOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

/** An input for mutations affecting `LeadInputRecord` */
export type LeadInputRecordInput = {
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  community?: Maybe<Scalars['String']>;
  projectname?: Maybe<Scalars['String']>;
  ideadevelopedfor?: Maybe<Scalars['String']>;
  ideacategory?: Maybe<Scalars['String']>;
  ideaduration?: Maybe<Scalars['String']>;
  ideaemail?: Maybe<Scalars['String']>;
  topics?: Maybe<Array<Maybe<CategoryInputRecordInput>>>;
  communityid?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `LeadInputVul` */
export type LeadInputVulInput = {
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  detaildesc?: Maybe<Scalars['String']>;
  addinfo?: Maybe<Scalars['String']>;
  sharedmail?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type LoggedPersonId = {
  __typename?: 'LoggedPersonId';
  userId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `LoggedPersonId` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type LoggedPersonIdCondition = {
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `LoggedPersonId` object types. All fields are combined with a logical ‘and.’ */
export type LoggedPersonIdFilter = {
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<LoggedPersonIdFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<LoggedPersonIdFilter>>;
  /** Negates the expression. */
  not?: Maybe<LoggedPersonIdFilter>;
};

/** A connection to a list of `LoggedPersonId` values. */
export type LoggedPersonIdsConnection = {
  __typename?: 'LoggedPersonIdsConnection';
  /** A list of `LoggedPersonId` objects. */
  nodes: Array<Maybe<LoggedPersonId>>;
  /** A list of edges which contains the `LoggedPersonId` and cursor to aid in pagination. */
  edges: Array<LoggedPersonIdsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `LoggedPersonId` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `LoggedPersonId` edge in the connection. */
export type LoggedPersonIdsEdge = {
  __typename?: 'LoggedPersonIdsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `LoggedPersonId` at the end of the edge. */
  node?: Maybe<LoggedPersonId>;
};

/** Methods to use when ordering `LoggedPersonId`. */
export enum LoggedPersonIdsOrderBy {
  Natural = 'NATURAL',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** All input for the `loggedUsersList` mutation. */
export type LoggedUsersListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  session?: Maybe<Scalars['UUID']>;
  ip?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
};

/** The output of our `loggedUsersList` mutation. */
export type LoggedUsersListPayload = {
  __typename?: 'LoggedUsersListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `loginUserSyncV1` mutation. */
export type LoginUserSyncV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `loginUserSyncV1` mutation. */
export type LoginUserSyncV1Payload = {
  __typename?: 'LoginUserSyncV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fPartyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `manageExternalSystemId` mutation. */
export type ManageExternalSystemIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  esi?: Maybe<Scalars['String']>;
};

/** The output of our `manageExternalSystemId` mutation. */
export type ManageExternalSystemIdPayload = {
  __typename?: 'ManageExternalSystemIdPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type MaritalStatusMasterV1 = {
  __typename?: 'MaritalStatusMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MaritalStatusMasterV1` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type MaritalStatusMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MaritalStatusMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type MaritalStatusMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MaritalStatusMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MaritalStatusMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<MaritalStatusMasterV1Filter>;
};

/** An input for mutations affecting `MaritalStatusMasterV1` */
export type MaritalStatusMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `MaritalStatusMasterV1` values. */
export type MaritalStatusMasterV1sConnection = {
  __typename?: 'MaritalStatusMasterV1sConnection';
  /** A list of `MaritalStatusMasterV1` objects. */
  nodes: Array<Maybe<MaritalStatusMasterV1>>;
  /** A list of edges which contains the `MaritalStatusMasterV1` and cursor to aid in pagination. */
  edges: Array<MaritalStatusMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MaritalStatusMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MaritalStatusMasterV1` edge in the connection. */
export type MaritalStatusMasterV1sEdge = {
  __typename?: 'MaritalStatusMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MaritalStatusMasterV1` at the end of the edge. */
  node?: Maybe<MaritalStatusMasterV1>;
};

/** Methods to use when ordering `MaritalStatusMasterV1`. */
export enum MaritalStatusMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type MediaType = {
  __typename?: 'MediaType';
  mimeType?: Maybe<Scalars['String']>;
  fileExtn?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MediaType` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type MediaTypeCondition = {
  /** Checks for equality with the object’s `mimeType` field. */
  mimeType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fileExtn` field. */
  fileExtn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `label` field. */
  label?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MediaType` object types. All fields are combined with a logical ‘and.’ */
export type MediaTypeFilter = {
  /** Filter by the object’s `mimeType` field. */
  mimeType?: Maybe<StringFilter>;
  /** Filter by the object’s `fileExtn` field. */
  fileExtn?: Maybe<StringFilter>;
  /** Filter by the object’s `label` field. */
  label?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MediaTypeFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MediaTypeFilter>>;
  /** Negates the expression. */
  not?: Maybe<MediaTypeFilter>;
};

/** An input for mutations affecting `MediaType` */
export type MediaTypeInput = {
  mimeType?: Maybe<Scalars['String']>;
  fileExtn?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

/** Represents an update to a `MediaType`. Fields that are set will be updated. */
export type MediaTypePatch = {
  mimeType?: Maybe<Scalars['String']>;
  fileExtn?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

/** A connection to a list of `MediaType` values. */
export type MediaTypesConnection = {
  __typename?: 'MediaTypesConnection';
  /** A list of `MediaType` objects. */
  nodes: Array<Maybe<MediaType>>;
  /** A list of edges which contains the `MediaType` and cursor to aid in pagination. */
  edges: Array<MediaTypesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MediaType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MediaType` edge in the connection. */
export type MediaTypesEdge = {
  __typename?: 'MediaTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MediaType` at the end of the edge. */
  node?: Maybe<MediaType>;
};

/** Methods to use when ordering `MediaType`. */
export enum MediaTypesOrderBy {
  Natural = 'NATURAL',
  MimeTypeAsc = 'MIME_TYPE_ASC',
  MimeTypeDesc = 'MIME_TYPE_DESC',
  FileExtnAsc = 'FILE_EXTN_ASC',
  FileExtnDesc = 'FILE_EXTN_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC'
}

export type MedicalAddendumInsuranceRequest = {
  __typename?: 'MedicalAddendumInsuranceRequest';
  requestId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  requester?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `MedicalAddendumInsuranceRequest` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type MedicalAddendumInsuranceRequestCondition = {
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `MedicalAddendumInsuranceRequest` object types. All fields are combined with a logical ‘and.’ */
export type MedicalAddendumInsuranceRequestFilter = {
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedicalAddendumInsuranceRequestFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedicalAddendumInsuranceRequestFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedicalAddendumInsuranceRequestFilter>;
};

/** A connection to a list of `MedicalAddendumInsuranceRequest` values. */
export type MedicalAddendumInsuranceRequestsConnection = {
  __typename?: 'MedicalAddendumInsuranceRequestsConnection';
  /** A list of `MedicalAddendumInsuranceRequest` objects. */
  nodes: Array<Maybe<MedicalAddendumInsuranceRequest>>;
  /** A list of edges which contains the `MedicalAddendumInsuranceRequest` and cursor to aid in pagination. */
  edges: Array<MedicalAddendumInsuranceRequestsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedicalAddendumInsuranceRequest` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedicalAddendumInsuranceRequest` edge in the connection. */
export type MedicalAddendumInsuranceRequestsEdge = {
  __typename?: 'MedicalAddendumInsuranceRequestsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedicalAddendumInsuranceRequest` at the end of the edge. */
  node?: Maybe<MedicalAddendumInsuranceRequest>;
};

/** Methods to use when ordering `MedicalAddendumInsuranceRequest`. */
export enum MedicalAddendumInsuranceRequestsOrderBy {
  Natural = 'NATURAL',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC'
}

export type MedicalGroup = {
  __typename?: 'MedicalGroup';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedicalGroup` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedicalGroupCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MedicalGroup` object types. All fields are combined with a logical ‘and.’ */
export type MedicalGroupFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedicalGroupFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedicalGroupFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedicalGroupFilter>;
};

/** An input for mutations affecting `MedicalGroup` */
export type MedicalGroupInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `MedicalGroup` values. */
export type MedicalGroupsConnection = {
  __typename?: 'MedicalGroupsConnection';
  /** A list of `MedicalGroup` objects. */
  nodes: Array<Maybe<MedicalGroup>>;
  /** A list of edges which contains the `MedicalGroup` and cursor to aid in pagination. */
  edges: Array<MedicalGroupsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedicalGroup` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedicalGroup` edge in the connection. */
export type MedicalGroupsEdge = {
  __typename?: 'MedicalGroupsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedicalGroup` at the end of the edge. */
  node?: Maybe<MedicalGroup>;
};

/** Methods to use when ordering `MedicalGroup`. */
export enum MedicalGroupsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type MedigyChronicCareManagementOffering = {
  __typename?: 'MedigyChronicCareManagementOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedigyChronicCareManagementOffering` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type MedigyChronicCareManagementOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MedigyChronicCareManagementOffering` object types. All fields are combined with a logical ‘and.’ */
export type MedigyChronicCareManagementOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyChronicCareManagementOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyChronicCareManagementOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyChronicCareManagementOfferingFilter>;
};

/** A connection to a list of `MedigyChronicCareManagementOffering` values. */
export type MedigyChronicCareManagementOfferingsConnection = {
  __typename?: 'MedigyChronicCareManagementOfferingsConnection';
  /** A list of `MedigyChronicCareManagementOffering` objects. */
  nodes: Array<Maybe<MedigyChronicCareManagementOffering>>;
  /** A list of edges which contains the `MedigyChronicCareManagementOffering` and cursor to aid in pagination. */
  edges: Array<MedigyChronicCareManagementOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyChronicCareManagementOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyChronicCareManagementOffering` edge in the connection. */
export type MedigyChronicCareManagementOfferingsEdge = {
  __typename?: 'MedigyChronicCareManagementOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyChronicCareManagementOffering` at the end of the edge. */
  node?: Maybe<MedigyChronicCareManagementOffering>;
};

/** Methods to use when ordering `MedigyChronicCareManagementOffering`. */
export enum MedigyChronicCareManagementOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

/** All input for the `medigyEstablishSession` mutation. */
export type MedigyEstablishSessionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionInput?: Maybe<EstablishSessionInputRecordInput>;
};

/** The output of our `medigyEstablishSession` mutation. */
export type MedigyEstablishSessionPayload = {
  __typename?: 'MedigyEstablishSessionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionResult?: Maybe<EstablishSessionResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `medigyHealthCheck` mutation. */
export type MedigyHealthCheckInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `medigyHealthCheck` mutation. */
export type MedigyHealthCheckPayload = {
  __typename?: 'MedigyHealthCheckPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  httpResponse?: Maybe<HttpResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `medigyIamEstablishSession` mutation. */
export type MedigyIamEstablishSessionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionInput?: Maybe<EstablishSessionInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `medigyIamEstablishSession` mutation. */
export type MedigyIamEstablishSessionPayload = {
  __typename?: 'MedigyIamEstablishSessionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionResult?: Maybe<EstablishSessionResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `medigyIamSsoEstablishSession` mutation. */
export type MedigyIamSsoEstablishSessionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionInput?: Maybe<EstablishSessionSsoInputRecordInput>;
  medigyUser?: Maybe<Scalars['Boolean']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `medigyIamSsoEstablishSession` mutation. */
export type MedigyIamSsoEstablishSessionPayload = {
  __typename?: 'MedigyIamSsoEstablishSessionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  establishSessionResult?: Maybe<EstablishSessionResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `medigyIamSsoSignup` mutation. */
export type MedigyIamSsoSignupInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  medigySignupSsoInput?: Maybe<MedigySignupSsoInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `medigyIamSsoSignup` mutation. */
export type MedigyIamSsoSignupPayload = {
  __typename?: 'MedigyIamSsoSignupPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signupUserIamResult?: Maybe<SignupUserIamResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type MedigyInstitution = {
  __typename?: 'MedigyInstitution';
  institutionId?: Maybe<Scalars['Int']>;
  institutionName?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  institutionCreatedDate?: Maybe<Scalars['Datetime']>;
  institutionLastUpdatedDate?: Maybe<Scalars['Datetime']>;
  institutionProfileProjectId?: Maybe<Scalars['Int']>;
  institutionAuthorId?: Maybe<Scalars['Int']>;
  institutionAuthorName?: Maybe<Scalars['String']>;
  institutionAuthorUserName?: Maybe<Scalars['String']>;
  institutionAuthorStatus?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedigyInstitution` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedigyInstitutionCondition = {
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionName` field. */
  institutionName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionCreatedDate` field. */
  institutionCreatedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `institutionLastUpdatedDate` field. */
  institutionLastUpdatedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `institutionProfileProjectId` field. */
  institutionProfileProjectId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionAuthorId` field. */
  institutionAuthorId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionAuthorName` field. */
  institutionAuthorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionAuthorUserName` field. */
  institutionAuthorUserName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionAuthorStatus` field. */
  institutionAuthorStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MedigyInstitution` object types. All fields are combined with a logical ‘and.’ */
export type MedigyInstitutionFilter = {
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionName` field. */
  institutionName?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionCreatedDate` field. */
  institutionCreatedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `institutionLastUpdatedDate` field. */
  institutionLastUpdatedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `institutionProfileProjectId` field. */
  institutionProfileProjectId?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionAuthorId` field. */
  institutionAuthorId?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionAuthorName` field. */
  institutionAuthorName?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionAuthorUserName` field. */
  institutionAuthorUserName?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionAuthorStatus` field. */
  institutionAuthorStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyInstitutionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyInstitutionFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyInstitutionFilter>;
};

export type MedigyInstitutionImage = {
  __typename?: 'MedigyInstitutionImage';
  namespaceId?: Maybe<Scalars['Int']>;
  glProjectId?: Maybe<Scalars['Int']>;
  featuredImg?: Maybe<Scalars['String']>;
  logoImg?: Maybe<Scalars['String']>;
  featuredContent: Scalars['ImageContentBytea'];
  logoContent: Scalars['ImageContentBytea'];
};

/**
 * A condition to be used against `MedigyInstitutionImage` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type MedigyInstitutionImageCondition = {
  /** Checks for equality with the object’s `namespaceId` field. */
  namespaceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `glProjectId` field. */
  glProjectId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `featuredImg` field. */
  featuredImg?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImg` field. */
  logoImg?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredContent` field. */
  featuredContent?: Maybe<Scalars['ImageContentBytea']>;
  /** Checks for equality with the object’s `logoContent` field. */
  logoContent?: Maybe<Scalars['ImageContentBytea']>;
};

/** A filter to be used against `MedigyInstitutionImage` object types. All fields are combined with a logical ‘and.’ */
export type MedigyInstitutionImageFilter = {
  /** Filter by the object’s `namespaceId` field. */
  namespaceId?: Maybe<IntFilter>;
  /** Filter by the object’s `glProjectId` field. */
  glProjectId?: Maybe<IntFilter>;
  /** Filter by the object’s `featuredImg` field. */
  featuredImg?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImg` field. */
  logoImg?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredContent` field. */
  featuredContent?: Maybe<ImageContentByteaFilter>;
  /** Filter by the object’s `logoContent` field. */
  logoContent?: Maybe<ImageContentByteaFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyInstitutionImageFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyInstitutionImageFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyInstitutionImageFilter>;
};

/** A connection to a list of `MedigyInstitutionImage` values. */
export type MedigyInstitutionImagesConnection = {
  __typename?: 'MedigyInstitutionImagesConnection';
  /** A list of `MedigyInstitutionImage` objects. */
  nodes: Array<Maybe<MedigyInstitutionImage>>;
  /** A list of edges which contains the `MedigyInstitutionImage` and cursor to aid in pagination. */
  edges: Array<MedigyInstitutionImagesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyInstitutionImage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyInstitutionImage` edge in the connection. */
export type MedigyInstitutionImagesEdge = {
  __typename?: 'MedigyInstitutionImagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyInstitutionImage` at the end of the edge. */
  node?: Maybe<MedigyInstitutionImage>;
};

/** Methods to use when ordering `MedigyInstitutionImage`. */
export enum MedigyInstitutionImagesOrderBy {
  Natural = 'NATURAL',
  NamespaceIdAsc = 'NAMESPACE_ID_ASC',
  NamespaceIdDesc = 'NAMESPACE_ID_DESC',
  GlProjectIdAsc = 'GL_PROJECT_ID_ASC',
  GlProjectIdDesc = 'GL_PROJECT_ID_DESC',
  FeaturedImgAsc = 'FEATURED_IMG_ASC',
  FeaturedImgDesc = 'FEATURED_IMG_DESC',
  LogoImgAsc = 'LOGO_IMG_ASC',
  LogoImgDesc = 'LOGO_IMG_DESC',
  FeaturedContentAsc = 'FEATURED_CONTENT_ASC',
  FeaturedContentDesc = 'FEATURED_CONTENT_DESC',
  LogoContentAsc = 'LOGO_CONTENT_ASC',
  LogoContentDesc = 'LOGO_CONTENT_DESC'
}

/** A connection to a list of `MedigyInstitution` values. */
export type MedigyInstitutionsConnection = {
  __typename?: 'MedigyInstitutionsConnection';
  /** A list of `MedigyInstitution` objects. */
  nodes: Array<Maybe<MedigyInstitution>>;
  /** A list of edges which contains the `MedigyInstitution` and cursor to aid in pagination. */
  edges: Array<MedigyInstitutionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyInstitution` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyInstitution` edge in the connection. */
export type MedigyInstitutionsEdge = {
  __typename?: 'MedigyInstitutionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyInstitution` at the end of the edge. */
  node?: Maybe<MedigyInstitution>;
};

/** Methods to use when ordering `MedigyInstitution`. */
export enum MedigyInstitutionsOrderBy {
  Natural = 'NATURAL',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  InstitutionNameAsc = 'INSTITUTION_NAME_ASC',
  InstitutionNameDesc = 'INSTITUTION_NAME_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  InstitutionCreatedDateAsc = 'INSTITUTION_CREATED_DATE_ASC',
  InstitutionCreatedDateDesc = 'INSTITUTION_CREATED_DATE_DESC',
  InstitutionLastUpdatedDateAsc = 'INSTITUTION_LAST_UPDATED_DATE_ASC',
  InstitutionLastUpdatedDateDesc = 'INSTITUTION_LAST_UPDATED_DATE_DESC',
  InstitutionProfileProjectIdAsc = 'INSTITUTION_PROFILE_PROJECT_ID_ASC',
  InstitutionProfileProjectIdDesc = 'INSTITUTION_PROFILE_PROJECT_ID_DESC',
  InstitutionAuthorIdAsc = 'INSTITUTION_AUTHOR_ID_ASC',
  InstitutionAuthorIdDesc = 'INSTITUTION_AUTHOR_ID_DESC',
  InstitutionAuthorNameAsc = 'INSTITUTION_AUTHOR_NAME_ASC',
  InstitutionAuthorNameDesc = 'INSTITUTION_AUTHOR_NAME_DESC',
  InstitutionAuthorUserNameAsc = 'INSTITUTION_AUTHOR_USER_NAME_ASC',
  InstitutionAuthorUserNameDesc = 'INSTITUTION_AUTHOR_USER_NAME_DESC',
  InstitutionAuthorStatusAsc = 'INSTITUTION_AUTHOR_STATUS_ASC',
  InstitutionAuthorStatusDesc = 'INSTITUTION_AUTHOR_STATUS_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC'
}

export type MedigyMember = {
  __typename?: 'MedigyMember';
  id?: Maybe<Scalars['Int']>;
  accessLevel?: Maybe<Scalars['Int']>;
  sourceId?: Maybe<Scalars['Int']>;
  sourceType?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  notificationLevel?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  createdById?: Maybe<Scalars['Int']>;
  inviteEmail?: Maybe<Scalars['String']>;
  inviteToken?: Maybe<Scalars['String']>;
  inviteAcceptedAt?: Maybe<Scalars['Datetime']>;
  requestedAt?: Maybe<Scalars['Datetime']>;
  expiresAt?: Maybe<Scalars['Date']>;
  ldap?: Maybe<Scalars['Boolean']>;
  override?: Maybe<Scalars['Boolean']>;
  inviteEmailSuccess?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['Int']>;
  memberNamespaceId?: Maybe<Scalars['BigInt']>;
  memberRoleId?: Maybe<Scalars['BigInt']>;
  expiryNotifiedAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `MedigyMember` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedigyMemberCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `accessLevel` field. */
  accessLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceId` field. */
  sourceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceType` field. */
  sourceType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `notificationLevel` field. */
  notificationLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `createdById` field. */
  createdById?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `inviteEmail` field. */
  inviteEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteToken` field. */
  inviteToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteAcceptedAt` field. */
  inviteAcceptedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requestedAt` field. */
  requestedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `expiresAt` field. */
  expiresAt?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `ldap` field. */
  ldap?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `override` field. */
  override?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `inviteEmailSuccess` field. */
  inviteEmailSuccess?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `memberNamespaceId` field. */
  memberNamespaceId?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `memberRoleId` field. */
  memberRoleId?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `expiryNotifiedAt` field. */
  expiryNotifiedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `MedigyMember` object types. All fields are combined with a logical ‘and.’ */
export type MedigyMemberFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `accessLevel` field. */
  accessLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceId` field. */
  sourceId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceType` field. */
  sourceType?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `notificationLevel` field. */
  notificationLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `createdById` field. */
  createdById?: Maybe<IntFilter>;
  /** Filter by the object’s `inviteEmail` field. */
  inviteEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteToken` field. */
  inviteToken?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteAcceptedAt` field. */
  inviteAcceptedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requestedAt` field. */
  requestedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `expiresAt` field. */
  expiresAt?: Maybe<DateFilter>;
  /** Filter by the object’s `ldap` field. */
  ldap?: Maybe<BooleanFilter>;
  /** Filter by the object’s `override` field. */
  override?: Maybe<BooleanFilter>;
  /** Filter by the object’s `inviteEmailSuccess` field. */
  inviteEmailSuccess?: Maybe<BooleanFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<IntFilter>;
  /** Filter by the object’s `memberNamespaceId` field. */
  memberNamespaceId?: Maybe<BigIntFilter>;
  /** Filter by the object’s `memberRoleId` field. */
  memberRoleId?: Maybe<BigIntFilter>;
  /** Filter by the object’s `expiryNotifiedAt` field. */
  expiryNotifiedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyMemberFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyMemberFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyMemberFilter>;
};

/** An input for mutations affecting `MedigyMember` */
export type MedigyMemberInput = {
  id?: Maybe<Scalars['Int']>;
  accessLevel?: Maybe<Scalars['Int']>;
  sourceId?: Maybe<Scalars['Int']>;
  sourceType?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  notificationLevel?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  createdById?: Maybe<Scalars['Int']>;
  inviteEmail?: Maybe<Scalars['String']>;
  inviteToken?: Maybe<Scalars['String']>;
  inviteAcceptedAt?: Maybe<Scalars['Datetime']>;
  requestedAt?: Maybe<Scalars['Datetime']>;
  expiresAt?: Maybe<Scalars['Date']>;
  ldap?: Maybe<Scalars['Boolean']>;
  override?: Maybe<Scalars['Boolean']>;
  inviteEmailSuccess?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['Int']>;
  memberNamespaceId?: Maybe<Scalars['BigInt']>;
  memberRoleId?: Maybe<Scalars['BigInt']>;
  expiryNotifiedAt?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `MedigyMember` values. */
export type MedigyMembersConnection = {
  __typename?: 'MedigyMembersConnection';
  /** A list of `MedigyMember` objects. */
  nodes: Array<Maybe<MedigyMember>>;
  /** A list of edges which contains the `MedigyMember` and cursor to aid in pagination. */
  edges: Array<MedigyMembersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyMember` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyMember` edge in the connection. */
export type MedigyMembersEdge = {
  __typename?: 'MedigyMembersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyMember` at the end of the edge. */
  node?: Maybe<MedigyMember>;
};

/** Methods to use when ordering `MedigyMember`. */
export enum MedigyMembersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AccessLevelAsc = 'ACCESS_LEVEL_ASC',
  AccessLevelDesc = 'ACCESS_LEVEL_DESC',
  SourceIdAsc = 'SOURCE_ID_ASC',
  SourceIdDesc = 'SOURCE_ID_DESC',
  SourceTypeAsc = 'SOURCE_TYPE_ASC',
  SourceTypeDesc = 'SOURCE_TYPE_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  NotificationLevelAsc = 'NOTIFICATION_LEVEL_ASC',
  NotificationLevelDesc = 'NOTIFICATION_LEVEL_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  CreatedByIdAsc = 'CREATED_BY_ID_ASC',
  CreatedByIdDesc = 'CREATED_BY_ID_DESC',
  InviteEmailAsc = 'INVITE_EMAIL_ASC',
  InviteEmailDesc = 'INVITE_EMAIL_DESC',
  InviteTokenAsc = 'INVITE_TOKEN_ASC',
  InviteTokenDesc = 'INVITE_TOKEN_DESC',
  InviteAcceptedAtAsc = 'INVITE_ACCEPTED_AT_ASC',
  InviteAcceptedAtDesc = 'INVITE_ACCEPTED_AT_DESC',
  RequestedAtAsc = 'REQUESTED_AT_ASC',
  RequestedAtDesc = 'REQUESTED_AT_DESC',
  ExpiresAtAsc = 'EXPIRES_AT_ASC',
  ExpiresAtDesc = 'EXPIRES_AT_DESC',
  LdapAsc = 'LDAP_ASC',
  LdapDesc = 'LDAP_DESC',
  OverrideAsc = 'OVERRIDE_ASC',
  OverrideDesc = 'OVERRIDE_DESC',
  InviteEmailSuccessAsc = 'INVITE_EMAIL_SUCCESS_ASC',
  InviteEmailSuccessDesc = 'INVITE_EMAIL_SUCCESS_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  MemberNamespaceIdAsc = 'MEMBER_NAMESPACE_ID_ASC',
  MemberNamespaceIdDesc = 'MEMBER_NAMESPACE_ID_DESC',
  MemberRoleIdAsc = 'MEMBER_ROLE_ID_ASC',
  MemberRoleIdDesc = 'MEMBER_ROLE_ID_DESC',
  ExpiryNotifiedAtAsc = 'EXPIRY_NOTIFIED_AT_ASC',
  ExpiryNotifiedAtDesc = 'EXPIRY_NOTIFIED_AT_DESC'
}

export type MedigyMembership = {
  __typename?: 'MedigyMembership';
  id?: Maybe<Scalars['Int']>;
  path?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type MedigyNamespace = {
  __typename?: 'MedigyNamespace';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  membershipLock?: Maybe<Scalars['Boolean']>;
  shareWithGroupLock?: Maybe<Scalars['Boolean']>;
  visibilityLevel?: Maybe<Scalars['Int']>;
  requestAccessEnabled?: Maybe<Scalars['Boolean']>;
  ldapSyncStatus?: Maybe<Scalars['String']>;
  ldapSyncError?: Maybe<Scalars['String']>;
  ldapSyncLastUpdateAt?: Maybe<Scalars['Datetime']>;
  ldapSyncLastSuccessfulUpdateAt?: Maybe<Scalars['Datetime']>;
  ldapSyncLastSyncAt?: Maybe<Scalars['Datetime']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  lfsEnabled?: Maybe<Scalars['Boolean']>;
  parentId?: Maybe<Scalars['Int']>;
  sharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  repositorySizeLimit?: Maybe<Scalars['BigInt']>;
  requireTwoFactorAuthentication?: Maybe<Scalars['Boolean']>;
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  cachedMarkdownVersion?: Maybe<Scalars['Int']>;
  projectCreationLevel?: Maybe<Scalars['Int']>;
  runnersToken?: Maybe<Scalars['String']>;
  fileTemplateProjectId?: Maybe<Scalars['Int']>;
  samlDiscoveryToken?: Maybe<Scalars['String']>;
  runnersTokenEncrypted?: Maybe<Scalars['String']>;
  customProjectTemplatesGroupId?: Maybe<Scalars['Int']>;
  autoDevopsEnabled?: Maybe<Scalars['Boolean']>;
  extraSharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  lastCiMinutesNotificationAt?: Maybe<Scalars['Datetime']>;
  lastCiMinutesUsageNotificationLevel?: Maybe<Scalars['Int']>;
  subgroupCreationLevel?: Maybe<Scalars['Int']>;
  emailsDisabled?: Maybe<Scalars['Boolean']>;
  maxPagesSize?: Maybe<Scalars['Int']>;
  maxArtifactsSize?: Maybe<Scalars['Int']>;
  mentionsDisabled?: Maybe<Scalars['Boolean']>;
  defaultBranchProtection?: Maybe<Scalars['Int']>;
  unlockMembershipToLdap?: Maybe<Scalars['Boolean']>;
  maxPersonalAccessTokenLifetime?: Maybe<Scalars['Int']>;
  pushRuleId?: Maybe<Scalars['BigInt']>;
  sharedRunnersEnabled?: Maybe<Scalars['Boolean']>;
  allowDescendantsOverrideDisabledSharedRunners?: Maybe<Scalars['Boolean']>;
  traversalIds?: Maybe<Array<Maybe<Scalars['Int']>>>;
  organizationId?: Maybe<Scalars['BigInt']>;
};

/**
 * A condition to be used against `MedigyNamespace` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedigyNamespaceCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `path` field. */
  path?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ownerId` field. */
  ownerId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `avatar` field. */
  avatar?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `membershipLock` field. */
  membershipLock?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `shareWithGroupLock` field. */
  shareWithGroupLock?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `visibilityLevel` field. */
  visibilityLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestAccessEnabled` field. */
  requestAccessEnabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `ldapSyncStatus` field. */
  ldapSyncStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ldapSyncError` field. */
  ldapSyncError?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ldapSyncLastUpdateAt` field. */
  ldapSyncLastUpdateAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `ldapSyncLastSuccessfulUpdateAt` field. */
  ldapSyncLastSuccessfulUpdateAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `ldapSyncLastSyncAt` field. */
  ldapSyncLastSyncAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `descriptionHtml` field. */
  descriptionHtml?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lfsEnabled` field. */
  lfsEnabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `parentId` field. */
  parentId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sharedRunnersMinutesLimit` field. */
  sharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `repositorySizeLimit` field. */
  repositorySizeLimit?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `requireTwoFactorAuthentication` field. */
  requireTwoFactorAuthentication?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `twoFactorGracePeriod` field. */
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `cachedMarkdownVersion` field. */
  cachedMarkdownVersion?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `projectCreationLevel` field. */
  projectCreationLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `runnersToken` field. */
  runnersToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fileTemplateProjectId` field. */
  fileTemplateProjectId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `samlDiscoveryToken` field. */
  samlDiscoveryToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `runnersTokenEncrypted` field. */
  runnersTokenEncrypted?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `customProjectTemplatesGroupId` field. */
  customProjectTemplatesGroupId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `autoDevopsEnabled` field. */
  autoDevopsEnabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `extraSharedRunnersMinutesLimit` field. */
  extraSharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `lastCiMinutesNotificationAt` field. */
  lastCiMinutesNotificationAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `lastCiMinutesUsageNotificationLevel` field. */
  lastCiMinutesUsageNotificationLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `subgroupCreationLevel` field. */
  subgroupCreationLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `emailsDisabled` field. */
  emailsDisabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `maxPagesSize` field. */
  maxPagesSize?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `maxArtifactsSize` field. */
  maxArtifactsSize?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `mentionsDisabled` field. */
  mentionsDisabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `defaultBranchProtection` field. */
  defaultBranchProtection?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `unlockMembershipToLdap` field. */
  unlockMembershipToLdap?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `maxPersonalAccessTokenLifetime` field. */
  maxPersonalAccessTokenLifetime?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `pushRuleId` field. */
  pushRuleId?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `sharedRunnersEnabled` field. */
  sharedRunnersEnabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `allowDescendantsOverrideDisabledSharedRunners` field. */
  allowDescendantsOverrideDisabledSharedRunners?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `traversalIds` field. */
  traversalIds?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['BigInt']>;
};

/** A filter to be used against `MedigyNamespace` object types. All fields are combined with a logical ‘and.’ */
export type MedigyNamespaceFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `path` field. */
  path?: Maybe<StringFilter>;
  /** Filter by the object’s `ownerId` field. */
  ownerId?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `avatar` field. */
  avatar?: Maybe<StringFilter>;
  /** Filter by the object’s `membershipLock` field. */
  membershipLock?: Maybe<BooleanFilter>;
  /** Filter by the object’s `shareWithGroupLock` field. */
  shareWithGroupLock?: Maybe<BooleanFilter>;
  /** Filter by the object’s `visibilityLevel` field. */
  visibilityLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `requestAccessEnabled` field. */
  requestAccessEnabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `ldapSyncStatus` field. */
  ldapSyncStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `ldapSyncError` field. */
  ldapSyncError?: Maybe<StringFilter>;
  /** Filter by the object’s `ldapSyncLastUpdateAt` field. */
  ldapSyncLastUpdateAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `ldapSyncLastSuccessfulUpdateAt` field. */
  ldapSyncLastSuccessfulUpdateAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `ldapSyncLastSyncAt` field. */
  ldapSyncLastSyncAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `descriptionHtml` field. */
  descriptionHtml?: Maybe<StringFilter>;
  /** Filter by the object’s `lfsEnabled` field. */
  lfsEnabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `parentId` field. */
  parentId?: Maybe<IntFilter>;
  /** Filter by the object’s `sharedRunnersMinutesLimit` field. */
  sharedRunnersMinutesLimit?: Maybe<IntFilter>;
  /** Filter by the object’s `repositorySizeLimit` field. */
  repositorySizeLimit?: Maybe<BigIntFilter>;
  /** Filter by the object’s `requireTwoFactorAuthentication` field. */
  requireTwoFactorAuthentication?: Maybe<BooleanFilter>;
  /** Filter by the object’s `twoFactorGracePeriod` field. */
  twoFactorGracePeriod?: Maybe<IntFilter>;
  /** Filter by the object’s `cachedMarkdownVersion` field. */
  cachedMarkdownVersion?: Maybe<IntFilter>;
  /** Filter by the object’s `projectCreationLevel` field. */
  projectCreationLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `runnersToken` field. */
  runnersToken?: Maybe<StringFilter>;
  /** Filter by the object’s `fileTemplateProjectId` field. */
  fileTemplateProjectId?: Maybe<IntFilter>;
  /** Filter by the object’s `samlDiscoveryToken` field. */
  samlDiscoveryToken?: Maybe<StringFilter>;
  /** Filter by the object’s `runnersTokenEncrypted` field. */
  runnersTokenEncrypted?: Maybe<StringFilter>;
  /** Filter by the object’s `customProjectTemplatesGroupId` field. */
  customProjectTemplatesGroupId?: Maybe<IntFilter>;
  /** Filter by the object’s `autoDevopsEnabled` field. */
  autoDevopsEnabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `extraSharedRunnersMinutesLimit` field. */
  extraSharedRunnersMinutesLimit?: Maybe<IntFilter>;
  /** Filter by the object’s `lastCiMinutesNotificationAt` field. */
  lastCiMinutesNotificationAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `lastCiMinutesUsageNotificationLevel` field. */
  lastCiMinutesUsageNotificationLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `subgroupCreationLevel` field. */
  subgroupCreationLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `emailsDisabled` field. */
  emailsDisabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `maxPagesSize` field. */
  maxPagesSize?: Maybe<IntFilter>;
  /** Filter by the object’s `maxArtifactsSize` field. */
  maxArtifactsSize?: Maybe<IntFilter>;
  /** Filter by the object’s `mentionsDisabled` field. */
  mentionsDisabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `defaultBranchProtection` field. */
  defaultBranchProtection?: Maybe<IntFilter>;
  /** Filter by the object’s `unlockMembershipToLdap` field. */
  unlockMembershipToLdap?: Maybe<BooleanFilter>;
  /** Filter by the object’s `maxPersonalAccessTokenLifetime` field. */
  maxPersonalAccessTokenLifetime?: Maybe<IntFilter>;
  /** Filter by the object’s `pushRuleId` field. */
  pushRuleId?: Maybe<BigIntFilter>;
  /** Filter by the object’s `sharedRunnersEnabled` field. */
  sharedRunnersEnabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `allowDescendantsOverrideDisabledSharedRunners` field. */
  allowDescendantsOverrideDisabledSharedRunners?: Maybe<BooleanFilter>;
  /** Filter by the object’s `traversalIds` field. */
  traversalIds?: Maybe<IntListFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<BigIntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyNamespaceFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyNamespaceFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyNamespaceFilter>;
};

/** An input for mutations affecting `MedigyNamespace` */
export type MedigyNamespaceInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  membershipLock?: Maybe<Scalars['Boolean']>;
  shareWithGroupLock?: Maybe<Scalars['Boolean']>;
  visibilityLevel?: Maybe<Scalars['Int']>;
  requestAccessEnabled?: Maybe<Scalars['Boolean']>;
  ldapSyncStatus?: Maybe<Scalars['String']>;
  ldapSyncError?: Maybe<Scalars['String']>;
  ldapSyncLastUpdateAt?: Maybe<Scalars['Datetime']>;
  ldapSyncLastSuccessfulUpdateAt?: Maybe<Scalars['Datetime']>;
  ldapSyncLastSyncAt?: Maybe<Scalars['Datetime']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  lfsEnabled?: Maybe<Scalars['Boolean']>;
  parentId?: Maybe<Scalars['Int']>;
  sharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  repositorySizeLimit?: Maybe<Scalars['BigInt']>;
  requireTwoFactorAuthentication?: Maybe<Scalars['Boolean']>;
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  cachedMarkdownVersion?: Maybe<Scalars['Int']>;
  projectCreationLevel?: Maybe<Scalars['Int']>;
  runnersToken?: Maybe<Scalars['String']>;
  fileTemplateProjectId?: Maybe<Scalars['Int']>;
  samlDiscoveryToken?: Maybe<Scalars['String']>;
  runnersTokenEncrypted?: Maybe<Scalars['String']>;
  customProjectTemplatesGroupId?: Maybe<Scalars['Int']>;
  autoDevopsEnabled?: Maybe<Scalars['Boolean']>;
  extraSharedRunnersMinutesLimit?: Maybe<Scalars['Int']>;
  lastCiMinutesNotificationAt?: Maybe<Scalars['Datetime']>;
  lastCiMinutesUsageNotificationLevel?: Maybe<Scalars['Int']>;
  subgroupCreationLevel?: Maybe<Scalars['Int']>;
  emailsDisabled?: Maybe<Scalars['Boolean']>;
  maxPagesSize?: Maybe<Scalars['Int']>;
  maxArtifactsSize?: Maybe<Scalars['Int']>;
  mentionsDisabled?: Maybe<Scalars['Boolean']>;
  defaultBranchProtection?: Maybe<Scalars['Int']>;
  unlockMembershipToLdap?: Maybe<Scalars['Boolean']>;
  maxPersonalAccessTokenLifetime?: Maybe<Scalars['Int']>;
  pushRuleId?: Maybe<Scalars['BigInt']>;
  sharedRunnersEnabled?: Maybe<Scalars['Boolean']>;
  allowDescendantsOverrideDisabledSharedRunners?: Maybe<Scalars['Boolean']>;
  traversalIds?: Maybe<Array<Maybe<Scalars['Int']>>>;
  organizationId?: Maybe<Scalars['BigInt']>;
};

/** A connection to a list of `MedigyNamespace` values. */
export type MedigyNamespacesConnection = {
  __typename?: 'MedigyNamespacesConnection';
  /** A list of `MedigyNamespace` objects. */
  nodes: Array<Maybe<MedigyNamespace>>;
  /** A list of edges which contains the `MedigyNamespace` and cursor to aid in pagination. */
  edges: Array<MedigyNamespacesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyNamespace` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyNamespace` edge in the connection. */
export type MedigyNamespacesEdge = {
  __typename?: 'MedigyNamespacesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyNamespace` at the end of the edge. */
  node?: Maybe<MedigyNamespace>;
};

/** Methods to use when ordering `MedigyNamespace`. */
export enum MedigyNamespacesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PathAsc = 'PATH_ASC',
  PathDesc = 'PATH_DESC',
  OwnerIdAsc = 'OWNER_ID_ASC',
  OwnerIdDesc = 'OWNER_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  AvatarAsc = 'AVATAR_ASC',
  AvatarDesc = 'AVATAR_DESC',
  MembershipLockAsc = 'MEMBERSHIP_LOCK_ASC',
  MembershipLockDesc = 'MEMBERSHIP_LOCK_DESC',
  ShareWithGroupLockAsc = 'SHARE_WITH_GROUP_LOCK_ASC',
  ShareWithGroupLockDesc = 'SHARE_WITH_GROUP_LOCK_DESC',
  VisibilityLevelAsc = 'VISIBILITY_LEVEL_ASC',
  VisibilityLevelDesc = 'VISIBILITY_LEVEL_DESC',
  RequestAccessEnabledAsc = 'REQUEST_ACCESS_ENABLED_ASC',
  RequestAccessEnabledDesc = 'REQUEST_ACCESS_ENABLED_DESC',
  LdapSyncStatusAsc = 'LDAP_SYNC_STATUS_ASC',
  LdapSyncStatusDesc = 'LDAP_SYNC_STATUS_DESC',
  LdapSyncErrorAsc = 'LDAP_SYNC_ERROR_ASC',
  LdapSyncErrorDesc = 'LDAP_SYNC_ERROR_DESC',
  LdapSyncLastUpdateAtAsc = 'LDAP_SYNC_LAST_UPDATE_AT_ASC',
  LdapSyncLastUpdateAtDesc = 'LDAP_SYNC_LAST_UPDATE_AT_DESC',
  LdapSyncLastSuccessfulUpdateAtAsc = 'LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT_ASC',
  LdapSyncLastSuccessfulUpdateAtDesc = 'LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT_DESC',
  LdapSyncLastSyncAtAsc = 'LDAP_SYNC_LAST_SYNC_AT_ASC',
  LdapSyncLastSyncAtDesc = 'LDAP_SYNC_LAST_SYNC_AT_DESC',
  DescriptionHtmlAsc = 'DESCRIPTION_HTML_ASC',
  DescriptionHtmlDesc = 'DESCRIPTION_HTML_DESC',
  LfsEnabledAsc = 'LFS_ENABLED_ASC',
  LfsEnabledDesc = 'LFS_ENABLED_DESC',
  ParentIdAsc = 'PARENT_ID_ASC',
  ParentIdDesc = 'PARENT_ID_DESC',
  SharedRunnersMinutesLimitAsc = 'SHARED_RUNNERS_MINUTES_LIMIT_ASC',
  SharedRunnersMinutesLimitDesc = 'SHARED_RUNNERS_MINUTES_LIMIT_DESC',
  RepositorySizeLimitAsc = 'REPOSITORY_SIZE_LIMIT_ASC',
  RepositorySizeLimitDesc = 'REPOSITORY_SIZE_LIMIT_DESC',
  RequireTwoFactorAuthenticationAsc = 'REQUIRE_TWO_FACTOR_AUTHENTICATION_ASC',
  RequireTwoFactorAuthenticationDesc = 'REQUIRE_TWO_FACTOR_AUTHENTICATION_DESC',
  TwoFactorGracePeriodAsc = 'TWO_FACTOR_GRACE_PERIOD_ASC',
  TwoFactorGracePeriodDesc = 'TWO_FACTOR_GRACE_PERIOD_DESC',
  CachedMarkdownVersionAsc = 'CACHED_MARKDOWN_VERSION_ASC',
  CachedMarkdownVersionDesc = 'CACHED_MARKDOWN_VERSION_DESC',
  ProjectCreationLevelAsc = 'PROJECT_CREATION_LEVEL_ASC',
  ProjectCreationLevelDesc = 'PROJECT_CREATION_LEVEL_DESC',
  RunnersTokenAsc = 'RUNNERS_TOKEN_ASC',
  RunnersTokenDesc = 'RUNNERS_TOKEN_DESC',
  FileTemplateProjectIdAsc = 'FILE_TEMPLATE_PROJECT_ID_ASC',
  FileTemplateProjectIdDesc = 'FILE_TEMPLATE_PROJECT_ID_DESC',
  SamlDiscoveryTokenAsc = 'SAML_DISCOVERY_TOKEN_ASC',
  SamlDiscoveryTokenDesc = 'SAML_DISCOVERY_TOKEN_DESC',
  RunnersTokenEncryptedAsc = 'RUNNERS_TOKEN_ENCRYPTED_ASC',
  RunnersTokenEncryptedDesc = 'RUNNERS_TOKEN_ENCRYPTED_DESC',
  CustomProjectTemplatesGroupIdAsc = 'CUSTOM_PROJECT_TEMPLATES_GROUP_ID_ASC',
  CustomProjectTemplatesGroupIdDesc = 'CUSTOM_PROJECT_TEMPLATES_GROUP_ID_DESC',
  AutoDevopsEnabledAsc = 'AUTO_DEVOPS_ENABLED_ASC',
  AutoDevopsEnabledDesc = 'AUTO_DEVOPS_ENABLED_DESC',
  ExtraSharedRunnersMinutesLimitAsc = 'EXTRA_SHARED_RUNNERS_MINUTES_LIMIT_ASC',
  ExtraSharedRunnersMinutesLimitDesc = 'EXTRA_SHARED_RUNNERS_MINUTES_LIMIT_DESC',
  LastCiMinutesNotificationAtAsc = 'LAST_CI_MINUTES_NOTIFICATION_AT_ASC',
  LastCiMinutesNotificationAtDesc = 'LAST_CI_MINUTES_NOTIFICATION_AT_DESC',
  LastCiMinutesUsageNotificationLevelAsc = 'LAST_CI_MINUTES_USAGE_NOTIFICATION_LEVEL_ASC',
  LastCiMinutesUsageNotificationLevelDesc = 'LAST_CI_MINUTES_USAGE_NOTIFICATION_LEVEL_DESC',
  SubgroupCreationLevelAsc = 'SUBGROUP_CREATION_LEVEL_ASC',
  SubgroupCreationLevelDesc = 'SUBGROUP_CREATION_LEVEL_DESC',
  EmailsDisabledAsc = 'EMAILS_DISABLED_ASC',
  EmailsDisabledDesc = 'EMAILS_DISABLED_DESC',
  MaxPagesSizeAsc = 'MAX_PAGES_SIZE_ASC',
  MaxPagesSizeDesc = 'MAX_PAGES_SIZE_DESC',
  MaxArtifactsSizeAsc = 'MAX_ARTIFACTS_SIZE_ASC',
  MaxArtifactsSizeDesc = 'MAX_ARTIFACTS_SIZE_DESC',
  MentionsDisabledAsc = 'MENTIONS_DISABLED_ASC',
  MentionsDisabledDesc = 'MENTIONS_DISABLED_DESC',
  DefaultBranchProtectionAsc = 'DEFAULT_BRANCH_PROTECTION_ASC',
  DefaultBranchProtectionDesc = 'DEFAULT_BRANCH_PROTECTION_DESC',
  UnlockMembershipToLdapAsc = 'UNLOCK_MEMBERSHIP_TO_LDAP_ASC',
  UnlockMembershipToLdapDesc = 'UNLOCK_MEMBERSHIP_TO_LDAP_DESC',
  MaxPersonalAccessTokenLifetimeAsc = 'MAX_PERSONAL_ACCESS_TOKEN_LIFETIME_ASC',
  MaxPersonalAccessTokenLifetimeDesc = 'MAX_PERSONAL_ACCESS_TOKEN_LIFETIME_DESC',
  PushRuleIdAsc = 'PUSH_RULE_ID_ASC',
  PushRuleIdDesc = 'PUSH_RULE_ID_DESC',
  SharedRunnersEnabledAsc = 'SHARED_RUNNERS_ENABLED_ASC',
  SharedRunnersEnabledDesc = 'SHARED_RUNNERS_ENABLED_DESC',
  AllowDescendantsOverrideDisabledSharedRunnersAsc = 'ALLOW_DESCENDANTS_OVERRIDE_DISABLED_SHARED_RUNNERS_ASC',
  AllowDescendantsOverrideDisabledSharedRunnersDesc = 'ALLOW_DESCENDANTS_OVERRIDE_DISABLED_SHARED_RUNNERS_DESC',
  TraversalIdsAsc = 'TRAVERSAL_IDS_ASC',
  TraversalIdsDesc = 'TRAVERSAL_IDS_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC'
}

export type MedigyOffering = {
  __typename?: 'MedigyOffering';
  id: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
  vendorName?: Maybe<Scalars['String']>;
  vendorEmail?: Maybe<Scalars['String']>;
  vendorContact?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyEmail?: Maybe<Scalars['String']>;
  companyContactNo?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  institutionStatus?: Maybe<Scalars['String']>;
  approvedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `MedigyOffering` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedigyOfferingCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorEmail` field. */
  vendorEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorContact` field. */
  vendorContact?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyEmail` field. */
  companyEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyContactNo` field. */
  companyContactNo?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approvedDate` field. */
  approvedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `MedigyOffering` object types. All fields are combined with a logical ‘and.’ */
export type MedigyOfferingFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorEmail` field. */
  vendorEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorContact` field. */
  vendorContact?: Maybe<StringFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `companyEmail` field. */
  companyEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `companyContactNo` field. */
  companyContactNo?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `approvedDate` field. */
  approvedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyOfferingFilter>;
};

export type MedigyOfferingList = {
  __typename?: 'MedigyOfferingList';
  id: Scalars['GitlabProjectId'];
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  companyName?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  institutionTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  featuredContent?: Maybe<Scalars['String']>;
  logoContent?: Maybe<Scalars['String']>;
  offeringPath?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  approvedDate?: Maybe<Scalars['Datetime']>;
  offeringApprovedBy?: Maybe<Scalars['String']>;
  offeringCuratedBy?: Maybe<Scalars['String']>;
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
  offeringCreatedBy?: Maybe<Scalars['Int']>;
  offeringCreatedEmail?: Maybe<Scalars['String']>;
  vendorName?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedigyOfferingList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MedigyOfferingListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredContent` field. */
  featuredContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoContent` field. */
  logoContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringPath` field. */
  offeringPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approvedDate` field. */
  approvedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringCreatedEmail` field. */
  offeringCreatedEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `publishDate` field. */
  publishDate?: Maybe<Scalars['String']>;
};

export type MedigyOfferingListCount = {
  __typename?: 'MedigyOfferingListCount';
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  approvedDate?: Maybe<Scalars['Date']>;
  offeringCuratedOn?: Maybe<Scalars['Date']>;
  offeringCreated?: Maybe<Scalars['Date']>;
};

/**
 * A condition to be used against `MedigyOfferingListCount` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type MedigyOfferingListCountCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approvedDate` field. */
  approvedDate?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Date']>;
};

/** A filter to be used against `MedigyOfferingListCount` object types. All fields are combined with a logical ‘and.’ */
export type MedigyOfferingListCountFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `approvedDate` field. */
  approvedDate?: Maybe<DateFilter>;
  /** Filter by the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<DateFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DateFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyOfferingListCountFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyOfferingListCountFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyOfferingListCountFilter>;
};

/** A connection to a list of `MedigyOfferingListCount` values. */
export type MedigyOfferingListCountsConnection = {
  __typename?: 'MedigyOfferingListCountsConnection';
  /** A list of `MedigyOfferingListCount` objects. */
  nodes: Array<Maybe<MedigyOfferingListCount>>;
  /** A list of edges which contains the `MedigyOfferingListCount` and cursor to aid in pagination. */
  edges: Array<MedigyOfferingListCountsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyOfferingListCount` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyOfferingListCount` edge in the connection. */
export type MedigyOfferingListCountsEdge = {
  __typename?: 'MedigyOfferingListCountsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyOfferingListCount` at the end of the edge. */
  node?: Maybe<MedigyOfferingListCount>;
};

/** Methods to use when ordering `MedigyOfferingListCount`. */
export enum MedigyOfferingListCountsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  ApprovedDateAsc = 'APPROVED_DATE_ASC',
  ApprovedDateDesc = 'APPROVED_DATE_DESC',
  OfferingCuratedOnAsc = 'OFFERING_CURATED_ON_ASC',
  OfferingCuratedOnDesc = 'OFFERING_CURATED_ON_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC'
}

/** A filter to be used against `MedigyOfferingList` object types. All fields are combined with a logical ‘and.’ */
export type MedigyOfferingListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringPath` field. */
  offeringPath?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `approvedDate` field. */
  approvedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringCreatedEmail` field. */
  offeringCreatedEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Filter by the object’s `publishDate` field. */
  publishDate?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyOfferingListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyOfferingListFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyOfferingListFilter>;
};

/** A connection to a list of `MedigyOfferingList` values. */
export type MedigyOfferingListsConnection = {
  __typename?: 'MedigyOfferingListsConnection';
  /** A list of `MedigyOfferingList` objects. */
  nodes: Array<Maybe<MedigyOfferingList>>;
  /** A list of edges which contains the `MedigyOfferingList` and cursor to aid in pagination. */
  edges: Array<MedigyOfferingListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyOfferingList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyOfferingList` edge in the connection. */
export type MedigyOfferingListsEdge = {
  __typename?: 'MedigyOfferingListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyOfferingList` at the end of the edge. */
  node?: Maybe<MedigyOfferingList>;
};

/** Methods to use when ordering `MedigyOfferingList`. */
export enum MedigyOfferingListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingLastActivityAtAsc = 'OFFERING_LAST_ACTIVITY_AT_ASC',
  OfferingLastActivityAtDesc = 'OFFERING_LAST_ACTIVITY_AT_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  InstitutionTitleAsc = 'INSTITUTION_TITLE_ASC',
  InstitutionTitleDesc = 'INSTITUTION_TITLE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  FeaturedContentAsc = 'FEATURED_CONTENT_ASC',
  FeaturedContentDesc = 'FEATURED_CONTENT_DESC',
  LogoContentAsc = 'LOGO_CONTENT_ASC',
  LogoContentDesc = 'LOGO_CONTENT_DESC',
  OfferingPathAsc = 'OFFERING_PATH_ASC',
  OfferingPathDesc = 'OFFERING_PATH_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  ApprovedDateAsc = 'APPROVED_DATE_ASC',
  ApprovedDateDesc = 'APPROVED_DATE_DESC',
  OfferingApprovedByAsc = 'OFFERING_APPROVED_BY_ASC',
  OfferingApprovedByDesc = 'OFFERING_APPROVED_BY_DESC',
  OfferingCuratedByAsc = 'OFFERING_CURATED_BY_ASC',
  OfferingCuratedByDesc = 'OFFERING_CURATED_BY_DESC',
  OfferingCuratedOnAsc = 'OFFERING_CURATED_ON_ASC',
  OfferingCuratedOnDesc = 'OFFERING_CURATED_ON_DESC',
  OfferingCreatedByAsc = 'OFFERING_CREATED_BY_ASC',
  OfferingCreatedByDesc = 'OFFERING_CREATED_BY_DESC',
  OfferingCreatedEmailAsc = 'OFFERING_CREATED_EMAIL_ASC',
  OfferingCreatedEmailDesc = 'OFFERING_CREATED_EMAIL_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC',
  PublishDateAsc = 'PUBLISH_DATE_ASC',
  PublishDateDesc = 'PUBLISH_DATE_DESC'
}

export type MedigyOfferingProfile = {
  __typename?: 'MedigyOfferingProfile';
  id: Scalars['GitlabProjectId'];
  offeringType?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringTitle?: Maybe<Scalars['String']>;
  companySlug?: Maybe<Scalars['String']>;
  vendorName?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedigyOfferingProfile` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type MedigyOfferingProfileCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySlug` field. */
  companySlug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MedigyOfferingProfile` object types. All fields are combined with a logical ‘and.’ */
export type MedigyOfferingProfileFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `companySlug` field. */
  companySlug?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyOfferingProfileFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyOfferingProfileFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyOfferingProfileFilter>;
};

/** A connection to a list of `MedigyOfferingProfile` values. */
export type MedigyOfferingProfilesConnection = {
  __typename?: 'MedigyOfferingProfilesConnection';
  /** A list of `MedigyOfferingProfile` objects. */
  nodes: Array<Maybe<MedigyOfferingProfile>>;
  /** A list of edges which contains the `MedigyOfferingProfile` and cursor to aid in pagination. */
  edges: Array<MedigyOfferingProfilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyOfferingProfile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyOfferingProfile` edge in the connection. */
export type MedigyOfferingProfilesEdge = {
  __typename?: 'MedigyOfferingProfilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyOfferingProfile` at the end of the edge. */
  node?: Maybe<MedigyOfferingProfile>;
};

/** Methods to use when ordering `MedigyOfferingProfile`. */
export enum MedigyOfferingProfilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CompanySlugAsc = 'COMPANY_SLUG_ASC',
  CompanySlugDesc = 'COMPANY_SLUG_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC'
}

/** A connection to a list of `MedigyOffering` values. */
export type MedigyOfferingsConnection = {
  __typename?: 'MedigyOfferingsConnection';
  /** A list of `MedigyOffering` objects. */
  nodes: Array<Maybe<MedigyOffering>>;
  /** A list of edges which contains the `MedigyOffering` and cursor to aid in pagination. */
  edges: Array<MedigyOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyOffering` edge in the connection. */
export type MedigyOfferingsEdge = {
  __typename?: 'MedigyOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyOffering` at the end of the edge. */
  node?: Maybe<MedigyOffering>;
};

/** Methods to use when ordering `MedigyOffering`. */
export enum MedigyOfferingsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC',
  VendorEmailAsc = 'VENDOR_EMAIL_ASC',
  VendorEmailDesc = 'VENDOR_EMAIL_DESC',
  VendorContactAsc = 'VENDOR_CONTACT_ASC',
  VendorContactDesc = 'VENDOR_CONTACT_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  CompanyEmailAsc = 'COMPANY_EMAIL_ASC',
  CompanyEmailDesc = 'COMPANY_EMAIL_DESC',
  CompanyContactNoAsc = 'COMPANY_CONTACT_NO_ASC',
  CompanyContactNoDesc = 'COMPANY_CONTACT_NO_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC',
  ApprovedDateAsc = 'APPROVED_DATE_ASC',
  ApprovedDateDesc = 'APPROVED_DATE_DESC'
}

export type MedigySession = {
  __typename?: 'MedigySession';
  jwToken?: Maybe<Scalars['String']>;
  accessToken?: Maybe<Scalars['String']>;
  refreshToken?: Maybe<Scalars['String']>;
  tokenType?: Maybe<Scalars['String']>;
  scope?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Int']>;
  userProfile?: Maybe<UserDetail>;
  membership?: Maybe<Array<Maybe<MedigyMembership>>>;
};

/** An input for mutations affecting `MedigySignupSsoInputRecord` */
export type MedigySignupSsoInputRecordInput = {
  accessCode?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
};

/** All input for the `medigySignupUserIam` mutation. */
export type MedigySignupUserIamInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signupUserInput?: Maybe<SignupUserIamInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
  claimed?: Maybe<Scalars['Boolean']>;
};

/** The output of our `medigySignupUserIam` mutation. */
export type MedigySignupUserIamPayload = {
  __typename?: 'MedigySignupUserIamPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signupUserIamResult?: Maybe<SignupUserIamResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `medigySignupUser` mutation. */
export type MedigySignupUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signupUserInput?: Maybe<SignupUserInputRecordInput>;
};

/** The output of our `medigySignupUser` mutation. */
export type MedigySignupUserPayload = {
  __typename?: 'MedigySignupUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signupUserResult?: Maybe<SignupUserResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type MedigyTelemedicineOffering = {
  __typename?: 'MedigyTelemedicineOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MedigyTelemedicineOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type MedigyTelemedicineOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MedigyTelemedicineOffering` object types. All fields are combined with a logical ‘and.’ */
export type MedigyTelemedicineOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyTelemedicineOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyTelemedicineOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyTelemedicineOfferingFilter>;
};

/** A connection to a list of `MedigyTelemedicineOffering` values. */
export type MedigyTelemedicineOfferingsConnection = {
  __typename?: 'MedigyTelemedicineOfferingsConnection';
  /** A list of `MedigyTelemedicineOffering` objects. */
  nodes: Array<Maybe<MedigyTelemedicineOffering>>;
  /** A list of edges which contains the `MedigyTelemedicineOffering` and cursor to aid in pagination. */
  edges: Array<MedigyTelemedicineOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyTelemedicineOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyTelemedicineOffering` edge in the connection. */
export type MedigyTelemedicineOfferingsEdge = {
  __typename?: 'MedigyTelemedicineOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyTelemedicineOffering` at the end of the edge. */
  node?: Maybe<MedigyTelemedicineOffering>;
};

/** Methods to use when ordering `MedigyTelemedicineOffering`. */
export enum MedigyTelemedicineOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type MedigyUser = {
  __typename?: 'MedigyUser';
  id?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  encryptedPassword?: Maybe<Scalars['String']>;
  resetPasswordToken?: Maybe<Scalars['String']>;
  resetPasswordSentAt?: Maybe<Scalars['Datetime']>;
  rememberCreatedAt?: Maybe<Scalars['Datetime']>;
  signInCount?: Maybe<Scalars['Int']>;
  currentSignInAt?: Maybe<Scalars['Datetime']>;
  lastSignInAt?: Maybe<Scalars['Datetime']>;
  currentSignInIp?: Maybe<Scalars['String']>;
  lastSignInIp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  name?: Maybe<Scalars['String']>;
  admin?: Maybe<Scalars['Boolean']>;
  projectsLimit?: Maybe<Scalars['Int']>;
  failedAttempts?: Maybe<Scalars['Int']>;
  lockedAt?: Maybe<Scalars['Datetime']>;
  username?: Maybe<Scalars['String']>;
  canCreateGroup?: Maybe<Scalars['Boolean']>;
  canCreateTeam?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['String']>;
  colorSchemeId?: Maybe<Scalars['Int']>;
  passwordExpiresAt?: Maybe<Scalars['Datetime']>;
  createdById?: Maybe<Scalars['Int']>;
  lastCredentialCheckAt?: Maybe<Scalars['Datetime']>;
  avatar?: Maybe<Scalars['String']>;
  confirmationToken?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['Datetime']>;
  confirmationSentAt?: Maybe<Scalars['Datetime']>;
  unconfirmedEmail?: Maybe<Scalars['String']>;
  hideNoSshKey?: Maybe<Scalars['Boolean']>;
  adminEmailUnsubscribedAt?: Maybe<Scalars['Datetime']>;
  notificationEmail?: Maybe<Scalars['String']>;
  hideNoPassword?: Maybe<Scalars['Boolean']>;
  passwordAutomaticallySet?: Maybe<Scalars['Boolean']>;
  encryptedOtpSecret?: Maybe<Scalars['String']>;
  encryptedOtpSecretIv?: Maybe<Scalars['String']>;
  encryptedOtpSecretSalt?: Maybe<Scalars['String']>;
  otpRequiredForLogin?: Maybe<Scalars['Boolean']>;
  otpBackupCodes?: Maybe<Scalars['String']>;
  publicEmail?: Maybe<Scalars['String']>;
  dashboard?: Maybe<Scalars['Int']>;
  projectView?: Maybe<Scalars['Int']>;
  consumedTimestep?: Maybe<Scalars['Int']>;
  layout?: Maybe<Scalars['Int']>;
  hideProjectLimit?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  unlockToken?: Maybe<Scalars['String']>;
  otpGracePeriodStartedAt?: Maybe<Scalars['Datetime']>;
  external?: Maybe<Scalars['Boolean']>;
  incomingEmailToken?: Maybe<Scalars['String']>;
  auditor?: Maybe<Scalars['Boolean']>;
  requireTwoFactorAuthenticationFromGroup?: Maybe<Scalars['Boolean']>;
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  lastActivityOn?: Maybe<Scalars['Date']>;
  notifiedOfOwnActivity?: Maybe<Scalars['Boolean']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  emailOptedIn?: Maybe<Scalars['Boolean']>;
  emailOptedInIp?: Maybe<Scalars['String']>;
  emailOptedInSourceId?: Maybe<Scalars['Int']>;
  emailOptedInAt?: Maybe<Scalars['Datetime']>;
  themeId?: Maybe<Scalars['Int']>;
  acceptedTermId?: Maybe<Scalars['Int']>;
  feedToken?: Maybe<Scalars['String']>;
  privateProfile?: Maybe<Scalars['Boolean']>;
  roadmapLayout?: Maybe<Scalars['Int']>;
  includePrivateContributions?: Maybe<Scalars['Boolean']>;
  commitEmail?: Maybe<Scalars['String']>;
  groupView?: Maybe<Scalars['Int']>;
  managingGroupId?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  staticObjectToken?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['Int']>;
  userType?: Maybe<Scalars['Int']>;
  staticObjectTokenEncrypted?: Maybe<Scalars['String']>;
  otpSecretExpiresAt?: Maybe<Scalars['Datetime']>;
  onboardingInProgress?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `MedigyUser` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type MedigyUserCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `encryptedPassword` field. */
  encryptedPassword?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `resetPasswordToken` field. */
  resetPasswordToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `resetPasswordSentAt` field. */
  resetPasswordSentAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `rememberCreatedAt` field. */
  rememberCreatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `signInCount` field. */
  signInCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `currentSignInAt` field. */
  currentSignInAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `lastSignInAt` field. */
  lastSignInAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `currentSignInIp` field. */
  currentSignInIp?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastSignInIp` field. */
  lastSignInIp?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `admin` field. */
  admin?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `projectsLimit` field. */
  projectsLimit?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `failedAttempts` field. */
  failedAttempts?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `lockedAt` field. */
  lockedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `username` field. */
  username?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `canCreateGroup` field. */
  canCreateGroup?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `canCreateTeam` field. */
  canCreateTeam?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `colorSchemeId` field. */
  colorSchemeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `passwordExpiresAt` field. */
  passwordExpiresAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `createdById` field. */
  createdById?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `lastCredentialCheckAt` field. */
  lastCredentialCheckAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `avatar` field. */
  avatar?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `confirmationToken` field. */
  confirmationToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `confirmedAt` field. */
  confirmedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `confirmationSentAt` field. */
  confirmationSentAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `unconfirmedEmail` field. */
  unconfirmedEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hideNoSshKey` field. */
  hideNoSshKey?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `adminEmailUnsubscribedAt` field. */
  adminEmailUnsubscribedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `notificationEmail` field. */
  notificationEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hideNoPassword` field. */
  hideNoPassword?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `passwordAutomaticallySet` field. */
  passwordAutomaticallySet?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `encryptedOtpSecret` field. */
  encryptedOtpSecret?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `encryptedOtpSecretIv` field. */
  encryptedOtpSecretIv?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `encryptedOtpSecretSalt` field. */
  encryptedOtpSecretSalt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `otpRequiredForLogin` field. */
  otpRequiredForLogin?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `otpBackupCodes` field. */
  otpBackupCodes?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `publicEmail` field. */
  publicEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dashboard` field. */
  dashboard?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `projectView` field. */
  projectView?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `consumedTimestep` field. */
  consumedTimestep?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `layout` field. */
  layout?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hideProjectLimit` field. */
  hideProjectLimit?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `note` field. */
  note?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `unlockToken` field. */
  unlockToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `otpGracePeriodStartedAt` field. */
  otpGracePeriodStartedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `external` field. */
  external?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `incomingEmailToken` field. */
  incomingEmailToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `auditor` field. */
  auditor?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requireTwoFactorAuthenticationFromGroup` field. */
  requireTwoFactorAuthenticationFromGroup?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `twoFactorGracePeriod` field. */
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `lastActivityOn` field. */
  lastActivityOn?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `notifiedOfOwnActivity` field. */
  notifiedOfOwnActivity?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `emailOptedIn` field. */
  emailOptedIn?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `emailOptedInIp` field. */
  emailOptedInIp?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `emailOptedInSourceId` field. */
  emailOptedInSourceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `emailOptedInAt` field. */
  emailOptedInAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `themeId` field. */
  themeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `acceptedTermId` field. */
  acceptedTermId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `feedToken` field. */
  feedToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `privateProfile` field. */
  privateProfile?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `roadmapLayout` field. */
  roadmapLayout?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `includePrivateContributions` field. */
  includePrivateContributions?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `commitEmail` field. */
  commitEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `groupView` field. */
  groupView?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `managingGroupId` field. */
  managingGroupId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `staticObjectToken` field. */
  staticObjectToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `role` field. */
  role?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userType` field. */
  userType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `staticObjectTokenEncrypted` field. */
  staticObjectTokenEncrypted?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `otpSecretExpiresAt` field. */
  otpSecretExpiresAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `onboardingInProgress` field. */
  onboardingInProgress?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `MedigyUser` object types. All fields are combined with a logical ‘and.’ */
export type MedigyUserFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `encryptedPassword` field. */
  encryptedPassword?: Maybe<StringFilter>;
  /** Filter by the object’s `resetPasswordToken` field. */
  resetPasswordToken?: Maybe<StringFilter>;
  /** Filter by the object’s `resetPasswordSentAt` field. */
  resetPasswordSentAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `rememberCreatedAt` field. */
  rememberCreatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `signInCount` field. */
  signInCount?: Maybe<IntFilter>;
  /** Filter by the object’s `currentSignInAt` field. */
  currentSignInAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `lastSignInAt` field. */
  lastSignInAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `currentSignInIp` field. */
  currentSignInIp?: Maybe<StringFilter>;
  /** Filter by the object’s `lastSignInIp` field. */
  lastSignInIp?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `admin` field. */
  admin?: Maybe<BooleanFilter>;
  /** Filter by the object’s `projectsLimit` field. */
  projectsLimit?: Maybe<IntFilter>;
  /** Filter by the object’s `failedAttempts` field. */
  failedAttempts?: Maybe<IntFilter>;
  /** Filter by the object’s `lockedAt` field. */
  lockedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `username` field. */
  username?: Maybe<StringFilter>;
  /** Filter by the object’s `canCreateGroup` field. */
  canCreateGroup?: Maybe<BooleanFilter>;
  /** Filter by the object’s `canCreateTeam` field. */
  canCreateTeam?: Maybe<BooleanFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `colorSchemeId` field. */
  colorSchemeId?: Maybe<IntFilter>;
  /** Filter by the object’s `passwordExpiresAt` field. */
  passwordExpiresAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `createdById` field. */
  createdById?: Maybe<IntFilter>;
  /** Filter by the object’s `lastCredentialCheckAt` field. */
  lastCredentialCheckAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `avatar` field. */
  avatar?: Maybe<StringFilter>;
  /** Filter by the object’s `confirmationToken` field. */
  confirmationToken?: Maybe<StringFilter>;
  /** Filter by the object’s `confirmedAt` field. */
  confirmedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `confirmationSentAt` field. */
  confirmationSentAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `unconfirmedEmail` field. */
  unconfirmedEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `hideNoSshKey` field. */
  hideNoSshKey?: Maybe<BooleanFilter>;
  /** Filter by the object’s `adminEmailUnsubscribedAt` field. */
  adminEmailUnsubscribedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `notificationEmail` field. */
  notificationEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `hideNoPassword` field. */
  hideNoPassword?: Maybe<BooleanFilter>;
  /** Filter by the object’s `passwordAutomaticallySet` field. */
  passwordAutomaticallySet?: Maybe<BooleanFilter>;
  /** Filter by the object’s `encryptedOtpSecret` field. */
  encryptedOtpSecret?: Maybe<StringFilter>;
  /** Filter by the object’s `encryptedOtpSecretIv` field. */
  encryptedOtpSecretIv?: Maybe<StringFilter>;
  /** Filter by the object’s `encryptedOtpSecretSalt` field. */
  encryptedOtpSecretSalt?: Maybe<StringFilter>;
  /** Filter by the object’s `otpRequiredForLogin` field. */
  otpRequiredForLogin?: Maybe<BooleanFilter>;
  /** Filter by the object’s `otpBackupCodes` field. */
  otpBackupCodes?: Maybe<StringFilter>;
  /** Filter by the object’s `publicEmail` field. */
  publicEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `dashboard` field. */
  dashboard?: Maybe<IntFilter>;
  /** Filter by the object’s `projectView` field. */
  projectView?: Maybe<IntFilter>;
  /** Filter by the object’s `consumedTimestep` field. */
  consumedTimestep?: Maybe<IntFilter>;
  /** Filter by the object’s `layout` field. */
  layout?: Maybe<IntFilter>;
  /** Filter by the object’s `hideProjectLimit` field. */
  hideProjectLimit?: Maybe<BooleanFilter>;
  /** Filter by the object’s `note` field. */
  note?: Maybe<StringFilter>;
  /** Filter by the object’s `unlockToken` field. */
  unlockToken?: Maybe<StringFilter>;
  /** Filter by the object’s `otpGracePeriodStartedAt` field. */
  otpGracePeriodStartedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `external` field. */
  external?: Maybe<BooleanFilter>;
  /** Filter by the object’s `incomingEmailToken` field. */
  incomingEmailToken?: Maybe<StringFilter>;
  /** Filter by the object’s `auditor` field. */
  auditor?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requireTwoFactorAuthenticationFromGroup` field. */
  requireTwoFactorAuthenticationFromGroup?: Maybe<BooleanFilter>;
  /** Filter by the object’s `twoFactorGracePeriod` field. */
  twoFactorGracePeriod?: Maybe<IntFilter>;
  /** Filter by the object’s `lastActivityOn` field. */
  lastActivityOn?: Maybe<DateFilter>;
  /** Filter by the object’s `notifiedOfOwnActivity` field. */
  notifiedOfOwnActivity?: Maybe<BooleanFilter>;
  /** Filter by the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<StringFilter>;
  /** Filter by the object’s `emailOptedIn` field. */
  emailOptedIn?: Maybe<BooleanFilter>;
  /** Filter by the object’s `emailOptedInIp` field. */
  emailOptedInIp?: Maybe<StringFilter>;
  /** Filter by the object’s `emailOptedInSourceId` field. */
  emailOptedInSourceId?: Maybe<IntFilter>;
  /** Filter by the object’s `emailOptedInAt` field. */
  emailOptedInAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `themeId` field. */
  themeId?: Maybe<IntFilter>;
  /** Filter by the object’s `acceptedTermId` field. */
  acceptedTermId?: Maybe<IntFilter>;
  /** Filter by the object’s `feedToken` field. */
  feedToken?: Maybe<StringFilter>;
  /** Filter by the object’s `privateProfile` field. */
  privateProfile?: Maybe<BooleanFilter>;
  /** Filter by the object’s `roadmapLayout` field. */
  roadmapLayout?: Maybe<IntFilter>;
  /** Filter by the object’s `includePrivateContributions` field. */
  includePrivateContributions?: Maybe<BooleanFilter>;
  /** Filter by the object’s `commitEmail` field. */
  commitEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `groupView` field. */
  groupView?: Maybe<IntFilter>;
  /** Filter by the object’s `managingGroupId` field. */
  managingGroupId?: Maybe<IntFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `staticObjectToken` field. */
  staticObjectToken?: Maybe<StringFilter>;
  /** Filter by the object’s `role` field. */
  role?: Maybe<IntFilter>;
  /** Filter by the object’s `userType` field. */
  userType?: Maybe<IntFilter>;
  /** Filter by the object’s `staticObjectTokenEncrypted` field. */
  staticObjectTokenEncrypted?: Maybe<StringFilter>;
  /** Filter by the object’s `otpSecretExpiresAt` field. */
  otpSecretExpiresAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `onboardingInProgress` field. */
  onboardingInProgress?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MedigyUserFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MedigyUserFilter>>;
  /** Negates the expression. */
  not?: Maybe<MedigyUserFilter>;
};

/** An input for mutations affecting `MedigyUser` */
export type MedigyUserInput = {
  id?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  encryptedPassword?: Maybe<Scalars['String']>;
  resetPasswordToken?: Maybe<Scalars['String']>;
  resetPasswordSentAt?: Maybe<Scalars['Datetime']>;
  rememberCreatedAt?: Maybe<Scalars['Datetime']>;
  signInCount?: Maybe<Scalars['Int']>;
  currentSignInAt?: Maybe<Scalars['Datetime']>;
  lastSignInAt?: Maybe<Scalars['Datetime']>;
  currentSignInIp?: Maybe<Scalars['String']>;
  lastSignInIp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  name?: Maybe<Scalars['String']>;
  admin?: Maybe<Scalars['Boolean']>;
  projectsLimit?: Maybe<Scalars['Int']>;
  failedAttempts?: Maybe<Scalars['Int']>;
  lockedAt?: Maybe<Scalars['Datetime']>;
  username?: Maybe<Scalars['String']>;
  canCreateGroup?: Maybe<Scalars['Boolean']>;
  canCreateTeam?: Maybe<Scalars['Boolean']>;
  state?: Maybe<Scalars['String']>;
  colorSchemeId?: Maybe<Scalars['Int']>;
  passwordExpiresAt?: Maybe<Scalars['Datetime']>;
  createdById?: Maybe<Scalars['Int']>;
  lastCredentialCheckAt?: Maybe<Scalars['Datetime']>;
  avatar?: Maybe<Scalars['String']>;
  confirmationToken?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['Datetime']>;
  confirmationSentAt?: Maybe<Scalars['Datetime']>;
  unconfirmedEmail?: Maybe<Scalars['String']>;
  hideNoSshKey?: Maybe<Scalars['Boolean']>;
  adminEmailUnsubscribedAt?: Maybe<Scalars['Datetime']>;
  notificationEmail?: Maybe<Scalars['String']>;
  hideNoPassword?: Maybe<Scalars['Boolean']>;
  passwordAutomaticallySet?: Maybe<Scalars['Boolean']>;
  encryptedOtpSecret?: Maybe<Scalars['String']>;
  encryptedOtpSecretIv?: Maybe<Scalars['String']>;
  encryptedOtpSecretSalt?: Maybe<Scalars['String']>;
  otpRequiredForLogin?: Maybe<Scalars['Boolean']>;
  otpBackupCodes?: Maybe<Scalars['String']>;
  publicEmail?: Maybe<Scalars['String']>;
  dashboard?: Maybe<Scalars['Int']>;
  projectView?: Maybe<Scalars['Int']>;
  consumedTimestep?: Maybe<Scalars['Int']>;
  layout?: Maybe<Scalars['Int']>;
  hideProjectLimit?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  unlockToken?: Maybe<Scalars['String']>;
  otpGracePeriodStartedAt?: Maybe<Scalars['Datetime']>;
  external?: Maybe<Scalars['Boolean']>;
  incomingEmailToken?: Maybe<Scalars['String']>;
  auditor?: Maybe<Scalars['Boolean']>;
  requireTwoFactorAuthenticationFromGroup?: Maybe<Scalars['Boolean']>;
  twoFactorGracePeriod?: Maybe<Scalars['Int']>;
  lastActivityOn?: Maybe<Scalars['Date']>;
  notifiedOfOwnActivity?: Maybe<Scalars['Boolean']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  emailOptedIn?: Maybe<Scalars['Boolean']>;
  emailOptedInIp?: Maybe<Scalars['String']>;
  emailOptedInSourceId?: Maybe<Scalars['Int']>;
  emailOptedInAt?: Maybe<Scalars['Datetime']>;
  themeId?: Maybe<Scalars['Int']>;
  acceptedTermId?: Maybe<Scalars['Int']>;
  feedToken?: Maybe<Scalars['String']>;
  privateProfile?: Maybe<Scalars['Boolean']>;
  roadmapLayout?: Maybe<Scalars['Int']>;
  includePrivateContributions?: Maybe<Scalars['Boolean']>;
  commitEmail?: Maybe<Scalars['String']>;
  groupView?: Maybe<Scalars['Int']>;
  managingGroupId?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  staticObjectToken?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['Int']>;
  userType?: Maybe<Scalars['Int']>;
  staticObjectTokenEncrypted?: Maybe<Scalars['String']>;
  otpSecretExpiresAt?: Maybe<Scalars['Datetime']>;
  onboardingInProgress?: Maybe<Scalars['Boolean']>;
};

/** An input for mutations affecting `MedigyUserProfile` */
export type MedigyUserProfileInput = {
  accessToken?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  healthcarepersonalcheck?: Maybe<Scalars['String']>;
  professionidentifier?: Maybe<Scalars['String']>;
  dateofbirth?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  contactmobilephone?: Maybe<Scalars['String']>;
  termsconditionsagreement?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  skype?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  jobtitle?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

/** A connection to a list of `MedigyUser` values. */
export type MedigyUsersConnection = {
  __typename?: 'MedigyUsersConnection';
  /** A list of `MedigyUser` objects. */
  nodes: Array<Maybe<MedigyUser>>;
  /** A list of edges which contains the `MedigyUser` and cursor to aid in pagination. */
  edges: Array<MedigyUsersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MedigyUser` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MedigyUser` edge in the connection. */
export type MedigyUsersEdge = {
  __typename?: 'MedigyUsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MedigyUser` at the end of the edge. */
  node?: Maybe<MedigyUser>;
};

/** Methods to use when ordering `MedigyUser`. */
export enum MedigyUsersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  EncryptedPasswordAsc = 'ENCRYPTED_PASSWORD_ASC',
  EncryptedPasswordDesc = 'ENCRYPTED_PASSWORD_DESC',
  ResetPasswordTokenAsc = 'RESET_PASSWORD_TOKEN_ASC',
  ResetPasswordTokenDesc = 'RESET_PASSWORD_TOKEN_DESC',
  ResetPasswordSentAtAsc = 'RESET_PASSWORD_SENT_AT_ASC',
  ResetPasswordSentAtDesc = 'RESET_PASSWORD_SENT_AT_DESC',
  RememberCreatedAtAsc = 'REMEMBER_CREATED_AT_ASC',
  RememberCreatedAtDesc = 'REMEMBER_CREATED_AT_DESC',
  SignInCountAsc = 'SIGN_IN_COUNT_ASC',
  SignInCountDesc = 'SIGN_IN_COUNT_DESC',
  CurrentSignInAtAsc = 'CURRENT_SIGN_IN_AT_ASC',
  CurrentSignInAtDesc = 'CURRENT_SIGN_IN_AT_DESC',
  LastSignInAtAsc = 'LAST_SIGN_IN_AT_ASC',
  LastSignInAtDesc = 'LAST_SIGN_IN_AT_DESC',
  CurrentSignInIpAsc = 'CURRENT_SIGN_IN_IP_ASC',
  CurrentSignInIpDesc = 'CURRENT_SIGN_IN_IP_DESC',
  LastSignInIpAsc = 'LAST_SIGN_IN_IP_ASC',
  LastSignInIpDesc = 'LAST_SIGN_IN_IP_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  AdminAsc = 'ADMIN_ASC',
  AdminDesc = 'ADMIN_DESC',
  ProjectsLimitAsc = 'PROJECTS_LIMIT_ASC',
  ProjectsLimitDesc = 'PROJECTS_LIMIT_DESC',
  FailedAttemptsAsc = 'FAILED_ATTEMPTS_ASC',
  FailedAttemptsDesc = 'FAILED_ATTEMPTS_DESC',
  LockedAtAsc = 'LOCKED_AT_ASC',
  LockedAtDesc = 'LOCKED_AT_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  CanCreateGroupAsc = 'CAN_CREATE_GROUP_ASC',
  CanCreateGroupDesc = 'CAN_CREATE_GROUP_DESC',
  CanCreateTeamAsc = 'CAN_CREATE_TEAM_ASC',
  CanCreateTeamDesc = 'CAN_CREATE_TEAM_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  ColorSchemeIdAsc = 'COLOR_SCHEME_ID_ASC',
  ColorSchemeIdDesc = 'COLOR_SCHEME_ID_DESC',
  PasswordExpiresAtAsc = 'PASSWORD_EXPIRES_AT_ASC',
  PasswordExpiresAtDesc = 'PASSWORD_EXPIRES_AT_DESC',
  CreatedByIdAsc = 'CREATED_BY_ID_ASC',
  CreatedByIdDesc = 'CREATED_BY_ID_DESC',
  LastCredentialCheckAtAsc = 'LAST_CREDENTIAL_CHECK_AT_ASC',
  LastCredentialCheckAtDesc = 'LAST_CREDENTIAL_CHECK_AT_DESC',
  AvatarAsc = 'AVATAR_ASC',
  AvatarDesc = 'AVATAR_DESC',
  ConfirmationTokenAsc = 'CONFIRMATION_TOKEN_ASC',
  ConfirmationTokenDesc = 'CONFIRMATION_TOKEN_DESC',
  ConfirmedAtAsc = 'CONFIRMED_AT_ASC',
  ConfirmedAtDesc = 'CONFIRMED_AT_DESC',
  ConfirmationSentAtAsc = 'CONFIRMATION_SENT_AT_ASC',
  ConfirmationSentAtDesc = 'CONFIRMATION_SENT_AT_DESC',
  UnconfirmedEmailAsc = 'UNCONFIRMED_EMAIL_ASC',
  UnconfirmedEmailDesc = 'UNCONFIRMED_EMAIL_DESC',
  HideNoSshKeyAsc = 'HIDE_NO_SSH_KEY_ASC',
  HideNoSshKeyDesc = 'HIDE_NO_SSH_KEY_DESC',
  AdminEmailUnsubscribedAtAsc = 'ADMIN_EMAIL_UNSUBSCRIBED_AT_ASC',
  AdminEmailUnsubscribedAtDesc = 'ADMIN_EMAIL_UNSUBSCRIBED_AT_DESC',
  NotificationEmailAsc = 'NOTIFICATION_EMAIL_ASC',
  NotificationEmailDesc = 'NOTIFICATION_EMAIL_DESC',
  HideNoPasswordAsc = 'HIDE_NO_PASSWORD_ASC',
  HideNoPasswordDesc = 'HIDE_NO_PASSWORD_DESC',
  PasswordAutomaticallySetAsc = 'PASSWORD_AUTOMATICALLY_SET_ASC',
  PasswordAutomaticallySetDesc = 'PASSWORD_AUTOMATICALLY_SET_DESC',
  EncryptedOtpSecretAsc = 'ENCRYPTED_OTP_SECRET_ASC',
  EncryptedOtpSecretDesc = 'ENCRYPTED_OTP_SECRET_DESC',
  EncryptedOtpSecretIvAsc = 'ENCRYPTED_OTP_SECRET_IV_ASC',
  EncryptedOtpSecretIvDesc = 'ENCRYPTED_OTP_SECRET_IV_DESC',
  EncryptedOtpSecretSaltAsc = 'ENCRYPTED_OTP_SECRET_SALT_ASC',
  EncryptedOtpSecretSaltDesc = 'ENCRYPTED_OTP_SECRET_SALT_DESC',
  OtpRequiredForLoginAsc = 'OTP_REQUIRED_FOR_LOGIN_ASC',
  OtpRequiredForLoginDesc = 'OTP_REQUIRED_FOR_LOGIN_DESC',
  OtpBackupCodesAsc = 'OTP_BACKUP_CODES_ASC',
  OtpBackupCodesDesc = 'OTP_BACKUP_CODES_DESC',
  PublicEmailAsc = 'PUBLIC_EMAIL_ASC',
  PublicEmailDesc = 'PUBLIC_EMAIL_DESC',
  DashboardAsc = 'DASHBOARD_ASC',
  DashboardDesc = 'DASHBOARD_DESC',
  ProjectViewAsc = 'PROJECT_VIEW_ASC',
  ProjectViewDesc = 'PROJECT_VIEW_DESC',
  ConsumedTimestepAsc = 'CONSUMED_TIMESTEP_ASC',
  ConsumedTimestepDesc = 'CONSUMED_TIMESTEP_DESC',
  LayoutAsc = 'LAYOUT_ASC',
  LayoutDesc = 'LAYOUT_DESC',
  HideProjectLimitAsc = 'HIDE_PROJECT_LIMIT_ASC',
  HideProjectLimitDesc = 'HIDE_PROJECT_LIMIT_DESC',
  NoteAsc = 'NOTE_ASC',
  NoteDesc = 'NOTE_DESC',
  UnlockTokenAsc = 'UNLOCK_TOKEN_ASC',
  UnlockTokenDesc = 'UNLOCK_TOKEN_DESC',
  OtpGracePeriodStartedAtAsc = 'OTP_GRACE_PERIOD_STARTED_AT_ASC',
  OtpGracePeriodStartedAtDesc = 'OTP_GRACE_PERIOD_STARTED_AT_DESC',
  ExternalAsc = 'EXTERNAL_ASC',
  ExternalDesc = 'EXTERNAL_DESC',
  IncomingEmailTokenAsc = 'INCOMING_EMAIL_TOKEN_ASC',
  IncomingEmailTokenDesc = 'INCOMING_EMAIL_TOKEN_DESC',
  AuditorAsc = 'AUDITOR_ASC',
  AuditorDesc = 'AUDITOR_DESC',
  RequireTwoFactorAuthenticationFromGroupAsc = 'REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP_ASC',
  RequireTwoFactorAuthenticationFromGroupDesc = 'REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP_DESC',
  TwoFactorGracePeriodAsc = 'TWO_FACTOR_GRACE_PERIOD_ASC',
  TwoFactorGracePeriodDesc = 'TWO_FACTOR_GRACE_PERIOD_DESC',
  LastActivityOnAsc = 'LAST_ACTIVITY_ON_ASC',
  LastActivityOnDesc = 'LAST_ACTIVITY_ON_DESC',
  NotifiedOfOwnActivityAsc = 'NOTIFIED_OF_OWN_ACTIVITY_ASC',
  NotifiedOfOwnActivityDesc = 'NOTIFIED_OF_OWN_ACTIVITY_DESC',
  PreferredLanguageAsc = 'PREFERRED_LANGUAGE_ASC',
  PreferredLanguageDesc = 'PREFERRED_LANGUAGE_DESC',
  EmailOptedInAsc = 'EMAIL_OPTED_IN_ASC',
  EmailOptedInDesc = 'EMAIL_OPTED_IN_DESC',
  EmailOptedInIpAsc = 'EMAIL_OPTED_IN_IP_ASC',
  EmailOptedInIpDesc = 'EMAIL_OPTED_IN_IP_DESC',
  EmailOptedInSourceIdAsc = 'EMAIL_OPTED_IN_SOURCE_ID_ASC',
  EmailOptedInSourceIdDesc = 'EMAIL_OPTED_IN_SOURCE_ID_DESC',
  EmailOptedInAtAsc = 'EMAIL_OPTED_IN_AT_ASC',
  EmailOptedInAtDesc = 'EMAIL_OPTED_IN_AT_DESC',
  ThemeIdAsc = 'THEME_ID_ASC',
  ThemeIdDesc = 'THEME_ID_DESC',
  AcceptedTermIdAsc = 'ACCEPTED_TERM_ID_ASC',
  AcceptedTermIdDesc = 'ACCEPTED_TERM_ID_DESC',
  FeedTokenAsc = 'FEED_TOKEN_ASC',
  FeedTokenDesc = 'FEED_TOKEN_DESC',
  PrivateProfileAsc = 'PRIVATE_PROFILE_ASC',
  PrivateProfileDesc = 'PRIVATE_PROFILE_DESC',
  RoadmapLayoutAsc = 'ROADMAP_LAYOUT_ASC',
  RoadmapLayoutDesc = 'ROADMAP_LAYOUT_DESC',
  IncludePrivateContributionsAsc = 'INCLUDE_PRIVATE_CONTRIBUTIONS_ASC',
  IncludePrivateContributionsDesc = 'INCLUDE_PRIVATE_CONTRIBUTIONS_DESC',
  CommitEmailAsc = 'COMMIT_EMAIL_ASC',
  CommitEmailDesc = 'COMMIT_EMAIL_DESC',
  GroupViewAsc = 'GROUP_VIEW_ASC',
  GroupViewDesc = 'GROUP_VIEW_DESC',
  ManagingGroupIdAsc = 'MANAGING_GROUP_ID_ASC',
  ManagingGroupIdDesc = 'MANAGING_GROUP_ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  StaticObjectTokenAsc = 'STATIC_OBJECT_TOKEN_ASC',
  StaticObjectTokenDesc = 'STATIC_OBJECT_TOKEN_DESC',
  RoleAsc = 'ROLE_ASC',
  RoleDesc = 'ROLE_DESC',
  UserTypeAsc = 'USER_TYPE_ASC',
  UserTypeDesc = 'USER_TYPE_DESC',
  StaticObjectTokenEncryptedAsc = 'STATIC_OBJECT_TOKEN_ENCRYPTED_ASC',
  StaticObjectTokenEncryptedDesc = 'STATIC_OBJECT_TOKEN_ENCRYPTED_DESC',
  OtpSecretExpiresAtAsc = 'OTP_SECRET_EXPIRES_AT_ASC',
  OtpSecretExpiresAtDesc = 'OTP_SECRET_EXPIRES_AT_DESC',
  OnboardingInProgressAsc = 'ONBOARDING_IN_PROGRESS_ASC',
  OnboardingInProgressDesc = 'ONBOARDING_IN_PROGRESS_DESC'
}

export type MemberInstititution = {
  __typename?: 'MemberInstititution';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  companySize?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MemberInstititutionResponse = {
  __typename?: 'MemberInstititutionResponse';
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  instituionList?: Maybe<Array<Maybe<MemberInstititution>>>;
};

export type MergePendingList = {
  __typename?: 'MergePendingList';
  id: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  offeringPath?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  iid?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `MergePendingList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MergePendingListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mergeStatus` field. */
  mergeStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringPath` field. */
  offeringPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `iid` field. */
  iid?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `MergePendingList` object types. All fields are combined with a logical ‘and.’ */
export type MergePendingListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `mergeStatus` field. */
  mergeStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringPath` field. */
  offeringPath?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `iid` field. */
  iid?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MergePendingListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MergePendingListFilter>>;
  /** Negates the expression. */
  not?: Maybe<MergePendingListFilter>;
};

/** A connection to a list of `MergePendingList` values. */
export type MergePendingListsConnection = {
  __typename?: 'MergePendingListsConnection';
  /** A list of `MergePendingList` objects. */
  nodes: Array<Maybe<MergePendingList>>;
  /** A list of edges which contains the `MergePendingList` and cursor to aid in pagination. */
  edges: Array<MergePendingListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MergePendingList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MergePendingList` edge in the connection. */
export type MergePendingListsEdge = {
  __typename?: 'MergePendingListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MergePendingList` at the end of the edge. */
  node?: Maybe<MergePendingList>;
};

/** Methods to use when ordering `MergePendingList`. */
export enum MergePendingListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  MergeStatusAsc = 'MERGE_STATUS_ASC',
  MergeStatusDesc = 'MERGE_STATUS_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  OfferingPathAsc = 'OFFERING_PATH_ASC',
  OfferingPathDesc = 'OFFERING_PATH_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  IidAsc = 'IID_ASC',
  IidDesc = 'IID_DESC'
}

/** An input for mutations affecting `MetaContent` */
export type MetaContentInput = {
  patientId?: Maybe<Scalars['UUID']>;
  systemName?: Maybe<Scalars['String']>;
  systemCode?: Maybe<Scalars['String']>;
  patientResouceId?: Maybe<Scalars['String']>;
  responseStatusId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  statusMsg?: Maybe<Scalars['String']>;
  statusCode?: Maybe<Scalars['Int']>;
};

export type MetricsViewAll = {
  __typename?: 'MetricsViewAll';
  metricsName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  metricsGroup?: Maybe<Scalars['String']>;
  metricsCount?: Maybe<Scalars['Int']>;
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `MetricsViewAll` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type MetricsViewAllCondition = {
  /** Checks for equality with the object’s `metricsName` field. */
  metricsName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCount` field. */
  metricsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `generatedDate` field. */
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `MetricsViewAll` object types. All fields are combined with a logical ‘and.’ */
export type MetricsViewAllFilter = {
  /** Filter by the object’s `metricsName` field. */
  metricsName?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCount` field. */
  metricsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `generatedDate` field. */
  generatedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MetricsViewAllFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MetricsViewAllFilter>>;
  /** Negates the expression. */
  not?: Maybe<MetricsViewAllFilter>;
};

/** A connection to a list of `MetricsViewAll` values. */
export type MetricsViewAllsConnection = {
  __typename?: 'MetricsViewAllsConnection';
  /** A list of `MetricsViewAll` objects. */
  nodes: Array<Maybe<MetricsViewAll>>;
  /** A list of edges which contains the `MetricsViewAll` and cursor to aid in pagination. */
  edges: Array<MetricsViewAllsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MetricsViewAll` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MetricsViewAll` edge in the connection. */
export type MetricsViewAllsEdge = {
  __typename?: 'MetricsViewAllsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MetricsViewAll` at the end of the edge. */
  node?: Maybe<MetricsViewAll>;
};

/** Methods to use when ordering `MetricsViewAll`. */
export enum MetricsViewAllsOrderBy {
  Natural = 'NATURAL',
  MetricsNameAsc = 'METRICS_NAME_ASC',
  MetricsNameDesc = 'METRICS_NAME_DESC',
  MetricsCategoryAsc = 'METRICS_CATEGORY_ASC',
  MetricsCategoryDesc = 'METRICS_CATEGORY_DESC',
  MetricsGroupAsc = 'METRICS_GROUP_ASC',
  MetricsGroupDesc = 'METRICS_GROUP_DESC',
  MetricsCountAsc = 'METRICS_COUNT_ASC',
  MetricsCountDesc = 'METRICS_COUNT_DESC',
  GeneratedDateAsc = 'GENERATED_DATE_ASC',
  GeneratedDateDesc = 'GENERATED_DATE_DESC'
}

export type MetricsViewCurrentWeek = {
  __typename?: 'MetricsViewCurrentWeek';
  metricsName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  metricsGroup?: Maybe<Scalars['String']>;
  metricsCount?: Maybe<Scalars['Int']>;
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `MetricsViewCurrentWeek` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type MetricsViewCurrentWeekCondition = {
  /** Checks for equality with the object’s `metricsName` field. */
  metricsName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCount` field. */
  metricsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `generatedDate` field. */
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `MetricsViewCurrentWeek` object types. All fields are combined with a logical ‘and.’ */
export type MetricsViewCurrentWeekFilter = {
  /** Filter by the object’s `metricsName` field. */
  metricsName?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCount` field. */
  metricsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `generatedDate` field. */
  generatedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MetricsViewCurrentWeekFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MetricsViewCurrentWeekFilter>>;
  /** Negates the expression. */
  not?: Maybe<MetricsViewCurrentWeekFilter>;
};

export type MetricsViewCurrentWeekV1 = {
  __typename?: 'MetricsViewCurrentWeekV1';
  metricsName?: Maybe<Scalars['String']>;
  metricsCategory?: Maybe<Scalars['String']>;
  metricsGroup?: Maybe<Scalars['String']>;
  metricsCount?: Maybe<Scalars['Int']>;
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `MetricsViewCurrentWeekV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type MetricsViewCurrentWeekV1Condition = {
  /** Checks for equality with the object’s `metricsName` field. */
  metricsName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metricsCount` field. */
  metricsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `generatedDate` field. */
  generatedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `MetricsViewCurrentWeekV1` object types. All fields are combined with a logical ‘and.’ */
export type MetricsViewCurrentWeekV1Filter = {
  /** Filter by the object’s `metricsName` field. */
  metricsName?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCategory` field. */
  metricsCategory?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsGroup` field. */
  metricsGroup?: Maybe<StringFilter>;
  /** Filter by the object’s `metricsCount` field. */
  metricsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `generatedDate` field. */
  generatedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MetricsViewCurrentWeekV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MetricsViewCurrentWeekV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<MetricsViewCurrentWeekV1Filter>;
};

/** A connection to a list of `MetricsViewCurrentWeekV1` values. */
export type MetricsViewCurrentWeekV1sConnection = {
  __typename?: 'MetricsViewCurrentWeekV1sConnection';
  /** A list of `MetricsViewCurrentWeekV1` objects. */
  nodes: Array<Maybe<MetricsViewCurrentWeekV1>>;
  /** A list of edges which contains the `MetricsViewCurrentWeekV1` and cursor to aid in pagination. */
  edges: Array<MetricsViewCurrentWeekV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MetricsViewCurrentWeekV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MetricsViewCurrentWeekV1` edge in the connection. */
export type MetricsViewCurrentWeekV1sEdge = {
  __typename?: 'MetricsViewCurrentWeekV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MetricsViewCurrentWeekV1` at the end of the edge. */
  node?: Maybe<MetricsViewCurrentWeekV1>;
};

/** Methods to use when ordering `MetricsViewCurrentWeekV1`. */
export enum MetricsViewCurrentWeekV1sOrderBy {
  Natural = 'NATURAL',
  MetricsNameAsc = 'METRICS_NAME_ASC',
  MetricsNameDesc = 'METRICS_NAME_DESC',
  MetricsCategoryAsc = 'METRICS_CATEGORY_ASC',
  MetricsCategoryDesc = 'METRICS_CATEGORY_DESC',
  MetricsGroupAsc = 'METRICS_GROUP_ASC',
  MetricsGroupDesc = 'METRICS_GROUP_DESC',
  MetricsCountAsc = 'METRICS_COUNT_ASC',
  MetricsCountDesc = 'METRICS_COUNT_DESC',
  GeneratedDateAsc = 'GENERATED_DATE_ASC',
  GeneratedDateDesc = 'GENERATED_DATE_DESC'
}

/** A connection to a list of `MetricsViewCurrentWeek` values. */
export type MetricsViewCurrentWeeksConnection = {
  __typename?: 'MetricsViewCurrentWeeksConnection';
  /** A list of `MetricsViewCurrentWeek` objects. */
  nodes: Array<Maybe<MetricsViewCurrentWeek>>;
  /** A list of edges which contains the `MetricsViewCurrentWeek` and cursor to aid in pagination. */
  edges: Array<MetricsViewCurrentWeeksEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MetricsViewCurrentWeek` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MetricsViewCurrentWeek` edge in the connection. */
export type MetricsViewCurrentWeeksEdge = {
  __typename?: 'MetricsViewCurrentWeeksEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MetricsViewCurrentWeek` at the end of the edge. */
  node?: Maybe<MetricsViewCurrentWeek>;
};

/** Methods to use when ordering `MetricsViewCurrentWeek`. */
export enum MetricsViewCurrentWeeksOrderBy {
  Natural = 'NATURAL',
  MetricsNameAsc = 'METRICS_NAME_ASC',
  MetricsNameDesc = 'METRICS_NAME_DESC',
  MetricsCategoryAsc = 'METRICS_CATEGORY_ASC',
  MetricsCategoryDesc = 'METRICS_CATEGORY_DESC',
  MetricsGroupAsc = 'METRICS_GROUP_ASC',
  MetricsGroupDesc = 'METRICS_GROUP_DESC',
  MetricsCountAsc = 'METRICS_COUNT_ASC',
  MetricsCountDesc = 'METRICS_COUNT_DESC',
  GeneratedDateAsc = 'GENERATED_DATE_ASC',
  GeneratedDateDesc = 'GENERATED_DATE_DESC'
}

/** All input for the `modifyDependentInfo` mutation. */
export type ModifyDependentInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  dependentId?: Maybe<Scalars['UUID']>;
  pdr?: Maybe<UserDemographicInput>;
};

/** The output of our `modifyDependentInfo` mutation. */
export type ModifyDependentInfoPayload = {
  __typename?: 'ModifyDependentInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `modifyPatientInfo` mutation. */
export type ModifyPatientInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  pdr?: Maybe<UserDemographicInput>;
};

/** The output of our `modifyPatientInfo` mutation. */
export type ModifyPatientInfoPayload = {
  __typename?: 'ModifyPatientInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Creates a single `FileUpload`. */
  createFileUpload?: Maybe<CreateFileUploadPayload>;
  /** Creates a single `EthnicityMasterV1`. */
  createEthnicityMasterV1?: Maybe<CreateEthnicityMasterV1Payload>;
  /** Creates a single `GenderMasterV1`. */
  createGenderMasterV1?: Maybe<CreateGenderMasterV1Payload>;
  /** Creates a single `MaritalStatusMasterV1`. */
  createMaritalStatusMasterV1?: Maybe<CreateMaritalStatusMasterV1Payload>;
  /** Creates a single `OccupationIndustryMasterV1`. */
  createOccupationIndustryMasterV1?: Maybe<CreateOccupationIndustryMasterV1Payload>;
  /** Creates a single `OrganizationGroupMasterV1`. */
  createOrganizationGroupMasterV1?: Maybe<CreateOrganizationGroupMasterV1Payload>;
  /** Creates a single `PreferredLanguageMasterV1`. */
  createPreferredLanguageMasterV1?: Maybe<CreatePreferredLanguageMasterV1Payload>;
  /** Creates a single `RaceMasterV1`. */
  createRaceMasterV1?: Maybe<CreateRaceMasterV1Payload>;
  /** Creates a single `RelatedPersonRelationshipMaster`. */
  createRelatedPersonRelationshipMaster?: Maybe<CreateRelatedPersonRelationshipMasterPayload>;
  /** Creates a single `SexMasterV1`. */
  createSexMasterV1?: Maybe<CreateSexMasterV1Payload>;
  /** Creates a single `SexualOrientationMasterV1`. */
  createSexualOrientationMasterV1?: Maybe<CreateSexualOrientationMasterV1Payload>;
  /** Creates a single `StatusMaster`. */
  createStatusMaster?: Maybe<CreateStatusMasterPayload>;
  /** Creates a single `BillingRequestCategoryMaster`. */
  createBillingRequestCategoryMaster?: Maybe<CreateBillingRequestCategoryMasterPayload>;
  /** Creates a single `BillingRequestTypeMaster`. */
  createBillingRequestTypeMaster?: Maybe<CreateBillingRequestTypeMasterPayload>;
  /** Creates a single `CommunicationRequestMaster`. */
  createCommunicationRequestMaster?: Maybe<CreateCommunicationRequestMasterPayload>;
  /** Creates a single `CommunicationRequestMasterV1`. */
  createCommunicationRequestMasterV1?: Maybe<CreateCommunicationRequestMasterV1Payload>;
  /** Creates a single `CountryMasterV1`. */
  createCountryMasterV1?: Maybe<CreateCountryMasterV1Payload>;
  /** Creates a single `DenialLetterReasonMaster`. */
  createDenialLetterReasonMaster?: Maybe<CreateDenialLetterReasonMasterPayload>;
  /** Creates a single `FeedbackQueryTypeMaster`. */
  createFeedbackQueryTypeMaster?: Maybe<CreateFeedbackQueryTypeMasterPayload>;
  /** Creates a single `GetChatroomDetail`. */
  createGetChatroomDetail?: Maybe<CreateGetChatroomDetailPayload>;
  /** Creates a single `HealthAuthAuthorizationTitleMaster`. */
  createHealthAuthAuthorizationTitleMaster?: Maybe<CreateHealthAuthAuthorizationTitleMasterPayload>;
  /** Creates a single `ImpactSeverityMaster`. */
  createImpactSeverityMaster?: Maybe<CreateImpactSeverityMasterPayload>;
  /** Creates a single `InformationBlockingExceptionsMaster`. */
  createInformationBlockingExceptionsMaster?: Maybe<CreateInformationBlockingExceptionsMasterPayload>;
  /** Creates a single `IssueDescriptionMaster`. */
  createIssueDescriptionMaster?: Maybe<CreateIssueDescriptionMasterPayload>;
  /** Creates a single `IssueDescriptionMastersMedical`. */
  createIssueDescriptionMastersMedical?: Maybe<CreateIssueDescriptionMastersMedicalPayload>;
  /** Creates a single `IssueImpactMaster`. */
  createIssueImpactMaster?: Maybe<CreateIssueImpactMasterPayload>;
  /** Creates a single `ObtainRecordTypeMaster`. */
  createObtainRecordTypeMaster?: Maybe<CreateObtainRecordTypeMasterPayload>;
  /** Creates a single `PreferredPronounsMaster`. */
  createPreferredPronounsMaster?: Maybe<CreatePreferredPronounsMasterPayload>;
  /** Creates a single `RelationshipType`. */
  createRelationshipType?: Maybe<CreateRelationshipTypePayload>;
  /** Creates a single `RequestPriorityMaster`. */
  createRequestPriorityMaster?: Maybe<CreateRequestPriorityMasterPayload>;
  /** Creates a single `RequestStatusMaster`. */
  createRequestStatusMaster?: Maybe<CreateRequestStatusMasterPayload>;
  /** Creates a single `RequestToken`. */
  createRequestToken?: Maybe<CreateRequestTokenPayload>;
  /** Creates a single `RequestTypeMaster`. */
  createRequestTypeMaster?: Maybe<CreateRequestTypeMasterPayload>;
  /** Creates a single `ServiceCategoryMaster`. */
  createServiceCategoryMaster?: Maybe<CreateServiceCategoryMasterPayload>;
  /** Creates a single `SourceNatureMaster`. */
  createSourceNatureMaster?: Maybe<CreateSourceNatureMasterPayload>;
  /** Creates a single `StateMasterV1`. */
  createStateMasterV1?: Maybe<CreateStateMasterV1Payload>;
  /** Creates a single `SubstanceDisorderInformationMasterV1`. */
  createSubstanceDisorderInformationMasterV1?: Maybe<CreateSubstanceDisorderInformationMasterV1Payload>;
  /** Creates a single `UseDisorderAuthorizationTitleMaster`. */
  createUseDisorderAuthorizationTitleMaster?: Maybe<CreateUseDisorderAuthorizationTitleMasterPayload>;
  /** Creates a single `MediaType`. */
  createMediaType?: Maybe<CreateMediaTypePayload>;
  /** Creates a single `InstitutionBrokenUrlList`. */
  createInstitutionBrokenUrlList?: Maybe<CreateInstitutionBrokenUrlListPayload>;
  /** Creates a single `MedigyNamespace`. */
  createMedigyNamespace?: Maybe<CreateMedigyNamespacePayload>;
  /** Creates a single `OfferingBrokenUrlList`. */
  createOfferingBrokenUrlList?: Maybe<CreateOfferingBrokenUrlListPayload>;
  /** Creates a single `SurveyFormUpdate`. */
  createSurveyFormUpdate?: Maybe<CreateSurveyFormUpdatePayload>;
  /** Creates a single `SurveyList`. */
  createSurveyList?: Maybe<CreateSurveyListPayload>;
  /** Creates a single `CountryList`. */
  createCountryList?: Maybe<CreateCountryListPayload>;
  /** Creates a single `MedicalGroup`. */
  createMedicalGroup?: Maybe<CreateMedicalGroupPayload>;
  /** Creates a single `StateList`. */
  createStateList?: Maybe<CreateStateListPayload>;
  /** Creates a single `MedigyMember`. */
  createMedigyMember?: Maybe<CreateMedigyMemberPayload>;
  /** Creates a single `MedigyUser`. */
  createMedigyUser?: Maybe<CreateMedigyUserPayload>;
  /** Updates a single `FileUpload` using its globally unique id and a patch. */
  updateFileUploadByNodeId?: Maybe<UpdateFileUploadPayload>;
  /** Updates a single `FileUpload` using a unique key and a patch. */
  updateFileUpload?: Maybe<UpdateFileUploadPayload>;
  /** Updates a single `MediaType` using a unique key and a patch. */
  updateMediaTypeByMimeTypeAndFileExtnAndLabel?: Maybe<UpdateMediaTypePayload>;
  /** Updates a single `SurveyFormUpdate` using its globally unique id and a patch. */
  updateSurveyFormUpdateByNodeId?: Maybe<UpdateSurveyFormUpdatePayload>;
  /** Updates a single `SurveyFormUpdate` using a unique key and a patch. */
  updateSurveyFormUpdate?: Maybe<UpdateSurveyFormUpdatePayload>;
  /** Deletes a single `FileUpload` using its globally unique id. */
  deleteFileUploadByNodeId?: Maybe<DeleteFileUploadPayload>;
  /** Deletes a single `FileUpload` using a unique key. */
  deleteFileUpload?: Maybe<DeleteFileUploadPayload>;
  /** Deletes a single `MediaType` using a unique key. */
  deleteMediaTypeByMimeTypeAndFileExtnAndLabel?: Maybe<DeleteMediaTypePayload>;
  /** Deletes a single `SurveyFormUpdate` using its globally unique id. */
  deleteSurveyFormUpdateByNodeId?: Maybe<DeleteSurveyFormUpdatePayload>;
  /** Deletes a single `SurveyFormUpdate` using a unique key. */
  deleteSurveyFormUpdate?: Maybe<DeleteSurveyFormUpdatePayload>;
  addDependent?: Maybe<AddDependentPayload>;
  addNewPatientV1?: Maybe<AddNewPatientV1Payload>;
  assignUserToOrganization?: Maybe<AssignUserToOrganizationPayload>;
  createDepartmentHdo?: Maybe<CreateDepartmentHdoPayload>;
  createDepartmentHdo1?: Maybe<CreateDepartmentHdo1Payload>;
  createDepartmentInParty?: Maybe<CreateDepartmentInPartyPayload>;
  createDomainRealms?: Maybe<CreateDomainRealmsPayload>;
  createJsonbFormat?: Maybe<CreateJsonbFormatPayload>;
  createJsonbFormatV1?: Maybe<CreateJsonbFormatV1Payload>;
  createJsonbFormatV2?: Maybe<CreateJsonbFormatV2Payload>;
  createNewGroupEntry?: Maybe<CreateNewGroupEntryPayload>;
  createOrganization?: Maybe<CreateOrganizationPayload>;
  createOrganizationDetail?: Maybe<CreateOrganizationDetailPayload>;
  createOrganizationHdo?: Maybe<CreateOrganizationHdoPayload>;
  createOrganizationHdo1?: Maybe<CreateOrganizationHdo1Payload>;
  createOrganizationPersonV1?: Maybe<CreateOrganizationPersonV1Payload>;
  createOrganizationRealm?: Maybe<CreateOrganizationRealmPayload>;
  createPartyDepartment?: Maybe<CreatePartyDepartmentPayload>;
  createPartyDepartmentV1?: Maybe<CreatePartyDepartmentV1Payload>;
  createPartyIdentifier?: Maybe<CreatePartyIdentifierPayload>;
  createPartyOrganization?: Maybe<CreatePartyOrganizationPayload>;
  createPartyOrganizationV1?: Maybe<CreatePartyOrganizationV1Payload>;
  createPartyRealm?: Maybe<CreatePartyRealmPayload>;
  createPartyRealmV1?: Maybe<CreatePartyRealmV1Payload>;
  createPartyRelation?: Maybe<CreatePartyRelationPayload>;
  createPatientDemographics?: Maybe<CreatePatientDemographicsPayload>;
  createPatientDemographicsV1?: Maybe<CreatePatientDemographicsV1Payload>;
  createPatientWithDependent?: Maybe<CreatePatientWithDependentPayload>;
  createPatientWithDependentV1?: Maybe<CreatePatientWithDependentV1Payload>;
  createPersonDemographics?: Maybe<CreatePersonDemographicsPayload>;
  createPersonDemographicsPatient?: Maybe<CreatePersonDemographicsPatientPayload>;
  createPersonDemographicsV1?: Maybe<CreatePersonDemographicsV1Payload>;
  createServiceDetails?: Maybe<CreateServiceDetailsPayload>;
  createUserInParty?: Maybe<CreateUserInPartyPayload>;
  getCurrentUser?: Maybe<GetCurrentUserPayload>;
  getExternalIntegrationConfigurationV1?: Maybe<GetExternalIntegrationConfigurationV1Payload>;
  getGitlabAccessToken?: Maybe<GetGitlabAccessTokenPayload>;
  getPatientVerificationStatus?: Maybe<GetPatientVerificationStatusPayload>;
  getUserType?: Maybe<GetUserTypePayload>;
  getVerifiedExternalPatientResourceId?: Maybe<GetVerifiedExternalPatientResourceIdPayload>;
  gitAddUserProfileUbh?: Maybe<GitAddUserProfileUbhPayload>;
  gitlabUserSyncV1?: Maybe<GitlabUserSyncV1Payload>;
  initIdentityVerificationV1?: Maybe<InitIdentityVerificationV1Payload>;
  insertDomainRealm?: Maybe<InsertDomainRealmPayload>;
  insertOrganizationRealm?: Maybe<InsertOrganizationRealmPayload>;
  loginUserSyncV1?: Maybe<LoginUserSyncV1Payload>;
  manageExternalSystemId?: Maybe<ManageExternalSystemIdPayload>;
  modifyDependentInfo?: Maybe<ModifyDependentInfoPayload>;
  modifyPatientInfo?: Maybe<ModifyPatientInfoPayload>;
  patientDetails?: Maybe<PatientDetailsPayload>;
  patientDetailsV1?: Maybe<PatientDetailsV1Payload>;
  profleReverificationUpdate?: Maybe<ProfleReverificationUpdatePayload>;
  removeHtmlTags?: Maybe<RemoveHtmlTagsPayload>;
  saveCommsMetaData?: Maybe<SaveCommsMetaDataPayload>;
  saveCommsMetaDataV1?: Maybe<SaveCommsMetaDataV1Payload>;
  saveCommsMetaDataV2?: Maybe<SaveCommsMetaDataV2Payload>;
  updateDomainRealms?: Maybe<UpdateDomainRealmsPayload>;
  updateIdentityVerificationV1?: Maybe<UpdateIdentityVerificationV1Payload>;
  updateOrganizationDetails?: Maybe<UpdateOrganizationDetailsPayload>;
  updatePatientDemographics?: Maybe<UpdatePatientDemographicsPayload>;
  updatePatientDemographicsV2?: Maybe<UpdatePatientDemographicsV2Payload>;
  updatePatientWithDependent?: Maybe<UpdatePatientWithDependentPayload>;
  updatePatientWithDependentV3?: Maybe<UpdatePatientWithDependentV3Payload>;
  updatePersonProfilePic?: Maybe<UpdatePersonProfilePicPayload>;
  updatePersonRecordStatus?: Maybe<UpdatePersonRecordStatusPayload>;
  updatePersonRecordStatusV1?: Maybe<UpdatePersonRecordStatusV1Payload>;
  updatePersonStatusV1?: Maybe<UpdatePersonStatusV1Payload>;
  updateUserInParty?: Maybe<UpdateUserInPartyPayload>;
  updateVerificationTransactionLog?: Maybe<UpdateVerificationTransactionLogPayload>;
  updateVerificationTransactionLogV1?: Maybe<UpdateVerificationTransactionLogV1Payload>;
  validateUserProfileV1?: Maybe<ValidateUserProfileV1Payload>;
  addSuggestInstitutionSyncV2?: Maybe<AddSuggestInstitutionSyncV2Payload>;
  addendumDoctorsDetailsFnV1?: Maybe<AddendumDoctorsDetailsFnV1Payload>;
  approveInstitution?: Maybe<ApproveInstitutionPayload>;
  convertBase64ToText?: Maybe<ConvertBase64ToTextPayload>;
  createAddendumDoctorsPatient?: Maybe<CreateAddendumDoctorsPatientPayload>;
  createAddendumDoctorsV1?: Maybe<CreateAddendumDoctorsV1Payload>;
  createAddendumRecordsRequest?: Maybe<CreateAddendumRecordsRequestPayload>;
  createAddendumRecordsRequestPatient?: Maybe<CreateAddendumRecordsRequestPatientPayload>;
  createAddendumRequestEmail?: Maybe<CreateAddendumRequestEmailPayload>;
  createFeedback?: Maybe<CreateFeedbackPayload>;
  createFeedbackEmail?: Maybe<CreateFeedbackEmailPayload>;
  createFeedbackV1?: Maybe<CreateFeedbackV1Payload>;
  createHealthInformationAuthorization?: Maybe<CreateHealthInformationAuthorizationPayload>;
  createHealthInformationAuthorizationV2?: Maybe<CreateHealthInformationAuthorizationV2Payload>;
  createHipaaAuthEmail?: Maybe<CreateHipaaAuthEmailPayload>;
  createInsuranceRequestPatient?: Maybe<CreateInsuranceRequestPatientPayload>;
  createInsuranceRequestV1?: Maybe<CreateInsuranceRequestV1Payload>;
  createIssueDescriptionMasters?: Maybe<CreateIssueDescriptionMastersPayload>;
  createIssueDescriptionMastersV1?: Maybe<CreateIssueDescriptionMastersV1Payload>;
  createIssueImpactMasters?: Maybe<CreateIssueImpactMastersPayload>;
  createMedicalRecordsRequest?: Maybe<CreateMedicalRecordsRequestPayload>;
  createMedicalRecordsRequestDetail?: Maybe<CreateMedicalRecordsRequestDetailPayload>;
  createMedicalRecordsRequestDetailPatient?: Maybe<CreateMedicalRecordsRequestDetailPatientPayload>;
  createMedicalRecordsRequestDetailV1?: Maybe<CreateMedicalRecordsRequestDetailV1Payload>;
  createMedicalRecordsRequestDetailV2?: Maybe<CreateMedicalRecordsRequestDetailV2Payload>;
  createMedicalRecordsRequestDetailV3?: Maybe<CreateMedicalRecordsRequestDetailV3Payload>;
  createMedicalRecordsRequestV1?: Maybe<CreateMedicalRecordsRequestV1Payload>;
  createNegativeImpactMaster?: Maybe<CreateNegativeImpactMasterPayload>;
  createNewInstitutionUbh?: Maybe<CreateNewInstitutionUbhPayload>;
  createNotificationRead?: Maybe<CreateNotificationReadPayload>;
  createObtainRecordTypeV1?: Maybe<CreateObtainRecordTypeV1Payload>;
  createPatientRequestEmail?: Maybe<CreatePatientRequestEmailPayload>;
  createRelatedPerson?: Maybe<CreateRelatedPersonPayload>;
  createRequestDenialLetter?: Maybe<CreateRequestDenialLetterPayload>;
  createRequestDenialLetterLat?: Maybe<CreateRequestDenialLetterLatPayload>;
  createRequestLogV1?: Maybe<CreateRequestLogV1Payload>;
  createRequestResponseV1?: Maybe<CreateRequestResponseV1Payload>;
  createSubstanceDisorderAuthEmail?: Maybe<CreateSubstanceDisorderAuthEmailPayload>;
  createSubstanceUseDisorderAuthorization?: Maybe<CreateSubstanceUseDisorderAuthorizationPayload>;
  createSubstanceUseDisorderAuthorizationV1?: Maybe<CreateSubstanceUseDisorderAuthorizationV1Payload>;
  createVirtualUser?: Maybe<CreateVirtualUserPayload>;
  createVirtualUserV1?: Maybe<CreateVirtualUserV1Payload>;
  deleteExternalSystem?: Maybe<DeleteExternalSystemPayload>;
  deleteInvite?: Maybe<DeleteInvitePayload>;
  deleteRequestV1?: Maybe<DeleteRequestV1Payload>;
  deleteRequestV2?: Maybe<DeleteRequestV2Payload>;
  editInstitution?: Maybe<EditInstitutionPayload>;
  encodeUri?: Maybe<EncodeUriPayload>;
  encryptOrDecryptData?: Maybe<EncryptOrDecryptDataPayload>;
  generateDashboardMetrics?: Maybe<GenerateDashboardMetricsPayload>;
  generateFhirPatient?: Maybe<GenerateFhirPatientPayload>;
  generateJourneyMetrics?: Maybe<GenerateJourneyMetricsPayload>;
  generateJourneyMetricsV1?: Maybe<GenerateJourneyMetricsV1Payload>;
  generateJwtTokenV1?: Maybe<GenerateJwtTokenV1Payload>;
  generateMetrics?: Maybe<GenerateMetricsPayload>;
  generateMetricsAndGetData?: Maybe<GenerateMetricsAndGetDataPayload>;
  generateMetricsAndGetJson?: Maybe<GenerateMetricsAndGetJsonPayload>;
  generateTicketNumber?: Maybe<GenerateTicketNumberPayload>;
  generateTransactionNumber?: Maybe<GenerateTransactionNumberPayload>;
  getIdVerificationTransaction?: Maybe<GetIdVerificationTransactionPayload>;
  getInstitutionApprovalInfo?: Maybe<GetInstitutionApprovalInfoPayload>;
  getJourneyMetricsData?: Maybe<GetJourneyMetricsDataPayload>;
  getMedicalRecordImportStatus?: Maybe<GetMedicalRecordImportStatusPayload>;
  getMedicalRecordImportStatusTest?: Maybe<GetMedicalRecordImportStatusTestPayload>;
  getMetricsData?: Maybe<GetMetricsDataPayload>;
  getMetricsDataV1?: Maybe<GetMetricsDataV1Payload>;
  getNotificationDetails?: Maybe<GetNotificationDetailsPayload>;
  getPatientIndividualMedicalRecordDocument?: Maybe<GetPatientIndividualMedicalRecordDocumentPayload>;
  getPatientMedicalRecordDocument?: Maybe<GetPatientMedicalRecordDocumentPayload>;
  getPatientMedicalRecordDocumentTest?: Maybe<GetPatientMedicalRecordDocumentTestPayload>;
  getPatientVerificationAccessToken?: Maybe<GetPatientVerificationAccessTokenPayload>;
  getRelatedPartyId?: Maybe<GetRelatedPartyIdPayload>;
  insertChatroomDetails?: Maybe<InsertChatroomDetailsPayload>;
  insertStaticEmails?: Maybe<InsertStaticEmailsPayload>;
  inviteUser?: Maybe<InviteUserPayload>;
  inviteUserV1?: Maybe<InviteUserV1Payload>;
  myRequestDetails?: Maybe<MyRequestDetailsPayload>;
  notification?: Maybe<NotificationPayload>;
  notificationV1?: Maybe<NotificationV1Payload>;
  requestDetails?: Maybe<RequestDetailsPayload>;
  requestExpired?: Maybe<RequestExpiredPayload>;
  requestPatientDetails?: Maybe<RequestPatientDetailsPayload>;
  requestPersonContactDetails?: Maybe<RequestPersonContactDetailsPayload>;
  requestPpaMraDetails?: Maybe<RequestPpaMraDetailsPayload>;
  requestPpaMraDetailsV1?: Maybe<RequestPpaMraDetailsV1Payload>;
  requestPpaMraDetailsV2?: Maybe<RequestPpaMraDetailsV2Payload>;
  requestPpaMraDetailsV3?: Maybe<RequestPpaMraDetailsV3Payload>;
  requestPpaMraDetailsV4?: Maybe<RequestPpaMraDetailsV4Payload>;
  requestPpaMraDetailsV5?: Maybe<RequestPpaMraDetailsV5Payload>;
  requestStatusPgcron?: Maybe<RequestStatusPgcronPayload>;
  requestsOnBehalfDetails?: Maybe<RequestsOnBehalfDetailsPayload>;
  saveExternalIntegration?: Maybe<SaveExternalIntegrationPayload>;
  saveUserTourFeedback?: Maybe<SaveUserTourFeedbackPayload>;
  saveUserTourProgress?: Maybe<SaveUserTourProgressPayload>;
  sendEmailContent?: Maybe<SendEmailContentPayload>;
  sendEmailToUnverifiedUser?: Maybe<SendEmailToUnverifiedUserPayload>;
  sendReminderEmail?: Maybe<SendReminderEmailPayload>;
  sendReminderEmailTestV1?: Maybe<SendReminderEmailTestV1Payload>;
  sentRequestToProvider?: Maybe<SentRequestToProviderPayload>;
  syncNewInstitution?: Maybe<SyncNewInstitutionPayload>;
  unenrollPatient?: Maybe<UnenrollPatientPayload>;
  updateMedicalDocumentQueryJson?: Maybe<UpdateMedicalDocumentQueryJsonPayload>;
  updateRequestFiledetailV1?: Maybe<UpdateRequestFiledetailV1Payload>;
  updateRequestStatusV1?: Maybe<UpdateRequestStatusV1Payload>;
  updateRequestStatusV2?: Maybe<UpdateRequestStatusV2Payload>;
  updateRequestTokens?: Maybe<UpdateRequestTokensPayload>;
  userMedicalRecordOperationStatusHistory?: Maybe<UserMedicalRecordOperationStatusHistoryPayload>;
  validateEmailData?: Maybe<ValidateEmailDataPayload>;
  verifyUserExists?: Maybe<VerifyUserExistsPayload>;
  /** Authenticate a user and provide a Postgrest JWT payload */
  authenticateApiPgNative?: Maybe<AuthenticateApiPgNativePayload>;
  /** Authenticate a user and provide a Postgraphile JWT payload */
  authenticatePostgraphilePgNative?: Maybe<AuthenticatePostgraphilePgNativePayload>;
  /** Create a user with user_name and password and assign it to the given role */
  createDatabaseUserWithRole?: Maybe<CreateDatabaseUserWithRolePayload>;
  gitlabProjectAssetHttpRequest?: Maybe<GitlabProjectAssetHttpRequestPayload>;
  gitlabProjectCommitHttpRequest?: Maybe<GitlabProjectCommitHttpRequestPayload>;
  /** Execute a GraphQL query that does not require authentication and return result as JSON */
  httpClientGraphqlAnonymousQueryResult?: Maybe<HttpClientGraphqlAnonymousQueryResultPayload>;
  /** Execute a GraphQL query that requires authentication header and return result as JSON */
  httpClientGraphqlAuthnHeaderQueryResult?: Maybe<HttpClientGraphqlAuthnHeaderQueryResultPayload>;
  /** Given a binary image, detect its format and size */
  inspectImageMetaData?: Maybe<InspectImageMetaDataPayload>;
  notifyDdlPostgrest?: Maybe<NotifyDdlPostgrestPayload>;
  /** Given a openproject attachment id, fetch its content */
  openprojectAssetHttpRequest?: Maybe<OpenprojectAssetHttpRequestPayload>;
  /** Given a  compressed binary image, detect its format and size */
  optimizeImage?: Maybe<OptimizeImagePayload>;
  otTrackCustomData?: Maybe<OtTrackCustomDataPayload>;
  otTrackCustomDataUptrace?: Maybe<OtTrackCustomDataUptracePayload>;
  changeInstitution?: Maybe<ChangeInstitutionPayload>;
  createInstitutionWithLhcForm?: Maybe<CreateInstitutionWithLhcFormPayload>;
  createNewInstitution?: Maybe<CreateNewInstitutionPayload>;
  getCompanyNames?: Maybe<GetCompanyNamesPayload>;
  institutionUrlStatus?: Maybe<InstitutionUrlStatusPayload>;
  joinInstitution?: Maybe<JoinInstitutionPayload>;
  sendInstitutionInviteEmail?: Maybe<SendInstitutionInviteEmailPayload>;
  archiveProject?: Maybe<ArchiveProjectPayload>;
  checkUrlStatus?: Maybe<CheckUrlStatusPayload>;
  createOffering?: Maybe<CreateOfferingPayload>;
  getTrendingData?: Maybe<GetTrendingDataPayload>;
  gitlabLhcFormUpdate?: Maybe<GitlabLhcFormUpdatePayload>;
  offeringUrlStatus?: Maybe<OfferingUrlStatusPayload>;
  sendOfferingInviteEmail?: Maybe<SendOfferingInviteEmailPayload>;
  updateOffering?: Maybe<UpdateOfferingPayload>;
  addAnonymousPromData?: Maybe<AddAnonymousPromDataPayload>;
  /** Given a array of emails, check its valid or not */
  emailValidation?: Maybe<EmailValidationPayload>;
  /** Check health information of Medigy */
  medigyHealthCheck?: Maybe<MedigyHealthCheckPayload>;
  runLighthouse?: Maybe<RunLighthousePayload>;
  saveSurveyForm?: Maybe<SaveSurveyFormPayload>;
  addSubscriberLists?: Maybe<AddSubscriberListsPayload>;
  authenticateWithRealm?: Maybe<AuthenticateWithRealmPayload>;
  authenticateWithRealmAccess?: Maybe<AuthenticateWithRealmAccessPayload>;
  checkUserExists?: Maybe<CheckUserExistsPayload>;
  cookieRefreshToken?: Maybe<CookieRefreshTokenPayload>;
  enrolmentTokenDetails?: Maybe<EnrolmentTokenDetailsPayload>;
  forgotPassword?: Maybe<ForgotPasswordPayload>;
  forgotPasswordIam?: Maybe<ForgotPasswordIamPayload>;
  getPrometheusData?: Maybe<GetPrometheusDataPayload>;
  getResetPassword?: Maybe<GetResetPasswordPayload>;
  gitAccessUserRepo?: Maybe<GitAccessUserRepoPayload>;
  gitAccessUserRepoClaimOffering?: Maybe<GitAccessUserRepoClaimOfferingPayload>;
  gitAddUserProfile?: Maybe<GitAddUserProfilePayload>;
  loggedUsersList?: Maybe<LoggedUsersListPayload>;
  medigyEstablishSession?: Maybe<MedigyEstablishSessionPayload>;
  medigyIamEstablishSession?: Maybe<MedigyIamEstablishSessionPayload>;
  medigyIamSsoEstablishSession?: Maybe<MedigyIamSsoEstablishSessionPayload>;
  medigyIamSsoSignup?: Maybe<MedigyIamSsoSignupPayload>;
  medigySignupUser?: Maybe<MedigySignupUserPayload>;
  medigySignupUserIam?: Maybe<MedigySignupUserIamPayload>;
  registerUser?: Maybe<RegisterUserPayload>;
  registerUserSignup?: Maybe<RegisterUserSignupPayload>;
  registerUserSignupV1?: Maybe<RegisterUserSignupV1Payload>;
  updateGitlabTokenExpiry?: Maybe<UpdateGitlabTokenExpiryPayload>;
  updatePassword?: Maybe<UpdatePasswordPayload>;
  verifyUserEmail?: Maybe<VerifyUserEmailPayload>;
  approveMergeRequest?: Maybe<ApproveMergeRequestPayload>;
  getAccessToken?: Maybe<GetAccessTokenPayload>;
  getExecutionDetails?: Maybe<GetExecutionDetailsPayload>;
  getRelatedTopics?: Maybe<GetRelatedTopicsPayload>;
  gitlabPatToken?: Maybe<GitlabPatTokenPayload>;
  gitlabUserProfile?: Maybe<GitlabUserProfilePayload>;
  keycloakPartySynchronizationV1?: Maybe<KeycloakPartySynchronizationV1Payload>;
  saveAddSuggestHdo?: Maybe<SaveAddSuggestHdoPayload>;
  saveAddSuggestOffering?: Maybe<SaveAddSuggestOfferingPayload>;
  saveAddVulnerability?: Maybe<SaveAddVulnerabilityPayload>;
  saveUserProfile?: Maybe<SaveUserProfilePayload>;
  triggerEvent?: Maybe<TriggerEventPayload>;
  triggerEventNotify?: Maybe<TriggerEventNotifyPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
  uploadImageToGit?: Maybe<UploadImageToGitPayload>;
  validateToken?: Maybe<ValidateTokenPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFileUploadArgs = {
  input: CreateFileUploadInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateEthnicityMasterV1Args = {
  input: CreateEthnicityMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateGenderMasterV1Args = {
  input: CreateGenderMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMaritalStatusMasterV1Args = {
  input: CreateMaritalStatusMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOccupationIndustryMasterV1Args = {
  input: CreateOccupationIndustryMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationGroupMasterV1Args = {
  input: CreateOrganizationGroupMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePreferredLanguageMasterV1Args = {
  input: CreatePreferredLanguageMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRaceMasterV1Args = {
  input: CreateRaceMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRelatedPersonRelationshipMasterArgs = {
  input: CreateRelatedPersonRelationshipMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSexMasterV1Args = {
  input: CreateSexMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSexualOrientationMasterV1Args = {
  input: CreateSexualOrientationMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStatusMasterArgs = {
  input: CreateStatusMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateBillingRequestCategoryMasterArgs = {
  input: CreateBillingRequestCategoryMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateBillingRequestTypeMasterArgs = {
  input: CreateBillingRequestTypeMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCommunicationRequestMasterArgs = {
  input: CreateCommunicationRequestMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCommunicationRequestMasterV1Args = {
  input: CreateCommunicationRequestMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCountryMasterV1Args = {
  input: CreateCountryMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDenialLetterReasonMasterArgs = {
  input: CreateDenialLetterReasonMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFeedbackQueryTypeMasterArgs = {
  input: CreateFeedbackQueryTypeMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateGetChatroomDetailArgs = {
  input: CreateGetChatroomDetailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateHealthAuthAuthorizationTitleMasterArgs = {
  input: CreateHealthAuthAuthorizationTitleMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateImpactSeverityMasterArgs = {
  input: CreateImpactSeverityMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateInformationBlockingExceptionsMasterArgs = {
  input: CreateInformationBlockingExceptionsMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueDescriptionMasterArgs = {
  input: CreateIssueDescriptionMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueDescriptionMastersMedicalArgs = {
  input: CreateIssueDescriptionMastersMedicalInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueImpactMasterArgs = {
  input: CreateIssueImpactMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateObtainRecordTypeMasterArgs = {
  input: CreateObtainRecordTypeMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePreferredPronounsMasterArgs = {
  input: CreatePreferredPronounsMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRelationshipTypeArgs = {
  input: CreateRelationshipTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestPriorityMasterArgs = {
  input: CreateRequestPriorityMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestStatusMasterArgs = {
  input: CreateRequestStatusMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestTokenArgs = {
  input: CreateRequestTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestTypeMasterArgs = {
  input: CreateRequestTypeMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateServiceCategoryMasterArgs = {
  input: CreateServiceCategoryMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSourceNatureMasterArgs = {
  input: CreateSourceNatureMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStateMasterV1Args = {
  input: CreateStateMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSubstanceDisorderInformationMasterV1Args = {
  input: CreateSubstanceDisorderInformationMasterV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUseDisorderAuthorizationTitleMasterArgs = {
  input: CreateUseDisorderAuthorizationTitleMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMediaTypeArgs = {
  input: CreateMediaTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateInstitutionBrokenUrlListArgs = {
  input: CreateInstitutionBrokenUrlListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedigyNamespaceArgs = {
  input: CreateMedigyNamespaceInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOfferingBrokenUrlListArgs = {
  input: CreateOfferingBrokenUrlListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSurveyFormUpdateArgs = {
  input: CreateSurveyFormUpdateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSurveyListArgs = {
  input: CreateSurveyListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCountryListArgs = {
  input: CreateCountryListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalGroupArgs = {
  input: CreateMedicalGroupInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateStateListArgs = {
  input: CreateStateListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedigyMemberArgs = {
  input: CreateMedigyMemberInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedigyUserArgs = {
  input: CreateMedigyUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileUploadByNodeIdArgs = {
  input: UpdateFileUploadByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileUploadArgs = {
  input: UpdateFileUploadInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateMediaTypeByMimeTypeAndFileExtnAndLabelArgs = {
  input: UpdateMediaTypeByMimeTypeAndFileExtnAndLabelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSurveyFormUpdateByNodeIdArgs = {
  input: UpdateSurveyFormUpdateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSurveyFormUpdateArgs = {
  input: UpdateSurveyFormUpdateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileUploadByNodeIdArgs = {
  input: DeleteFileUploadByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileUploadArgs = {
  input: DeleteFileUploadInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteMediaTypeByMimeTypeAndFileExtnAndLabelArgs = {
  input: DeleteMediaTypeByMimeTypeAndFileExtnAndLabelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSurveyFormUpdateByNodeIdArgs = {
  input: DeleteSurveyFormUpdateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSurveyFormUpdateArgs = {
  input: DeleteSurveyFormUpdateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddDependentArgs = {
  input: AddDependentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddNewPatientV1Args = {
  input: AddNewPatientV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAssignUserToOrganizationArgs = {
  input: AssignUserToOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDepartmentHdoArgs = {
  input: CreateDepartmentHdoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDepartmentHdo1Args = {
  input: CreateDepartmentHdo1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDepartmentInPartyArgs = {
  input: CreateDepartmentInPartyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDomainRealmsArgs = {
  input: CreateDomainRealmsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateJsonbFormatArgs = {
  input: CreateJsonbFormatInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateJsonbFormatV1Args = {
  input: CreateJsonbFormatV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateJsonbFormatV2Args = {
  input: CreateJsonbFormatV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewGroupEntryArgs = {
  input: CreateNewGroupEntryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationArgs = {
  input: CreateOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationDetailArgs = {
  input: CreateOrganizationDetailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationHdoArgs = {
  input: CreateOrganizationHdoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationHdo1Args = {
  input: CreateOrganizationHdo1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationPersonV1Args = {
  input: CreateOrganizationPersonV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationRealmArgs = {
  input: CreateOrganizationRealmInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyDepartmentArgs = {
  input: CreatePartyDepartmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyDepartmentV1Args = {
  input: CreatePartyDepartmentV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyIdentifierArgs = {
  input: CreatePartyIdentifierInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyOrganizationArgs = {
  input: CreatePartyOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyOrganizationV1Args = {
  input: CreatePartyOrganizationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyRealmArgs = {
  input: CreatePartyRealmInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyRealmV1Args = {
  input: CreatePartyRealmV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePartyRelationArgs = {
  input: CreatePartyRelationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePatientDemographicsArgs = {
  input: CreatePatientDemographicsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePatientDemographicsV1Args = {
  input: CreatePatientDemographicsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePatientWithDependentArgs = {
  input: CreatePatientWithDependentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePatientWithDependentV1Args = {
  input: CreatePatientWithDependentV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonDemographicsArgs = {
  input: CreatePersonDemographicsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonDemographicsPatientArgs = {
  input: CreatePersonDemographicsPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePersonDemographicsV1Args = {
  input: CreatePersonDemographicsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateServiceDetailsArgs = {
  input: CreateServiceDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserInPartyArgs = {
  input: CreateUserInPartyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetCurrentUserArgs = {
  input: GetCurrentUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetExternalIntegrationConfigurationV1Args = {
  input: GetExternalIntegrationConfigurationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetGitlabAccessTokenArgs = {
  input: GetGitlabAccessTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPatientVerificationStatusArgs = {
  input: GetPatientVerificationStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetUserTypeArgs = {
  input: GetUserTypeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetVerifiedExternalPatientResourceIdArgs = {
  input: GetVerifiedExternalPatientResourceIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitAddUserProfileUbhArgs = {
  input: GitAddUserProfileUbhInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabUserSyncV1Args = {
  input: GitlabUserSyncV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInitIdentityVerificationV1Args = {
  input: InitIdentityVerificationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertDomainRealmArgs = {
  input: InsertDomainRealmInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertOrganizationRealmArgs = {
  input: InsertOrganizationRealmInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationLoginUserSyncV1Args = {
  input: LoginUserSyncV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationManageExternalSystemIdArgs = {
  input: ManageExternalSystemIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationModifyDependentInfoArgs = {
  input: ModifyDependentInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationModifyPatientInfoArgs = {
  input: ModifyPatientInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationPatientDetailsArgs = {
  input: PatientDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationPatientDetailsV1Args = {
  input: PatientDetailsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationProfleReverificationUpdateArgs = {
  input: ProfleReverificationUpdateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRemoveHtmlTagsArgs = {
  input: RemoveHtmlTagsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveCommsMetaDataArgs = {
  input: SaveCommsMetaDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveCommsMetaDataV1Args = {
  input: SaveCommsMetaDataV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveCommsMetaDataV2Args = {
  input: SaveCommsMetaDataV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDomainRealmsArgs = {
  input: UpdateDomainRealmsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateIdentityVerificationV1Args = {
  input: UpdateIdentityVerificationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganizationDetailsArgs = {
  input: UpdateOrganizationDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePatientDemographicsArgs = {
  input: UpdatePatientDemographicsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePatientDemographicsV2Args = {
  input: UpdatePatientDemographicsV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePatientWithDependentArgs = {
  input: UpdatePatientWithDependentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePatientWithDependentV3Args = {
  input: UpdatePatientWithDependentV3Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonProfilePicArgs = {
  input: UpdatePersonProfilePicInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonRecordStatusArgs = {
  input: UpdatePersonRecordStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonRecordStatusV1Args = {
  input: UpdatePersonRecordStatusV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePersonStatusV1Args = {
  input: UpdatePersonStatusV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserInPartyArgs = {
  input: UpdateUserInPartyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationTransactionLogArgs = {
  input: UpdateVerificationTransactionLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationTransactionLogV1Args = {
  input: UpdateVerificationTransactionLogV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationValidateUserProfileV1Args = {
  input: ValidateUserProfileV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddSuggestInstitutionSyncV2Args = {
  input: AddSuggestInstitutionSyncV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddendumDoctorsDetailsFnV1Args = {
  input: AddendumDoctorsDetailsFnV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationApproveInstitutionArgs = {
  input: ApproveInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationConvertBase64ToTextArgs = {
  input: ConvertBase64ToTextInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAddendumDoctorsPatientArgs = {
  input: CreateAddendumDoctorsPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAddendumDoctorsV1Args = {
  input: CreateAddendumDoctorsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAddendumRecordsRequestArgs = {
  input: CreateAddendumRecordsRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAddendumRecordsRequestPatientArgs = {
  input: CreateAddendumRecordsRequestPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAddendumRequestEmailArgs = {
  input: CreateAddendumRequestEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFeedbackArgs = {
  input: CreateFeedbackInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFeedbackEmailArgs = {
  input: CreateFeedbackEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFeedbackV1Args = {
  input: CreateFeedbackV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateHealthInformationAuthorizationArgs = {
  input: CreateHealthInformationAuthorizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateHealthInformationAuthorizationV2Args = {
  input: CreateHealthInformationAuthorizationV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateHipaaAuthEmailArgs = {
  input: CreateHipaaAuthEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateInsuranceRequestPatientArgs = {
  input: CreateInsuranceRequestPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateInsuranceRequestV1Args = {
  input: CreateInsuranceRequestV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueDescriptionMastersArgs = {
  input: CreateIssueDescriptionMastersInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueDescriptionMastersV1Args = {
  input: CreateIssueDescriptionMastersV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateIssueImpactMastersArgs = {
  input: CreateIssueImpactMastersInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestArgs = {
  input: CreateMedicalRecordsRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestDetailArgs = {
  input: CreateMedicalRecordsRequestDetailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestDetailPatientArgs = {
  input: CreateMedicalRecordsRequestDetailPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestDetailV1Args = {
  input: CreateMedicalRecordsRequestDetailV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestDetailV2Args = {
  input: CreateMedicalRecordsRequestDetailV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestDetailV3Args = {
  input: CreateMedicalRecordsRequestDetailV3Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateMedicalRecordsRequestV1Args = {
  input: CreateMedicalRecordsRequestV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNegativeImpactMasterArgs = {
  input: CreateNegativeImpactMasterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewInstitutionUbhArgs = {
  input: CreateNewInstitutionUbhInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNotificationReadArgs = {
  input: CreateNotificationReadInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateObtainRecordTypeV1Args = {
  input: CreateObtainRecordTypeV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePatientRequestEmailArgs = {
  input: CreatePatientRequestEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRelatedPersonArgs = {
  input: CreateRelatedPersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestDenialLetterArgs = {
  input: CreateRequestDenialLetterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestDenialLetterLatArgs = {
  input: CreateRequestDenialLetterLatInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestLogV1Args = {
  input: CreateRequestLogV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateRequestResponseV1Args = {
  input: CreateRequestResponseV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSubstanceDisorderAuthEmailArgs = {
  input: CreateSubstanceDisorderAuthEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSubstanceUseDisorderAuthorizationArgs = {
  input: CreateSubstanceUseDisorderAuthorizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSubstanceUseDisorderAuthorizationV1Args = {
  input: CreateSubstanceUseDisorderAuthorizationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateVirtualUserArgs = {
  input: CreateVirtualUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateVirtualUserV1Args = {
  input: CreateVirtualUserV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteExternalSystemArgs = {
  input: DeleteExternalSystemInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteInviteArgs = {
  input: DeleteInviteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteRequestV1Args = {
  input: DeleteRequestV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteRequestV2Args = {
  input: DeleteRequestV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationEditInstitutionArgs = {
  input: EditInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationEncodeUriArgs = {
  input: EncodeUriInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationEncryptOrDecryptDataArgs = {
  input: EncryptOrDecryptDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateDashboardMetricsArgs = {
  input: GenerateDashboardMetricsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateFhirPatientArgs = {
  input: GenerateFhirPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateJourneyMetricsArgs = {
  input: GenerateJourneyMetricsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateJourneyMetricsV1Args = {
  input: GenerateJourneyMetricsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateJwtTokenV1Args = {
  input: GenerateJwtTokenV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateMetricsArgs = {
  input: GenerateMetricsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateMetricsAndGetDataArgs = {
  input: GenerateMetricsAndGetDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateMetricsAndGetJsonArgs = {
  input: GenerateMetricsAndGetJsonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateTicketNumberArgs = {
  input: GenerateTicketNumberInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGenerateTransactionNumberArgs = {
  input: GenerateTransactionNumberInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetIdVerificationTransactionArgs = {
  input: GetIdVerificationTransactionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetInstitutionApprovalInfoArgs = {
  input: GetInstitutionApprovalInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetJourneyMetricsDataArgs = {
  input: GetJourneyMetricsDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetMedicalRecordImportStatusArgs = {
  input: GetMedicalRecordImportStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetMedicalRecordImportStatusTestArgs = {
  input: GetMedicalRecordImportStatusTestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetMetricsDataArgs = {
  input: GetMetricsDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetMetricsDataV1Args = {
  input: GetMetricsDataV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetNotificationDetailsArgs = {
  input: GetNotificationDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPatientIndividualMedicalRecordDocumentArgs = {
  input: GetPatientIndividualMedicalRecordDocumentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPatientMedicalRecordDocumentArgs = {
  input: GetPatientMedicalRecordDocumentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPatientMedicalRecordDocumentTestArgs = {
  input: GetPatientMedicalRecordDocumentTestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPatientVerificationAccessTokenArgs = {
  input: GetPatientVerificationAccessTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetRelatedPartyIdArgs = {
  input: GetRelatedPartyIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertChatroomDetailsArgs = {
  input: InsertChatroomDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInsertStaticEmailsArgs = {
  input: InsertStaticEmailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInviteUserArgs = {
  input: InviteUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInviteUserV1Args = {
  input: InviteUserV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMyRequestDetailsArgs = {
  input: MyRequestDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationNotificationArgs = {
  input: NotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationNotificationV1Args = {
  input: NotificationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestDetailsArgs = {
  input: RequestDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestExpiredArgs = {
  input: RequestExpiredInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPatientDetailsArgs = {
  input: RequestPatientDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPersonContactDetailsArgs = {
  input: RequestPersonContactDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsArgs = {
  input: RequestPpaMraDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsV1Args = {
  input: RequestPpaMraDetailsV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsV2Args = {
  input: RequestPpaMraDetailsV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsV3Args = {
  input: RequestPpaMraDetailsV3Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsV4Args = {
  input: RequestPpaMraDetailsV4Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestPpaMraDetailsV5Args = {
  input: RequestPpaMraDetailsV5Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestStatusPgcronArgs = {
  input: RequestStatusPgcronInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestsOnBehalfDetailsArgs = {
  input: RequestsOnBehalfDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveExternalIntegrationArgs = {
  input: SaveExternalIntegrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveUserTourFeedbackArgs = {
  input: SaveUserTourFeedbackInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveUserTourProgressArgs = {
  input: SaveUserTourProgressInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendEmailContentArgs = {
  input: SendEmailContentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendEmailToUnverifiedUserArgs = {
  input: SendEmailToUnverifiedUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendReminderEmailArgs = {
  input: SendReminderEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendReminderEmailTestV1Args = {
  input: SendReminderEmailTestV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSentRequestToProviderArgs = {
  input: SentRequestToProviderInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSyncNewInstitutionArgs = {
  input: SyncNewInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUnenrollPatientArgs = {
  input: UnenrollPatientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateMedicalDocumentQueryJsonArgs = {
  input: UpdateMedicalDocumentQueryJsonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateRequestFiledetailV1Args = {
  input: UpdateRequestFiledetailV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateRequestStatusV1Args = {
  input: UpdateRequestStatusV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateRequestStatusV2Args = {
  input: UpdateRequestStatusV2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateRequestTokensArgs = {
  input: UpdateRequestTokensInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUserMedicalRecordOperationStatusHistoryArgs = {
  input: UserMedicalRecordOperationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationValidateEmailDataArgs = {
  input: ValidateEmailDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationVerifyUserExistsArgs = {
  input: VerifyUserExistsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticateApiPgNativeArgs = {
  input: AuthenticateApiPgNativeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticatePostgraphilePgNativeArgs = {
  input: AuthenticatePostgraphilePgNativeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDatabaseUserWithRoleArgs = {
  input: CreateDatabaseUserWithRoleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabProjectAssetHttpRequestArgs = {
  input: GitlabProjectAssetHttpRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabProjectCommitHttpRequestArgs = {
  input: GitlabProjectCommitHttpRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationHttpClientGraphqlAnonymousQueryResultArgs = {
  input: HttpClientGraphqlAnonymousQueryResultInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationHttpClientGraphqlAuthnHeaderQueryResultArgs = {
  input: HttpClientGraphqlAuthnHeaderQueryResultInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInspectImageMetaDataArgs = {
  input: InspectImageMetaDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationNotifyDdlPostgrestArgs = {
  input: NotifyDdlPostgrestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationOpenprojectAssetHttpRequestArgs = {
  input: OpenprojectAssetHttpRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationOptimizeImageArgs = {
  input: OptimizeImageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationOtTrackCustomDataArgs = {
  input: OtTrackCustomDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationOtTrackCustomDataUptraceArgs = {
  input: OtTrackCustomDataUptraceInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationChangeInstitutionArgs = {
  input: ChangeInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateInstitutionWithLhcFormArgs = {
  input: CreateInstitutionWithLhcFormInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNewInstitutionArgs = {
  input: CreateNewInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetCompanyNamesArgs = {
  input: GetCompanyNamesInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInstitutionUrlStatusArgs = {
  input: InstitutionUrlStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationJoinInstitutionArgs = {
  input: JoinInstitutionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendInstitutionInviteEmailArgs = {
  input: SendInstitutionInviteEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationArchiveProjectArgs = {
  input: ArchiveProjectInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCheckUrlStatusArgs = {
  input: CheckUrlStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOfferingArgs = {
  input: CreateOfferingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetTrendingDataArgs = {
  input: GetTrendingDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabLhcFormUpdateArgs = {
  input: GitlabLhcFormUpdateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationOfferingUrlStatusArgs = {
  input: OfferingUrlStatusInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSendOfferingInviteEmailArgs = {
  input: SendOfferingInviteEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOfferingArgs = {
  input: UpdateOfferingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddAnonymousPromDataArgs = {
  input: AddAnonymousPromDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationEmailValidationArgs = {
  input: EmailValidationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigyHealthCheckArgs = {
  input: MedigyHealthCheckInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRunLighthouseArgs = {
  input: RunLighthouseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveSurveyFormArgs = {
  input: SaveSurveyFormInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAddSubscriberListsArgs = {
  input: AddSubscriberListsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticateWithRealmArgs = {
  input: AuthenticateWithRealmInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticateWithRealmAccessArgs = {
  input: AuthenticateWithRealmAccessInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCheckUserExistsArgs = {
  input: CheckUserExistsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCookieRefreshTokenArgs = {
  input: CookieRefreshTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationEnrolmentTokenDetailsArgs = {
  input: EnrolmentTokenDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationForgotPasswordArgs = {
  input: ForgotPasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationForgotPasswordIamArgs = {
  input: ForgotPasswordIamInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetPrometheusDataArgs = {
  input: GetPrometheusDataInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetResetPasswordArgs = {
  input: GetResetPasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitAccessUserRepoArgs = {
  input: GitAccessUserRepoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitAccessUserRepoClaimOfferingArgs = {
  input: GitAccessUserRepoClaimOfferingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitAddUserProfileArgs = {
  input: GitAddUserProfileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationLoggedUsersListArgs = {
  input: LoggedUsersListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigyEstablishSessionArgs = {
  input: MedigyEstablishSessionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigyIamEstablishSessionArgs = {
  input: MedigyIamEstablishSessionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigyIamSsoEstablishSessionArgs = {
  input: MedigyIamSsoEstablishSessionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigyIamSsoSignupArgs = {
  input: MedigyIamSsoSignupInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigySignupUserArgs = {
  input: MedigySignupUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMedigySignupUserIamArgs = {
  input: MedigySignupUserIamInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserArgs = {
  input: RegisterUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserSignupArgs = {
  input: RegisterUserSignupInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserSignupV1Args = {
  input: RegisterUserSignupV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateGitlabTokenExpiryArgs = {
  input: UpdateGitlabTokenExpiryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePasswordArgs = {
  input: UpdatePasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationVerifyUserEmailArgs = {
  input: VerifyUserEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationApproveMergeRequestArgs = {
  input: ApproveMergeRequestInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetAccessTokenArgs = {
  input: GetAccessTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetExecutionDetailsArgs = {
  input: GetExecutionDetailsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGetRelatedTopicsArgs = {
  input: GetRelatedTopicsInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabPatTokenArgs = {
  input: GitlabPatTokenInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationGitlabUserProfileArgs = {
  input: GitlabUserProfileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationKeycloakPartySynchronizationV1Args = {
  input: KeycloakPartySynchronizationV1Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveAddSuggestHdoArgs = {
  input: SaveAddSuggestHdoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveAddSuggestOfferingArgs = {
  input: SaveAddSuggestOfferingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveAddVulnerabilityArgs = {
  input: SaveAddVulnerabilityInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationSaveUserProfileArgs = {
  input: SaveUserProfileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationTriggerEventArgs = {
  input: TriggerEventInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationTriggerEventNotifyArgs = {
  input: TriggerEventNotifyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUploadImageToGitArgs = {
  input: UploadImageToGitInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationValidateTokenArgs = {
  input: ValidateTokenInput;
};

export type MyRequest = {
  __typename?: 'MyRequest';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `MyRequest` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type MyRequestCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestType` field. */
  requestType?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyRelation` field. */
  partyRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isDependent` field. */
  isDependent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `relationshipId` field. */
  relationshipId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `postalAddress` field. */
  postalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/** All input for the `myRequestDetails` mutation. */
export type MyRequestDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `myRequestDetails` mutation. */
export type MyRequestDetailsPayload = {
  __typename?: 'MyRequestDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<MyRequestDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `myRequestDetails` mutation. */
export type MyRequestDetailsRecord = {
  __typename?: 'MyRequestDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/** A filter to be used against `MyRequest` object types. All fields are combined with a logical ‘and.’ */
export type MyRequestFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<StringFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestType` field. */
  requestType?: Maybe<JsonFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<StringFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<StringFilter>;
  /** Filter by the object’s `partyRelation` field. */
  partyRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `isDependent` field. */
  isDependent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `relationshipId` field. */
  relationshipId?: Maybe<IntFilter>;
  /** Filter by the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<IntFilter>;
  /** Filter by the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<UuidFilter>;
  /** Filter by the object’s `postalAddress` field. */
  postalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<BooleanFilter>;
  /** Filter by the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<IntFilter>;
  /** Filter by the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<MyRequestFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<MyRequestFilter>>;
  /** Negates the expression. */
  not?: Maybe<MyRequestFilter>;
};

/** A connection to a list of `MyRequest` values. */
export type MyRequestsConnection = {
  __typename?: 'MyRequestsConnection';
  /** A list of `MyRequest` objects. */
  nodes: Array<Maybe<MyRequest>>;
  /** A list of edges which contains the `MyRequest` and cursor to aid in pagination. */
  edges: Array<MyRequestsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `MyRequest` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `MyRequest` edge in the connection. */
export type MyRequestsEdge = {
  __typename?: 'MyRequestsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `MyRequest` at the end of the edge. */
  node?: Maybe<MyRequest>;
};

/** Methods to use when ordering `MyRequest`. */
export enum MyRequestsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  IssueDescriptionMasterValueAsc = 'ISSUE_DESCRIPTION_MASTER_VALUE_ASC',
  IssueDescriptionMasterValueDesc = 'ISSUE_DESCRIPTION_MASTER_VALUE_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DestinationNatureValueAsc = 'DESTINATION_NATURE_VALUE_ASC',
  DestinationNatureValueDesc = 'DESTINATION_NATURE_VALUE_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequestTypeAsc = 'REQUEST_TYPE_ASC',
  RequestTypeDesc = 'REQUEST_TYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  NoOfDaysToExpireAsc = 'NO_OF_DAYS_TO_EXPIRE_ASC',
  NoOfDaysToExpireDesc = 'NO_OF_DAYS_TO_EXPIRE_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  RequestTriggerStatusAsc = 'REQUEST_TRIGGER_STATUS_ASC',
  RequestTriggerStatusDesc = 'REQUEST_TRIGGER_STATUS_DESC',
  HasMentalHealthConditionAsc = 'HAS_MENTAL_HEALTH_CONDITION_ASC',
  HasMentalHealthConditionDesc = 'HAS_MENTAL_HEALTH_CONDITION_DESC',
  HasSexualReproductiveHealthConditionAsc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_ASC',
  HasSexualReproductiveHealthConditionDesc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_DESC',
  HasSubstanceUseDisorderConditionAsc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_ASC',
  HasSubstanceUseDisorderConditionDesc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  AdditionalNotesAsc = 'ADDITIONAL_NOTES_ASC',
  AdditionalNotesDesc = 'ADDITIONAL_NOTES_DESC',
  PartyRelationAsc = 'PARTY_RELATION_ASC',
  PartyRelationDesc = 'PARTY_RELATION_DESC',
  IsDependentAsc = 'IS_DEPENDENT_ASC',
  IsDependentDesc = 'IS_DEPENDENT_DESC',
  RelationshipIdAsc = 'RELATIONSHIP_ID_ASC',
  RelationshipIdDesc = 'RELATIONSHIP_ID_DESC',
  RelationshipValueAsc = 'RELATIONSHIP_VALUE_ASC',
  RelationshipValueDesc = 'RELATIONSHIP_VALUE_DESC',
  PostalServiceIdAsc = 'POSTAL_SERVICE_ID_ASC',
  PostalServiceIdDesc = 'POSTAL_SERVICE_ID_DESC',
  PostalServiceValueAsc = 'POSTAL_SERVICE_VALUE_ASC',
  PostalServiceValueDesc = 'POSTAL_SERVICE_VALUE_DESC',
  PostalAddressIdAsc = 'POSTAL_ADDRESS_ID_ASC',
  PostalAddressIdDesc = 'POSTAL_ADDRESS_ID_DESC',
  PostalAddressAsc = 'POSTAL_ADDRESS_ASC',
  PostalAddressDesc = 'POSTAL_ADDRESS_DESC',
  ObtainCopyDiffAddressAsc = 'OBTAIN_COPY_DIFF_ADDRESS_ASC',
  ObtainCopyDiffAddressDesc = 'OBTAIN_COPY_DIFF_ADDRESS_DESC',
  PhysicianPostalAddressAsc = 'PHYSICIAN_POSTAL_ADDRESS_ASC',
  PhysicianPostalAddressDesc = 'PHYSICIAN_POSTAL_ADDRESS_DESC',
  ObtainCopyMethodIdAsc = 'OBTAIN_COPY_METHOD_ID_ASC',
  ObtainCopyMethodIdDesc = 'OBTAIN_COPY_METHOD_ID_DESC',
  ObtainCopyMethodValueAsc = 'OBTAIN_COPY_METHOD_VALUE_ASC',
  ObtainCopyMethodValueDesc = 'OBTAIN_COPY_METHOD_VALUE_DESC'
}

export type NewInstitutionDatum = {
  __typename?: 'NewInstitutionDatum';
  institutionId?: Maybe<Scalars['Int']>;
  institutionPartyId?: Maybe<Scalars['UUID']>;
  institutionName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  institutionWebsite?: Maybe<Scalars['String']>;
  institutionEmail?: Maybe<Scalars['String']>;
  institutionPhone?: Maybe<Scalars['String']>;
  institutionFax?: Maybe<Scalars['String']>;
  institutionAddress?: Maybe<Scalars['String']>;
  institutionCity?: Maybe<Scalars['String']>;
  institutionCountry?: Maybe<Scalars['String']>;
  institutionState?: Maybe<Scalars['String']>;
  institutionZipcode?: Maybe<Scalars['String']>;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/** All input for the `notification` mutation. */
export type NotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type NotificationList = {
  __typename?: 'NotificationList';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `NotificationList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type NotificationListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientName` field. */
  patientName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fromStatus` field. */
  fromStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `toStatus` field. */
  toStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `content` field. */
  content?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remarks` field. */
  remarks?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `types` field. */
  types?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasRead` field. */
  hasRead?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `NotificationList` object types. All fields are combined with a logical ‘and.’ */
export type NotificationListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientName` field. */
  patientName?: Maybe<StringFilter>;
  /** Filter by the object’s `fromStatus` field. */
  fromStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `toStatus` field. */
  toStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `content` field. */
  content?: Maybe<StringFilter>;
  /** Filter by the object’s `remarks` field. */
  remarks?: Maybe<StringFilter>;
  /** Filter by the object’s `types` field. */
  types?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasRead` field. */
  hasRead?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<NotificationListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<NotificationListFilter>>;
  /** Negates the expression. */
  not?: Maybe<NotificationListFilter>;
};

export type NotificationListV1 = {
  __typename?: 'NotificationListV1';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  trackId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
  createdBy?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `NotificationListV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type NotificationListV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientName` field. */
  patientName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fromStatus` field. */
  fromStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `toStatus` field. */
  toStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `content` field. */
  content?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remarks` field. */
  remarks?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `types` field. */
  types?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasRead` field. */
  hasRead?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `NotificationListV1` object types. All fields are combined with a logical ‘and.’ */
export type NotificationListV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientName` field. */
  patientName?: Maybe<StringFilter>;
  /** Filter by the object’s `fromStatus` field. */
  fromStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `toStatus` field. */
  toStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `content` field. */
  content?: Maybe<StringFilter>;
  /** Filter by the object’s `remarks` field. */
  remarks?: Maybe<StringFilter>;
  /** Filter by the object’s `types` field. */
  types?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasRead` field. */
  hasRead?: Maybe<BooleanFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<NotificationListV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<NotificationListV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<NotificationListV1Filter>;
};

/** A connection to a list of `NotificationListV1` values. */
export type NotificationListV1sConnection = {
  __typename?: 'NotificationListV1sConnection';
  /** A list of `NotificationListV1` objects. */
  nodes: Array<Maybe<NotificationListV1>>;
  /** A list of edges which contains the `NotificationListV1` and cursor to aid in pagination. */
  edges: Array<NotificationListV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `NotificationListV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `NotificationListV1` edge in the connection. */
export type NotificationListV1sEdge = {
  __typename?: 'NotificationListV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `NotificationListV1` at the end of the edge. */
  node?: Maybe<NotificationListV1>;
};

/** Methods to use when ordering `NotificationListV1`. */
export enum NotificationListV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  PatientNameAsc = 'PATIENT_NAME_ASC',
  PatientNameDesc = 'PATIENT_NAME_DESC',
  FromStatusAsc = 'FROM_STATUS_ASC',
  FromStatusDesc = 'FROM_STATUS_DESC',
  ToStatusAsc = 'TO_STATUS_ASC',
  ToStatusDesc = 'TO_STATUS_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  RemarksAsc = 'REMARKS_ASC',
  RemarksDesc = 'REMARKS_DESC',
  TypesAsc = 'TYPES_ASC',
  TypesDesc = 'TYPES_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasReadAsc = 'HAS_READ_ASC',
  HasReadDesc = 'HAS_READ_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC'
}

/** A connection to a list of `NotificationList` values. */
export type NotificationListsConnection = {
  __typename?: 'NotificationListsConnection';
  /** A list of `NotificationList` objects. */
  nodes: Array<Maybe<NotificationList>>;
  /** A list of edges which contains the `NotificationList` and cursor to aid in pagination. */
  edges: Array<NotificationListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `NotificationList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `NotificationList` edge in the connection. */
export type NotificationListsEdge = {
  __typename?: 'NotificationListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `NotificationList` at the end of the edge. */
  node?: Maybe<NotificationList>;
};

/** Methods to use when ordering `NotificationList`. */
export enum NotificationListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  PatientNameAsc = 'PATIENT_NAME_ASC',
  PatientNameDesc = 'PATIENT_NAME_DESC',
  FromStatusAsc = 'FROM_STATUS_ASC',
  FromStatusDesc = 'FROM_STATUS_DESC',
  ToStatusAsc = 'TO_STATUS_ASC',
  ToStatusDesc = 'TO_STATUS_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  RemarksAsc = 'REMARKS_ASC',
  RemarksDesc = 'REMARKS_DESC',
  TypesAsc = 'TYPES_ASC',
  TypesDesc = 'TYPES_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasReadAsc = 'HAS_READ_ASC',
  HasReadDesc = 'HAS_READ_DESC'
}

/** The output of our `notification` mutation. */
export type NotificationPayload = {
  __typename?: 'NotificationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<NotificationRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `notification` mutation. */
export type NotificationRecord = {
  __typename?: 'NotificationRecord';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
};

/** All input for the `notificationV1` mutation. */
export type NotificationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `notificationV1` mutation. */
export type NotificationV1Payload = {
  __typename?: 'NotificationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<NotificationV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `notificationV1` mutation. */
export type NotificationV1Record = {
  __typename?: 'NotificationV1Record';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  trackId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
  createdBy?: Maybe<Scalars['UUID']>;
};

/** All input for the `notifyDdlPostgrest` mutation. */
export type NotifyDdlPostgrestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `notifyDdlPostgrest` mutation. */
export type NotifyDdlPostgrestPayload = {
  __typename?: 'NotifyDdlPostgrestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** This view is used as dropdown under title in hippa form. */
export type ObtainRecordTypeMaster = {
  __typename?: 'ObtainRecordTypeMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `ObtainRecordTypeMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ObtainRecordTypeMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `ObtainRecordTypeMaster` object types. All fields are combined with a logical ‘and.’ */
export type ObtainRecordTypeMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ObtainRecordTypeMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ObtainRecordTypeMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<ObtainRecordTypeMasterFilter>;
};

/** An input for mutations affecting `ObtainRecordTypeMaster` */
export type ObtainRecordTypeMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `ObtainRecordTypeMaster` values. */
export type ObtainRecordTypeMastersConnection = {
  __typename?: 'ObtainRecordTypeMastersConnection';
  /** A list of `ObtainRecordTypeMaster` objects. */
  nodes: Array<Maybe<ObtainRecordTypeMaster>>;
  /** A list of edges which contains the `ObtainRecordTypeMaster` and cursor to aid in pagination. */
  edges: Array<ObtainRecordTypeMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ObtainRecordTypeMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ObtainRecordTypeMaster` edge in the connection. */
export type ObtainRecordTypeMastersEdge = {
  __typename?: 'ObtainRecordTypeMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ObtainRecordTypeMaster` at the end of the edge. */
  node?: Maybe<ObtainRecordTypeMaster>;
};

/** Methods to use when ordering `ObtainRecordTypeMaster`. */
export enum ObtainRecordTypeMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type ObtainTypeMaster = {
  __typename?: 'ObtainTypeMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  recordStatusValue?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `ObtainTypeMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ObtainTypeMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recordStatusValue` field. */
  recordStatusValue?: Maybe<Scalars['String']>;
};

/** A filter to be used against `ObtainTypeMaster` object types. All fields are combined with a logical ‘and.’ */
export type ObtainTypeMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `recordStatusValue` field. */
  recordStatusValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ObtainTypeMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ObtainTypeMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<ObtainTypeMasterFilter>;
};

export type ObtainTypeMasterV1 = {
  __typename?: 'ObtainTypeMasterV1';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  recordStatusValue?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `ObtainTypeMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ObtainTypeMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recordStatusValue` field. */
  recordStatusValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sortOrder` field. */
  sortOrder?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `ObtainTypeMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type ObtainTypeMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `recordStatusValue` field. */
  recordStatusValue?: Maybe<StringFilter>;
  /** Filter by the object’s `sortOrder` field. */
  sortOrder?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ObtainTypeMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ObtainTypeMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<ObtainTypeMasterV1Filter>;
};

/** A connection to a list of `ObtainTypeMasterV1` values. */
export type ObtainTypeMasterV1sConnection = {
  __typename?: 'ObtainTypeMasterV1sConnection';
  /** A list of `ObtainTypeMasterV1` objects. */
  nodes: Array<Maybe<ObtainTypeMasterV1>>;
  /** A list of edges which contains the `ObtainTypeMasterV1` and cursor to aid in pagination. */
  edges: Array<ObtainTypeMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ObtainTypeMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ObtainTypeMasterV1` edge in the connection. */
export type ObtainTypeMasterV1sEdge = {
  __typename?: 'ObtainTypeMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ObtainTypeMasterV1` at the end of the edge. */
  node?: Maybe<ObtainTypeMasterV1>;
};

/** Methods to use when ordering `ObtainTypeMasterV1`. */
export enum ObtainTypeMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  RecordStatusValueAsc = 'RECORD_STATUS_VALUE_ASC',
  RecordStatusValueDesc = 'RECORD_STATUS_VALUE_DESC',
  SortOrderAsc = 'SORT_ORDER_ASC',
  SortOrderDesc = 'SORT_ORDER_DESC'
}

/** A connection to a list of `ObtainTypeMaster` values. */
export type ObtainTypeMastersConnection = {
  __typename?: 'ObtainTypeMastersConnection';
  /** A list of `ObtainTypeMaster` objects. */
  nodes: Array<Maybe<ObtainTypeMaster>>;
  /** A list of edges which contains the `ObtainTypeMaster` and cursor to aid in pagination. */
  edges: Array<ObtainTypeMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ObtainTypeMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ObtainTypeMaster` edge in the connection. */
export type ObtainTypeMastersEdge = {
  __typename?: 'ObtainTypeMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ObtainTypeMaster` at the end of the edge. */
  node?: Maybe<ObtainTypeMaster>;
};

/** Methods to use when ordering `ObtainTypeMaster`. */
export enum ObtainTypeMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  RecordStatusValueAsc = 'RECORD_STATUS_VALUE_ASC',
  RecordStatusValueDesc = 'RECORD_STATUS_VALUE_DESC'
}

export type OccupationIndustryMasterV1 = {
  __typename?: 'OccupationIndustryMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OccupationIndustryMasterV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type OccupationIndustryMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OccupationIndustryMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type OccupationIndustryMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OccupationIndustryMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OccupationIndustryMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<OccupationIndustryMasterV1Filter>;
};

/** An input for mutations affecting `OccupationIndustryMasterV1` */
export type OccupationIndustryMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `OccupationIndustryMasterV1` values. */
export type OccupationIndustryMasterV1sConnection = {
  __typename?: 'OccupationIndustryMasterV1sConnection';
  /** A list of `OccupationIndustryMasterV1` objects. */
  nodes: Array<Maybe<OccupationIndustryMasterV1>>;
  /** A list of edges which contains the `OccupationIndustryMasterV1` and cursor to aid in pagination. */
  edges: Array<OccupationIndustryMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OccupationIndustryMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OccupationIndustryMasterV1` edge in the connection. */
export type OccupationIndustryMasterV1sEdge = {
  __typename?: 'OccupationIndustryMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OccupationIndustryMasterV1` at the end of the edge. */
  node?: Maybe<OccupationIndustryMasterV1>;
};

/** Methods to use when ordering `OccupationIndustryMasterV1`. */
export enum OccupationIndustryMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type OfferingAliasesList = {
  __typename?: 'OfferingAliasesList';
  satId: Scalars['SatGitlabOfferingProfileLhcFormId'];
  glProjectId: Scalars['GitlabProjectId'];
  alias?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `OfferingAliasesList` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingAliasesListCondition = {
  /** Checks for equality with the object’s `satId` field. */
  satId?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Checks for equality with the object’s `glProjectId` field. */
  glProjectId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `alias` field. */
  alias?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `OfferingAliasesList` object types. All fields are combined with a logical ‘and.’ */
export type OfferingAliasesListFilter = {
  /** Filter by the object’s `satId` field. */
  satId?: Maybe<SatGitlabOfferingProfileLhcFormIdFilter>;
  /** Filter by the object’s `glProjectId` field. */
  glProjectId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `alias` field. */
  alias?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingAliasesListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingAliasesListFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingAliasesListFilter>;
};

/** A connection to a list of `OfferingAliasesList` values. */
export type OfferingAliasesListsConnection = {
  __typename?: 'OfferingAliasesListsConnection';
  /** A list of `OfferingAliasesList` objects. */
  nodes: Array<Maybe<OfferingAliasesList>>;
  /** A list of edges which contains the `OfferingAliasesList` and cursor to aid in pagination. */
  edges: Array<OfferingAliasesListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingAliasesList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingAliasesList` edge in the connection. */
export type OfferingAliasesListsEdge = {
  __typename?: 'OfferingAliasesListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingAliasesList` at the end of the edge. */
  node?: Maybe<OfferingAliasesList>;
};

/** Methods to use when ordering `OfferingAliasesList`. */
export enum OfferingAliasesListsOrderBy {
  Natural = 'NATURAL',
  SatIdAsc = 'SAT_ID_ASC',
  SatIdDesc = 'SAT_ID_DESC',
  GlProjectIdAsc = 'GL_PROJECT_ID_ASC',
  GlProjectIdDesc = 'GL_PROJECT_ID_DESC',
  AliasAsc = 'ALIAS_ASC',
  AliasDesc = 'ALIAS_DESC'
}

export type OfferingBrokenUrlList = {
  __typename?: 'OfferingBrokenUrlList';
  id: Scalars['Int'];
  offeringId?: Maybe<Scalars['String']>;
  offeringTitle?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  facebookUrl?: Maybe<Scalars['String']>;
  twitterUrl?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  linkedinUrl?: Maybe<Scalars['String']>;
  instagramUrl?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingBrokenUrlList` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingBrokenUrlListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `githubUrl` field. */
  githubUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingBrokenUrlList` object types. All fields are combined with a logical ‘and.’ */
export type OfferingBrokenUrlListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `githubUrl` field. */
  githubUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingBrokenUrlListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingBrokenUrlListFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingBrokenUrlListFilter>;
};

/** An input for mutations affecting `OfferingBrokenUrlList` */
export type OfferingBrokenUrlListInput = {
  offeringId?: Maybe<Scalars['String']>;
  offeringTitle?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  facebookUrl?: Maybe<Scalars['String']>;
  twitterUrl?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  linkedinUrl?: Maybe<Scalars['String']>;
  instagramUrl?: Maybe<Scalars['String']>;
};

/** A connection to a list of `OfferingBrokenUrlList` values. */
export type OfferingBrokenUrlListsConnection = {
  __typename?: 'OfferingBrokenUrlListsConnection';
  /** A list of `OfferingBrokenUrlList` objects. */
  nodes: Array<Maybe<OfferingBrokenUrlList>>;
  /** A list of edges which contains the `OfferingBrokenUrlList` and cursor to aid in pagination. */
  edges: Array<OfferingBrokenUrlListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingBrokenUrlList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingBrokenUrlList` edge in the connection. */
export type OfferingBrokenUrlListsEdge = {
  __typename?: 'OfferingBrokenUrlListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingBrokenUrlList` at the end of the edge. */
  node?: Maybe<OfferingBrokenUrlList>;
};

/** Methods to use when ordering `OfferingBrokenUrlList`. */
export enum OfferingBrokenUrlListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  GithubUrlAsc = 'GITHUB_URL_ASC',
  GithubUrlDesc = 'GITHUB_URL_DESC',
  FacebookUrlAsc = 'FACEBOOK_URL_ASC',
  FacebookUrlDesc = 'FACEBOOK_URL_DESC',
  TwitterUrlAsc = 'TWITTER_URL_ASC',
  TwitterUrlDesc = 'TWITTER_URL_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  LinkedinUrlAsc = 'LINKEDIN_URL_ASC',
  LinkedinUrlDesc = 'LINKEDIN_URL_DESC',
  InstagramUrlAsc = 'INSTAGRAM_URL_ASC',
  InstagramUrlDesc = 'INSTAGRAM_URL_DESC'
}

export type OfferingCampaignsList = {
  __typename?: 'OfferingCampaignsList';
  projectId?: Maybe<Scalars['Int']>;
  offeringTitle?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  campaign?: Maybe<Scalars['String']>;
  campaignAddedBy?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingCampaignsList` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingCampaignsListCondition = {
  /** Checks for equality with the object’s `projectId` field. */
  projectId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `campaign` field. */
  campaign?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `campaignAddedBy` field. */
  campaignAddedBy?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingCampaignsList` object types. All fields are combined with a logical ‘and.’ */
export type OfferingCampaignsListFilter = {
  /** Filter by the object’s `projectId` field. */
  projectId?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `campaign` field. */
  campaign?: Maybe<StringFilter>;
  /** Filter by the object’s `campaignAddedBy` field. */
  campaignAddedBy?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingCampaignsListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingCampaignsListFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingCampaignsListFilter>;
};

/** A connection to a list of `OfferingCampaignsList` values. */
export type OfferingCampaignsListsConnection = {
  __typename?: 'OfferingCampaignsListsConnection';
  /** A list of `OfferingCampaignsList` objects. */
  nodes: Array<Maybe<OfferingCampaignsList>>;
  /** A list of edges which contains the `OfferingCampaignsList` and cursor to aid in pagination. */
  edges: Array<OfferingCampaignsListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingCampaignsList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingCampaignsList` edge in the connection. */
export type OfferingCampaignsListsEdge = {
  __typename?: 'OfferingCampaignsListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingCampaignsList` at the end of the edge. */
  node?: Maybe<OfferingCampaignsList>;
};

/** Methods to use when ordering `OfferingCampaignsList`. */
export enum OfferingCampaignsListsOrderBy {
  Natural = 'NATURAL',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CampaignAsc = 'CAMPAIGN_ASC',
  CampaignDesc = 'CAMPAIGN_DESC',
  CampaignAddedByAsc = 'CAMPAIGN_ADDED_BY_ASC',
  CampaignAddedByDesc = 'CAMPAIGN_ADDED_BY_DESC'
}

/** An input for mutations affecting `OfferingCategoriesInputRecord` */
export type OfferingCategoriesInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingCcowVersionsInputRecord` */
export type OfferingCcowVersionsInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingCdaVersionsInputRecord` */
export type OfferingCdaVersionsInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type OfferingCreatedByUser = {
  __typename?: 'OfferingCreatedByUser';
  offeringId?: Maybe<Scalars['Int']>;
  offeringName?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringCreatedBy?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingCreatedByUser` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingCreatedByUserCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringName` field. */
  offeringName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingCreatedByUser` object types. All fields are combined with a logical ‘and.’ */
export type OfferingCreatedByUserFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringName` field. */
  offeringName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingCreatedByUserFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingCreatedByUserFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingCreatedByUserFilter>;
};

/** A connection to a list of `OfferingCreatedByUser` values. */
export type OfferingCreatedByUsersConnection = {
  __typename?: 'OfferingCreatedByUsersConnection';
  /** A list of `OfferingCreatedByUser` objects. */
  nodes: Array<Maybe<OfferingCreatedByUser>>;
  /** A list of edges which contains the `OfferingCreatedByUser` and cursor to aid in pagination. */
  edges: Array<OfferingCreatedByUsersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingCreatedByUser` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingCreatedByUser` edge in the connection. */
export type OfferingCreatedByUsersEdge = {
  __typename?: 'OfferingCreatedByUsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingCreatedByUser` at the end of the edge. */
  node?: Maybe<OfferingCreatedByUser>;
};

/** Methods to use when ordering `OfferingCreatedByUser`. */
export enum OfferingCreatedByUsersOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingNameAsc = 'OFFERING_NAME_ASC',
  OfferingNameDesc = 'OFFERING_NAME_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingCreatedByAsc = 'OFFERING_CREATED_BY_ASC',
  OfferingCreatedByDesc = 'OFFERING_CREATED_BY_DESC'
}

export type OfferingCuratedListWithCommitMsg = {
  __typename?: 'OfferingCuratedListWithCommitMsg';
  id?: Maybe<Scalars['Int']>;
  offeringCuratedBy?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  userEmail?: Maybe<Scalars['String']>;
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `OfferingCuratedListWithCommitMsg` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type OfferingCuratedListWithCommitMsgCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userEmail` field. */
  userEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `OfferingCuratedListWithCommitMsg` object types. All fields are combined with a logical ‘and.’ */
export type OfferingCuratedListWithCommitMsgFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `userEmail` field. */
  userEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingCuratedListWithCommitMsgFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingCuratedListWithCommitMsgFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingCuratedListWithCommitMsgFilter>;
};

/** A connection to a list of `OfferingCuratedListWithCommitMsg` values. */
export type OfferingCuratedListWithCommitMsgsConnection = {
  __typename?: 'OfferingCuratedListWithCommitMsgsConnection';
  /** A list of `OfferingCuratedListWithCommitMsg` objects. */
  nodes: Array<Maybe<OfferingCuratedListWithCommitMsg>>;
  /** A list of edges which contains the `OfferingCuratedListWithCommitMsg` and cursor to aid in pagination. */
  edges: Array<OfferingCuratedListWithCommitMsgsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingCuratedListWithCommitMsg` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingCuratedListWithCommitMsg` edge in the connection. */
export type OfferingCuratedListWithCommitMsgsEdge = {
  __typename?: 'OfferingCuratedListWithCommitMsgsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingCuratedListWithCommitMsg` at the end of the edge. */
  node?: Maybe<OfferingCuratedListWithCommitMsg>;
};

/** Methods to use when ordering `OfferingCuratedListWithCommitMsg`. */
export enum OfferingCuratedListWithCommitMsgsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingCuratedByAsc = 'OFFERING_CURATED_BY_ASC',
  OfferingCuratedByDesc = 'OFFERING_CURATED_BY_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UserEmailAsc = 'USER_EMAIL_ASC',
  UserEmailDesc = 'USER_EMAIL_DESC',
  OfferingCuratedOnAsc = 'OFFERING_CURATED_ON_ASC',
  OfferingCuratedOnDesc = 'OFFERING_CURATED_ON_DESC'
}

export type OfferingDataResult = {
  __typename?: 'OfferingDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingFhirSupportedResourcesInputRecord` */
export type OfferingFhirSupportedResourcesInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingFhirVersionsInputRecord` */
export type OfferingFhirVersionsInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingHealthItStandardsInputRecord` */
export type OfferingHealthItStandardsInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingHl7SupportedMessagesInputRecord` */
export type OfferingHl7SupportedMessagesInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingHl7VersionsInputRecord` */
export type OfferingHl7VersionsInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type OfferingInviteDataResult = {
  __typename?: 'OfferingInviteDataResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `OfferingInviteInputRecord` */
export type OfferingInviteInputRecordInput = {
  email?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  fromName?: Maybe<Scalars['String']>;
  toName?: Maybe<Scalars['String']>;
  offeringName?: Maybe<Scalars['String']>;
  offeringId?: Maybe<Scalars['Int']>;
};

/** An input for mutations affecting `OfferingLicenseInputRecord` */
export type OfferingLicenseInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type OfferingProfile = {
  __typename?: 'OfferingProfile';
  id: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  archetype?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  companyName?: Maybe<Scalars['String']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  claimStatus?: Maybe<Scalars['String']>;
  companySlug?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
  facebookUrl?: Maybe<Scalars['String']>;
  twitterUrl?: Maybe<Scalars['String']>;
  linkedinUrl?: Maybe<Scalars['String']>;
  instagramUrl?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  instLink?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  forksCount?: Maybe<Scalars['Int']>;
  openIssuesCount?: Maybe<Scalars['Int']>;
  watchersCount?: Maybe<Scalars['Int']>;
  starsCount?: Maybe<Scalars['Int']>;
  licenseType?: Maybe<Scalars['String']>;
  licenseSupplier?: Maybe<Scalars['String']>;
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  carousel?: Maybe<Scalars['JSON']>;
  resources?: Maybe<Scalars['JSON']>;
  institutionId: Scalars['GitlabNamespaceId'];
  institutionTitle?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Scalars['JSON']>;
  fileName?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  categoryLabel?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `OfferingProfile` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OfferingProfileCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `archetype` field. */
  archetype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `uuid` field. */
  uuid?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimStatus` field. */
  claimStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySlug` field. */
  companySlug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `publishDate` field. */
  publishDate?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instLink` field. */
  instLink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `githubUrl` field. */
  githubUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `forksCount` field. */
  forksCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `openIssuesCount` field. */
  openIssuesCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `watchersCount` field. */
  watchersCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `starsCount` field. */
  starsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `licenseType` field. */
  licenseType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `carousel` field. */
  carousel?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `resources` field. */
  resources?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `breadcrumbs` field. */
  breadcrumbs?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `fileName` field. */
  fileName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `categoryLabel` field. */
  categoryLabel?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `OfferingProfile` object types. All fields are combined with a logical ‘and.’ */
export type OfferingProfileFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `archetype` field. */
  archetype?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `uuid` field. */
  uuid?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `claimStatus` field. */
  claimStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `companySlug` field. */
  companySlug?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `publishDate` field. */
  publishDate?: Maybe<StringFilter>;
  /** Filter by the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `instLink` field. */
  instLink?: Maybe<StringFilter>;
  /** Filter by the object’s `githubUrl` field. */
  githubUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `forksCount` field. */
  forksCount?: Maybe<IntFilter>;
  /** Filter by the object’s `openIssuesCount` field. */
  openIssuesCount?: Maybe<IntFilter>;
  /** Filter by the object’s `watchersCount` field. */
  watchersCount?: Maybe<IntFilter>;
  /** Filter by the object’s `starsCount` field. */
  starsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `licenseType` field. */
  licenseType?: Maybe<StringFilter>;
  /** Filter by the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<StringFilter>;
  /** Filter by the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `fileName` field. */
  fileName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `categoryLabel` field. */
  categoryLabel?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingProfileFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingProfileFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingProfileFilter>;
};

export type OfferingProfileJune2021 = {
  __typename?: 'OfferingProfileJune2021';
  id: Scalars['GitlabProjectId'];
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  vendorName?: Maybe<Scalars['String']>;
  vendorEmail?: Maybe<Scalars['String']>;
  vendorContact?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  facebookUrl?: Maybe<Scalars['String']>;
  twitterUrl?: Maybe<Scalars['String']>;
  linkedinUrl?: Maybe<Scalars['String']>;
  instagramUrl?: Maybe<Scalars['String']>;
  openSourceLicense?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyEmail?: Maybe<Scalars['String']>;
  companyContactNo?: Maybe<Scalars['String']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  claimStatus?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  claimFromCampaign?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  archetype?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  offeringCreatedTimestamp?: Maybe<Scalars['Float']>;
  offeringUpdatedTimestamp?: Maybe<Scalars['Float']>;
  offeringLastActivityTimestamp?: Maybe<Scalars['Float']>;
  institutionStatus?: Maybe<Scalars['String']>;
  institutionProfileId: Scalars['GitlabProjectId'];
  institutionId?: Maybe<Scalars['Int']>;
  institutionTitle?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  dateOfIncorporation?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  industry?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  networth?: Maybe<Scalars['String']>;
  companySize?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  workEmail?: Maybe<Scalars['String']>;
  workPhone?: Maybe<Scalars['String']>;
  anotherPhone?: Maybe<Scalars['String']>;
  house?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  institutionCreated?: Maybe<Scalars['Datetime']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  featuredContent?: Maybe<Scalars['String']>;
  logoContent?: Maybe<Scalars['String']>;
  offeringPath?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  carousel?: Maybe<Scalars['JSON']>;
  resources?: Maybe<Scalars['JSON']>;
  type?: Maybe<Scalars['String']>;
  licenseType?: Maybe<Scalars['String']>;
  licenseSupplier?: Maybe<Scalars['String']>;
  claimedon?: Maybe<Scalars['String']>;
  claimeduser?: Maybe<Scalars['String']>;
  claimedemail?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  sub?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Scalars['JSON']>;
  searchBredcrumbs?: Maybe<Scalars['String']>;
  instLink?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  companySlug?: Maybe<Scalars['String']>;
  approvedDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `OfferingProfileJune2021` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type OfferingProfileJune2021Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorEmail` field. */
  vendorEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorContact` field. */
  vendorContact?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `githubUrl` field. */
  githubUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `openSourceLicense` field. */
  openSourceLicense?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyEmail` field. */
  companyEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyContactNo` field. */
  companyContactNo?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimStatus` field. */
  claimStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimFromCampaign` field. */
  claimFromCampaign?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `uuid` field. */
  uuid?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `archetype` field. */
  archetype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringCreatedTimestamp` field. */
  offeringCreatedTimestamp?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `offeringUpdatedTimestamp` field. */
  offeringUpdatedTimestamp?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `offeringLastActivityTimestamp` field. */
  offeringLastActivityTimestamp?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionProfileId` field. */
  institutionProfileId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyDescription` field. */
  companyDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dateOfIncorporation` field. */
  dateOfIncorporation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyType` field. */
  companyType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationNumber` field. */
  registrationNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `industry` field. */
  industry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `currency` field. */
  currency?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `networth` field. */
  networth?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySize` field. */
  companySize?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `website` field. */
  website?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `workEmail` field. */
  workEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `workPhone` field. */
  workPhone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `anotherPhone` field. */
  anotherPhone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `house` field. */
  house?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zip` field. */
  zip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionCreated` field. */
  institutionCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredContent` field. */
  featuredContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoContent` field. */
  logoContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringPath` field. */
  offeringPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `carousel` field. */
  carousel?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `resources` field. */
  resources?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `licenseType` field. */
  licenseType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimedon` field. */
  claimedon?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimeduser` field. */
  claimeduser?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimedemail` field. */
  claimedemail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `sub` field. */
  sub?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `breadcrumbs` field. */
  breadcrumbs?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instLink` field. */
  instLink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fileName` field. */
  fileName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySlug` field. */
  companySlug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approvedDate` field. */
  approvedDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `OfferingProfileJune2021` object types. All fields are combined with a logical ‘and.’ */
export type OfferingProfileJune2021Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorEmail` field. */
  vendorEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorContact` field. */
  vendorContact?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `githubUrl` field. */
  githubUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `openSourceLicense` field. */
  openSourceLicense?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `companyEmail` field. */
  companyEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `companyContactNo` field. */
  companyContactNo?: Maybe<StringFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `claimStatus` field. */
  claimStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `claimFromCampaign` field. */
  claimFromCampaign?: Maybe<StringFilter>;
  /** Filter by the object’s `uuid` field. */
  uuid?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `archetype` field. */
  archetype?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringCreatedTimestamp` field. */
  offeringCreatedTimestamp?: Maybe<FloatFilter>;
  /** Filter by the object’s `offeringUpdatedTimestamp` field. */
  offeringUpdatedTimestamp?: Maybe<FloatFilter>;
  /** Filter by the object’s `offeringLastActivityTimestamp` field. */
  offeringLastActivityTimestamp?: Maybe<FloatFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionProfileId` field. */
  institutionProfileId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<IntFilter>;
  /** Filter by the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `companyDescription` field. */
  companyDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `dateOfIncorporation` field. */
  dateOfIncorporation?: Maybe<StringFilter>;
  /** Filter by the object’s `companyType` field. */
  companyType?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationNumber` field. */
  registrationNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `industry` field. */
  industry?: Maybe<StringFilter>;
  /** Filter by the object’s `currency` field. */
  currency?: Maybe<StringFilter>;
  /** Filter by the object’s `networth` field. */
  networth?: Maybe<StringFilter>;
  /** Filter by the object’s `companySize` field. */
  companySize?: Maybe<StringFilter>;
  /** Filter by the object’s `website` field. */
  website?: Maybe<StringFilter>;
  /** Filter by the object’s `workEmail` field. */
  workEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `workPhone` field. */
  workPhone?: Maybe<StringFilter>;
  /** Filter by the object’s `anotherPhone` field. */
  anotherPhone?: Maybe<StringFilter>;
  /** Filter by the object’s `house` field. */
  house?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `zip` field. */
  zip?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionCreated` field. */
  institutionCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringPath` field. */
  offeringPath?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `licenseType` field. */
  licenseType?: Maybe<StringFilter>;
  /** Filter by the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<StringFilter>;
  /** Filter by the object’s `claimedon` field. */
  claimedon?: Maybe<StringFilter>;
  /** Filter by the object’s `claimeduser` field. */
  claimeduser?: Maybe<StringFilter>;
  /** Filter by the object’s `claimedemail` field. */
  claimedemail?: Maybe<StringFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `sub` field. */
  sub?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<StringFilter>;
  /** Filter by the object’s `instLink` field. */
  instLink?: Maybe<StringFilter>;
  /** Filter by the object’s `fileName` field. */
  fileName?: Maybe<StringFilter>;
  /** Filter by the object’s `companySlug` field. */
  companySlug?: Maybe<StringFilter>;
  /** Filter by the object’s `approvedDate` field. */
  approvedDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingProfileJune2021Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingProfileJune2021Filter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingProfileJune2021Filter>;
};

/** A connection to a list of `OfferingProfileJune2021` values. */
export type OfferingProfileJune2021sConnection = {
  __typename?: 'OfferingProfileJune2021sConnection';
  /** A list of `OfferingProfileJune2021` objects. */
  nodes: Array<Maybe<OfferingProfileJune2021>>;
  /** A list of edges which contains the `OfferingProfileJune2021` and cursor to aid in pagination. */
  edges: Array<OfferingProfileJune2021sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingProfileJune2021` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingProfileJune2021` edge in the connection. */
export type OfferingProfileJune2021sEdge = {
  __typename?: 'OfferingProfileJune2021sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingProfileJune2021` at the end of the edge. */
  node?: Maybe<OfferingProfileJune2021>;
};

/** Methods to use when ordering `OfferingProfileJune2021`. */
export enum OfferingProfileJune2021sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC',
  VendorEmailAsc = 'VENDOR_EMAIL_ASC',
  VendorEmailDesc = 'VENDOR_EMAIL_DESC',
  VendorContactAsc = 'VENDOR_CONTACT_ASC',
  VendorContactDesc = 'VENDOR_CONTACT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  GithubUrlAsc = 'GITHUB_URL_ASC',
  GithubUrlDesc = 'GITHUB_URL_DESC',
  FacebookUrlAsc = 'FACEBOOK_URL_ASC',
  FacebookUrlDesc = 'FACEBOOK_URL_DESC',
  TwitterUrlAsc = 'TWITTER_URL_ASC',
  TwitterUrlDesc = 'TWITTER_URL_DESC',
  LinkedinUrlAsc = 'LINKEDIN_URL_ASC',
  LinkedinUrlDesc = 'LINKEDIN_URL_DESC',
  InstagramUrlAsc = 'INSTAGRAM_URL_ASC',
  InstagramUrlDesc = 'INSTAGRAM_URL_DESC',
  OpenSourceLicenseAsc = 'OPEN_SOURCE_LICENSE_ASC',
  OpenSourceLicenseDesc = 'OPEN_SOURCE_LICENSE_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  CompanyEmailAsc = 'COMPANY_EMAIL_ASC',
  CompanyEmailDesc = 'COMPANY_EMAIL_DESC',
  CompanyContactNoAsc = 'COMPANY_CONTACT_NO_ASC',
  CompanyContactNoDesc = 'COMPANY_CONTACT_NO_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  ClaimStatusAsc = 'CLAIM_STATUS_ASC',
  ClaimStatusDesc = 'CLAIM_STATUS_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  ClaimFromCampaignAsc = 'CLAIM_FROM_CAMPAIGN_ASC',
  ClaimFromCampaignDesc = 'CLAIM_FROM_CAMPAIGN_DESC',
  UuidAsc = 'UUID_ASC',
  UuidDesc = 'UUID_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  ArchetypeAsc = 'ARCHETYPE_ASC',
  ArchetypeDesc = 'ARCHETYPE_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingUpdatedAsc = 'OFFERING_UPDATED_ASC',
  OfferingUpdatedDesc = 'OFFERING_UPDATED_DESC',
  OfferingLastActivityAtAsc = 'OFFERING_LAST_ACTIVITY_AT_ASC',
  OfferingLastActivityAtDesc = 'OFFERING_LAST_ACTIVITY_AT_DESC',
  OfferingCreatedTimestampAsc = 'OFFERING_CREATED_TIMESTAMP_ASC',
  OfferingCreatedTimestampDesc = 'OFFERING_CREATED_TIMESTAMP_DESC',
  OfferingUpdatedTimestampAsc = 'OFFERING_UPDATED_TIMESTAMP_ASC',
  OfferingUpdatedTimestampDesc = 'OFFERING_UPDATED_TIMESTAMP_DESC',
  OfferingLastActivityTimestampAsc = 'OFFERING_LAST_ACTIVITY_TIMESTAMP_ASC',
  OfferingLastActivityTimestampDesc = 'OFFERING_LAST_ACTIVITY_TIMESTAMP_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC',
  InstitutionProfileIdAsc = 'INSTITUTION_PROFILE_ID_ASC',
  InstitutionProfileIdDesc = 'INSTITUTION_PROFILE_ID_DESC',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  InstitutionTitleAsc = 'INSTITUTION_TITLE_ASC',
  InstitutionTitleDesc = 'INSTITUTION_TITLE_DESC',
  CompanyDescriptionAsc = 'COMPANY_DESCRIPTION_ASC',
  CompanyDescriptionDesc = 'COMPANY_DESCRIPTION_DESC',
  DateOfIncorporationAsc = 'DATE_OF_INCORPORATION_ASC',
  DateOfIncorporationDesc = 'DATE_OF_INCORPORATION_DESC',
  CompanyTypeAsc = 'COMPANY_TYPE_ASC',
  CompanyTypeDesc = 'COMPANY_TYPE_DESC',
  RegistrationNumberAsc = 'REGISTRATION_NUMBER_ASC',
  RegistrationNumberDesc = 'REGISTRATION_NUMBER_DESC',
  IndustryAsc = 'INDUSTRY_ASC',
  IndustryDesc = 'INDUSTRY_DESC',
  CurrencyAsc = 'CURRENCY_ASC',
  CurrencyDesc = 'CURRENCY_DESC',
  NetworthAsc = 'NETWORTH_ASC',
  NetworthDesc = 'NETWORTH_DESC',
  CompanySizeAsc = 'COMPANY_SIZE_ASC',
  CompanySizeDesc = 'COMPANY_SIZE_DESC',
  WebsiteAsc = 'WEBSITE_ASC',
  WebsiteDesc = 'WEBSITE_DESC',
  WorkEmailAsc = 'WORK_EMAIL_ASC',
  WorkEmailDesc = 'WORK_EMAIL_DESC',
  WorkPhoneAsc = 'WORK_PHONE_ASC',
  WorkPhoneDesc = 'WORK_PHONE_DESC',
  AnotherPhoneAsc = 'ANOTHER_PHONE_ASC',
  AnotherPhoneDesc = 'ANOTHER_PHONE_DESC',
  HouseAsc = 'HOUSE_ASC',
  HouseDesc = 'HOUSE_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  ZipAsc = 'ZIP_ASC',
  ZipDesc = 'ZIP_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  InstitutionCreatedAsc = 'INSTITUTION_CREATED_ASC',
  InstitutionCreatedDesc = 'INSTITUTION_CREATED_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  FeaturedContentAsc = 'FEATURED_CONTENT_ASC',
  FeaturedContentDesc = 'FEATURED_CONTENT_DESC',
  LogoContentAsc = 'LOGO_CONTENT_ASC',
  LogoContentDesc = 'LOGO_CONTENT_DESC',
  OfferingPathAsc = 'OFFERING_PATH_ASC',
  OfferingPathDesc = 'OFFERING_PATH_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  ValidOrganicContentAsc = 'VALID_ORGANIC_CONTENT_ASC',
  ValidOrganicContentDesc = 'VALID_ORGANIC_CONTENT_DESC',
  CarouselAsc = 'CAROUSEL_ASC',
  CarouselDesc = 'CAROUSEL_DESC',
  ResourcesAsc = 'RESOURCES_ASC',
  ResourcesDesc = 'RESOURCES_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  LicenseTypeAsc = 'LICENSE_TYPE_ASC',
  LicenseTypeDesc = 'LICENSE_TYPE_DESC',
  LicenseSupplierAsc = 'LICENSE_SUPPLIER_ASC',
  LicenseSupplierDesc = 'LICENSE_SUPPLIER_DESC',
  ClaimedonAsc = 'CLAIMEDON_ASC',
  ClaimedonDesc = 'CLAIMEDON_DESC',
  ClaimeduserAsc = 'CLAIMEDUSER_ASC',
  ClaimeduserDesc = 'CLAIMEDUSER_DESC',
  ClaimedemailAsc = 'CLAIMEDEMAIL_ASC',
  ClaimedemailDesc = 'CLAIMEDEMAIL_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  SubAsc = 'SUB_ASC',
  SubDesc = 'SUB_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  BreadcrumbsAsc = 'BREADCRUMBS_ASC',
  BreadcrumbsDesc = 'BREADCRUMBS_DESC',
  SearchBredcrumbsAsc = 'SEARCH_BREDCRUMBS_ASC',
  SearchBredcrumbsDesc = 'SEARCH_BREDCRUMBS_DESC',
  InstLinkAsc = 'INST_LINK_ASC',
  InstLinkDesc = 'INST_LINK_DESC',
  FileNameAsc = 'FILE_NAME_ASC',
  FileNameDesc = 'FILE_NAME_DESC',
  CompanySlugAsc = 'COMPANY_SLUG_ASC',
  CompanySlugDesc = 'COMPANY_SLUG_DESC',
  ApprovedDateAsc = 'APPROVED_DATE_ASC',
  ApprovedDateDesc = 'APPROVED_DATE_DESC'
}

export type OfferingProfileMaterialized = {
  __typename?: 'OfferingProfileMaterialized';
  id: Scalars['GitlabProjectId'];
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  institutionStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingProfileMaterialized` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type OfferingProfileMaterializedCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingProfileMaterialized` object types. All fields are combined with a logical ‘and.’ */
export type OfferingProfileMaterializedFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingProfileMaterializedFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingProfileMaterializedFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingProfileMaterializedFilter>;
};

/** A connection to a list of `OfferingProfileMaterialized` values. */
export type OfferingProfileMaterializedsConnection = {
  __typename?: 'OfferingProfileMaterializedsConnection';
  /** A list of `OfferingProfileMaterialized` objects. */
  nodes: Array<Maybe<OfferingProfileMaterialized>>;
  /** A list of edges which contains the `OfferingProfileMaterialized` and cursor to aid in pagination. */
  edges: Array<OfferingProfileMaterializedsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingProfileMaterialized` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingProfileMaterialized` edge in the connection. */
export type OfferingProfileMaterializedsEdge = {
  __typename?: 'OfferingProfileMaterializedsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingProfileMaterialized` at the end of the edge. */
  node?: Maybe<OfferingProfileMaterialized>;
};

/** Methods to use when ordering `OfferingProfileMaterialized`. */
export enum OfferingProfileMaterializedsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC'
}

/** A connection to a list of `OfferingProfileMedigy` values. */
export type OfferingProfileMedigiesConnection = {
  __typename?: 'OfferingProfileMedigiesConnection';
  /** A list of `OfferingProfileMedigy` objects. */
  nodes: Array<Maybe<OfferingProfileMedigy>>;
  /** A list of edges which contains the `OfferingProfileMedigy` and cursor to aid in pagination. */
  edges: Array<OfferingProfileMedigiesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingProfileMedigy` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingProfileMedigy` edge in the connection. */
export type OfferingProfileMedigiesEdge = {
  __typename?: 'OfferingProfileMedigiesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingProfileMedigy` at the end of the edge. */
  node?: Maybe<OfferingProfileMedigy>;
};

/** Methods to use when ordering `OfferingProfileMedigy`. */
export enum OfferingProfileMedigiesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  ArchetypeAsc = 'ARCHETYPE_ASC',
  ArchetypeDesc = 'ARCHETYPE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UuidAsc = 'UUID_ASC',
  UuidDesc = 'UUID_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingUpdatedAsc = 'OFFERING_UPDATED_ASC',
  OfferingUpdatedDesc = 'OFFERING_UPDATED_DESC',
  OfferingLastActivityAtAsc = 'OFFERING_LAST_ACTIVITY_AT_ASC',
  OfferingLastActivityAtDesc = 'OFFERING_LAST_ACTIVITY_AT_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  ClaimStatusAsc = 'CLAIM_STATUS_ASC',
  ClaimStatusDesc = 'CLAIM_STATUS_DESC',
  CompanySlugAsc = 'COMPANY_SLUG_ASC',
  CompanySlugDesc = 'COMPANY_SLUG_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  PublishDateAsc = 'PUBLISH_DATE_ASC',
  PublishDateDesc = 'PUBLISH_DATE_DESC',
  FacebookUrlAsc = 'FACEBOOK_URL_ASC',
  FacebookUrlDesc = 'FACEBOOK_URL_DESC',
  TwitterUrlAsc = 'TWITTER_URL_ASC',
  TwitterUrlDesc = 'TWITTER_URL_DESC',
  LinkedinUrlAsc = 'LINKEDIN_URL_ASC',
  LinkedinUrlDesc = 'LINKEDIN_URL_DESC',
  InstagramUrlAsc = 'INSTAGRAM_URL_ASC',
  InstagramUrlDesc = 'INSTAGRAM_URL_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  InstLinkAsc = 'INST_LINK_ASC',
  InstLinkDesc = 'INST_LINK_DESC',
  GithubUrlAsc = 'GITHUB_URL_ASC',
  GithubUrlDesc = 'GITHUB_URL_DESC',
  ForksCountAsc = 'FORKS_COUNT_ASC',
  ForksCountDesc = 'FORKS_COUNT_DESC',
  OpenIssuesCountAsc = 'OPEN_ISSUES_COUNT_ASC',
  OpenIssuesCountDesc = 'OPEN_ISSUES_COUNT_DESC',
  WatchersCountAsc = 'WATCHERS_COUNT_ASC',
  WatchersCountDesc = 'WATCHERS_COUNT_DESC',
  StarsCountAsc = 'STARS_COUNT_ASC',
  StarsCountDesc = 'STARS_COUNT_DESC',
  LicenseTypeAsc = 'LICENSE_TYPE_ASC',
  LicenseTypeDesc = 'LICENSE_TYPE_DESC',
  LicenseSupplierAsc = 'LICENSE_SUPPLIER_ASC',
  LicenseSupplierDesc = 'LICENSE_SUPPLIER_DESC',
  ValidOrganicContentAsc = 'VALID_ORGANIC_CONTENT_ASC',
  ValidOrganicContentDesc = 'VALID_ORGANIC_CONTENT_DESC',
  CarouselAsc = 'CAROUSEL_ASC',
  CarouselDesc = 'CAROUSEL_DESC',
  ResourcesAsc = 'RESOURCES_ASC',
  ResourcesDesc = 'RESOURCES_DESC',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  InstitutionTitleAsc = 'INSTITUTION_TITLE_ASC',
  InstitutionTitleDesc = 'INSTITUTION_TITLE_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC',
  BreadcrumbsAsc = 'BREADCRUMBS_ASC',
  BreadcrumbsDesc = 'BREADCRUMBS_DESC',
  FileNameAsc = 'FILE_NAME_ASC',
  FileNameDesc = 'FILE_NAME_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  CategoryLabelAsc = 'CATEGORY_LABEL_ASC',
  CategoryLabelDesc = 'CATEGORY_LABEL_DESC',
  CategoryUrlAsc = 'CATEGORY_URL_ASC',
  CategoryUrlDesc = 'CATEGORY_URL_DESC'
}

export type OfferingProfileMedigy = {
  __typename?: 'OfferingProfileMedigy';
  id: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  archetype?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  companyName?: Maybe<Scalars['String']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  claimStatus?: Maybe<Scalars['String']>;
  companySlug?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
  facebookUrl?: Maybe<Scalars['String']>;
  twitterUrl?: Maybe<Scalars['String']>;
  linkedinUrl?: Maybe<Scalars['String']>;
  instagramUrl?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  instLink?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  forksCount?: Maybe<Scalars['Int']>;
  openIssuesCount?: Maybe<Scalars['Int']>;
  watchersCount?: Maybe<Scalars['Int']>;
  starsCount?: Maybe<Scalars['Int']>;
  licenseType?: Maybe<Scalars['String']>;
  licenseSupplier?: Maybe<Scalars['String']>;
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  carousel?: Maybe<Scalars['JSON']>;
  resources?: Maybe<Scalars['JSON']>;
  institutionId: Scalars['GitlabNamespaceId'];
  institutionTitle?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Scalars['JSON']>;
  fileName?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  categoryLabel?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `OfferingProfileMedigy` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingProfileMedigyCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `archetype` field. */
  archetype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `uuid` field. */
  uuid?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `claimStatus` field. */
  claimStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companySlug` field. */
  companySlug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `publishDate` field. */
  publishDate?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `instLink` field. */
  instLink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `githubUrl` field. */
  githubUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `forksCount` field. */
  forksCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `openIssuesCount` field. */
  openIssuesCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `watchersCount` field. */
  watchersCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `starsCount` field. */
  starsCount?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `licenseType` field. */
  licenseType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `carousel` field. */
  carousel?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `resources` field. */
  resources?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `institutionId` field. */
  institutionId?: Maybe<Scalars['GitlabNamespaceId']>;
  /** Checks for equality with the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `breadcrumbs` field. */
  breadcrumbs?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `fileName` field. */
  fileName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `categoryLabel` field. */
  categoryLabel?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `categoryUrl` field. */
  categoryUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `OfferingProfileMedigy` object types. All fields are combined with a logical ‘and.’ */
export type OfferingProfileMedigyFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `archetype` field. */
  archetype?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `uuid` field. */
  uuid?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringUpdated` field. */
  offeringUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `claimStatus` field. */
  claimStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `companySlug` field. */
  companySlug?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `publishDate` field. */
  publishDate?: Maybe<StringFilter>;
  /** Filter by the object’s `facebookUrl` field. */
  facebookUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `twitterUrl` field. */
  twitterUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `linkedinUrl` field. */
  linkedinUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `instagramUrl` field. */
  instagramUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `instLink` field. */
  instLink?: Maybe<StringFilter>;
  /** Filter by the object’s `githubUrl` field. */
  githubUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `forksCount` field. */
  forksCount?: Maybe<IntFilter>;
  /** Filter by the object’s `openIssuesCount` field. */
  openIssuesCount?: Maybe<IntFilter>;
  /** Filter by the object’s `watchersCount` field. */
  watchersCount?: Maybe<IntFilter>;
  /** Filter by the object’s `starsCount` field. */
  starsCount?: Maybe<IntFilter>;
  /** Filter by the object’s `licenseType` field. */
  licenseType?: Maybe<StringFilter>;
  /** Filter by the object’s `licenseSupplier` field. */
  licenseSupplier?: Maybe<StringFilter>;
  /** Filter by the object’s `validOrganicContent` field. */
  validOrganicContent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `institutionId` field. */
  institutionId?: Maybe<GitlabNamespaceIdFilter>;
  /** Filter by the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `fileName` field. */
  fileName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `categoryLabel` field. */
  categoryLabel?: Maybe<StringListFilter>;
  /** Filter by the object’s `categoryUrl` field. */
  categoryUrl?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingProfileMedigyFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingProfileMedigyFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingProfileMedigyFilter>;
};

export type OfferingProfileSearch = {
  __typename?: 'OfferingProfileSearch';
  offeringId: Scalars['GitlabProjectId'];
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
  searchBredcrumbs?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  offeringTitle?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingProfileSearch` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OfferingProfileSearchCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingProfileSearch` object types. All fields are combined with a logical ‘and.’ */
export type OfferingProfileSearchFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingProfileSearchFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingProfileSearchFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingProfileSearchFilter>;
};

/** A connection to a list of `OfferingProfileSearch` values. */
export type OfferingProfileSearchesConnection = {
  __typename?: 'OfferingProfileSearchesConnection';
  /** A list of `OfferingProfileSearch` objects. */
  nodes: Array<Maybe<OfferingProfileSearch>>;
  /** A list of edges which contains the `OfferingProfileSearch` and cursor to aid in pagination. */
  edges: Array<OfferingProfileSearchesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingProfileSearch` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingProfileSearch` edge in the connection. */
export type OfferingProfileSearchesEdge = {
  __typename?: 'OfferingProfileSearchesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingProfileSearch` at the end of the edge. */
  node?: Maybe<OfferingProfileSearch>;
};

/** Methods to use when ordering `OfferingProfileSearch`. */
export enum OfferingProfileSearchesOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  SearchBredcrumbsAsc = 'SEARCH_BREDCRUMBS_ASC',
  SearchBredcrumbsDesc = 'SEARCH_BREDCRUMBS_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC'
}

/** A connection to a list of `OfferingProfile` values. */
export type OfferingProfilesConnection = {
  __typename?: 'OfferingProfilesConnection';
  /** A list of `OfferingProfile` objects. */
  nodes: Array<Maybe<OfferingProfile>>;
  /** A list of edges which contains the `OfferingProfile` and cursor to aid in pagination. */
  edges: Array<OfferingProfilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingProfile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingProfile` edge in the connection. */
export type OfferingProfilesEdge = {
  __typename?: 'OfferingProfilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingProfile` at the end of the edge. */
  node?: Maybe<OfferingProfile>;
};

/** Methods to use when ordering `OfferingProfile`. */
export enum OfferingProfilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  ArchetypeAsc = 'ARCHETYPE_ASC',
  ArchetypeDesc = 'ARCHETYPE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UuidAsc = 'UUID_ASC',
  UuidDesc = 'UUID_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingUpdatedAsc = 'OFFERING_UPDATED_ASC',
  OfferingUpdatedDesc = 'OFFERING_UPDATED_DESC',
  OfferingLastActivityAtAsc = 'OFFERING_LAST_ACTIVITY_AT_ASC',
  OfferingLastActivityAtDesc = 'OFFERING_LAST_ACTIVITY_AT_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  ClaimStatusAsc = 'CLAIM_STATUS_ASC',
  ClaimStatusDesc = 'CLAIM_STATUS_DESC',
  CompanySlugAsc = 'COMPANY_SLUG_ASC',
  CompanySlugDesc = 'COMPANY_SLUG_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  PublishDateAsc = 'PUBLISH_DATE_ASC',
  PublishDateDesc = 'PUBLISH_DATE_DESC',
  FacebookUrlAsc = 'FACEBOOK_URL_ASC',
  FacebookUrlDesc = 'FACEBOOK_URL_DESC',
  TwitterUrlAsc = 'TWITTER_URL_ASC',
  TwitterUrlDesc = 'TWITTER_URL_DESC',
  LinkedinUrlAsc = 'LINKEDIN_URL_ASC',
  LinkedinUrlDesc = 'LINKEDIN_URL_DESC',
  InstagramUrlAsc = 'INSTAGRAM_URL_ASC',
  InstagramUrlDesc = 'INSTAGRAM_URL_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  InstLinkAsc = 'INST_LINK_ASC',
  InstLinkDesc = 'INST_LINK_DESC',
  GithubUrlAsc = 'GITHUB_URL_ASC',
  GithubUrlDesc = 'GITHUB_URL_DESC',
  ForksCountAsc = 'FORKS_COUNT_ASC',
  ForksCountDesc = 'FORKS_COUNT_DESC',
  OpenIssuesCountAsc = 'OPEN_ISSUES_COUNT_ASC',
  OpenIssuesCountDesc = 'OPEN_ISSUES_COUNT_DESC',
  WatchersCountAsc = 'WATCHERS_COUNT_ASC',
  WatchersCountDesc = 'WATCHERS_COUNT_DESC',
  StarsCountAsc = 'STARS_COUNT_ASC',
  StarsCountDesc = 'STARS_COUNT_DESC',
  LicenseTypeAsc = 'LICENSE_TYPE_ASC',
  LicenseTypeDesc = 'LICENSE_TYPE_DESC',
  LicenseSupplierAsc = 'LICENSE_SUPPLIER_ASC',
  LicenseSupplierDesc = 'LICENSE_SUPPLIER_DESC',
  ValidOrganicContentAsc = 'VALID_ORGANIC_CONTENT_ASC',
  ValidOrganicContentDesc = 'VALID_ORGANIC_CONTENT_DESC',
  CarouselAsc = 'CAROUSEL_ASC',
  CarouselDesc = 'CAROUSEL_DESC',
  ResourcesAsc = 'RESOURCES_ASC',
  ResourcesDesc = 'RESOURCES_DESC',
  InstitutionIdAsc = 'INSTITUTION_ID_ASC',
  InstitutionIdDesc = 'INSTITUTION_ID_DESC',
  InstitutionTitleAsc = 'INSTITUTION_TITLE_ASC',
  InstitutionTitleDesc = 'INSTITUTION_TITLE_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC',
  BreadcrumbsAsc = 'BREADCRUMBS_ASC',
  BreadcrumbsDesc = 'BREADCRUMBS_DESC',
  FileNameAsc = 'FILE_NAME_ASC',
  FileNameDesc = 'FILE_NAME_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  CategoryLabelAsc = 'CATEGORY_LABEL_ASC',
  CategoryLabelDesc = 'CATEGORY_LABEL_DESC'
}

export type OfferingSearch = {
  __typename?: 'OfferingSearch';
  offeringId: Scalars['GitlabProjectId'];
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
  searchBredcrumbs?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  offeringTitle?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingSearch` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OfferingSearchCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingSearch` object types. All fields are combined with a logical ‘and.’ */
export type OfferingSearchFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `searchBredcrumbs` field. */
  searchBredcrumbs?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingSearchFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingSearchFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingSearchFilter>;
};

/** A connection to a list of `OfferingSearch` values. */
export type OfferingSearchesConnection = {
  __typename?: 'OfferingSearchesConnection';
  /** A list of `OfferingSearch` objects. */
  nodes: Array<Maybe<OfferingSearch>>;
  /** A list of edges which contains the `OfferingSearch` and cursor to aid in pagination. */
  edges: Array<OfferingSearchesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingSearch` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingSearch` edge in the connection. */
export type OfferingSearchesEdge = {
  __typename?: 'OfferingSearchesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingSearch` at the end of the edge. */
  node?: Maybe<OfferingSearch>;
};

/** Methods to use when ordering `OfferingSearch`. */
export enum OfferingSearchesOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  SearchBredcrumbsAsc = 'SEARCH_BREDCRUMBS_ASC',
  SearchBredcrumbsDesc = 'SEARCH_BREDCRUMBS_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC'
}

/** An input for mutations affecting `OfferingTargetCustomersInputRecord` */
export type OfferingTargetCustomersInputRecordInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type OfferingTopicUrl = {
  __typename?: 'OfferingTopicUrl';
  id: Scalars['GitlabProjectId'];
  categoryUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**
 * A condition to be used against `OfferingTopicUrl` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OfferingTopicUrlCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `categoryUrl` field. */
  categoryUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `OfferingTopicUrl` object types. All fields are combined with a logical ‘and.’ */
export type OfferingTopicUrlFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `categoryUrl` field. */
  categoryUrl?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingTopicUrlFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingTopicUrlFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingTopicUrlFilter>;
};

/** A connection to a list of `OfferingTopicUrl` values. */
export type OfferingTopicUrlsConnection = {
  __typename?: 'OfferingTopicUrlsConnection';
  /** A list of `OfferingTopicUrl` objects. */
  nodes: Array<Maybe<OfferingTopicUrl>>;
  /** A list of edges which contains the `OfferingTopicUrl` and cursor to aid in pagination. */
  edges: Array<OfferingTopicUrlsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingTopicUrl` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingTopicUrl` edge in the connection. */
export type OfferingTopicUrlsEdge = {
  __typename?: 'OfferingTopicUrlsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingTopicUrl` at the end of the edge. */
  node?: Maybe<OfferingTopicUrl>;
};

/** Methods to use when ordering `OfferingTopicUrl`. */
export enum OfferingTopicUrlsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CategoryUrlAsc = 'CATEGORY_URL_ASC',
  CategoryUrlDesc = 'CATEGORY_URL_DESC'
}

export enum OfferingType {
  Product = 'PRODUCT',
  Solution = 'SOLUTION',
  Service = 'SERVICE'
}

/** All input for the `offeringUrlStatus` mutation. */
export type OfferingUrlStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  monthRange?: Maybe<Scalars['String']>;
};

/** The output of our `offeringUrlStatus` mutation. */
export type OfferingUrlStatusPayload = {
  __typename?: 'OfferingUrlStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type OfferingVendorNameMismatch = {
  __typename?: 'OfferingVendorNameMismatch';
  id: Scalars['GitlabProjectId'];
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  companyName?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  metaTitle?: Maybe<Scalars['String']>;
  metaDescription?: Maybe<Scalars['String']>;
  institutionTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  featuredContent?: Maybe<Scalars['String']>;
  logoContent?: Maybe<Scalars['String']>;
  offeringPath?: Maybe<Scalars['String']>;
  institutionPath?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  offeringType?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  approvedDate?: Maybe<Scalars['Datetime']>;
  offeringApprovedBy?: Maybe<Scalars['String']>;
  offeringCuratedBy?: Maybe<Scalars['String']>;
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
  offeringCreatedBy?: Maybe<Scalars['Int']>;
  offeringCreatedEmail?: Maybe<Scalars['String']>;
  vendorName?: Maybe<Scalars['String']>;
  publishDate?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OfferingVendorNameMismatch` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type OfferingVendorNameMismatchCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `metaTitle` field. */
  metaTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `metaDescription` field. */
  metaDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredContent` field. */
  featuredContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoContent` field. */
  logoContent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringPath` field. */
  offeringPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionPath` field. */
  institutionPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permalink` field. */
  permalink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringType` field. */
  offeringType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `approvedDate` field. */
  approvedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `offeringCreatedEmail` field. */
  offeringCreatedEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `publishDate` field. */
  publishDate?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OfferingVendorNameMismatch` object types. All fields are combined with a logical ‘and.’ */
export type OfferingVendorNameMismatchFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringLastActivityAt` field. */
  offeringLastActivityAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `metaTitle` field. */
  metaTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `metaDescription` field. */
  metaDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionTitle` field. */
  institutionTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringPath` field. */
  offeringPath?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionPath` field. */
  institutionPath?: Maybe<StringFilter>;
  /** Filter by the object’s `permalink` field. */
  permalink?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringType` field. */
  offeringType?: Maybe<StringFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `websiteUrl` field. */
  websiteUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `approvedDate` field. */
  approvedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringApprovedBy` field. */
  offeringApprovedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCuratedBy` field. */
  offeringCuratedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCuratedOn` field. */
  offeringCuratedOn?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `offeringCreatedBy` field. */
  offeringCreatedBy?: Maybe<IntFilter>;
  /** Filter by the object’s `offeringCreatedEmail` field. */
  offeringCreatedEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Filter by the object’s `publishDate` field. */
  publishDate?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OfferingVendorNameMismatchFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OfferingVendorNameMismatchFilter>>;
  /** Negates the expression. */
  not?: Maybe<OfferingVendorNameMismatchFilter>;
};

/** A connection to a list of `OfferingVendorNameMismatch` values. */
export type OfferingVendorNameMismatchesConnection = {
  __typename?: 'OfferingVendorNameMismatchesConnection';
  /** A list of `OfferingVendorNameMismatch` objects. */
  nodes: Array<Maybe<OfferingVendorNameMismatch>>;
  /** A list of edges which contains the `OfferingVendorNameMismatch` and cursor to aid in pagination. */
  edges: Array<OfferingVendorNameMismatchesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OfferingVendorNameMismatch` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OfferingVendorNameMismatch` edge in the connection. */
export type OfferingVendorNameMismatchesEdge = {
  __typename?: 'OfferingVendorNameMismatchesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OfferingVendorNameMismatch` at the end of the edge. */
  node?: Maybe<OfferingVendorNameMismatch>;
};

/** Methods to use when ordering `OfferingVendorNameMismatch`. */
export enum OfferingVendorNameMismatchesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  OfferingLastActivityAtAsc = 'OFFERING_LAST_ACTIVITY_AT_ASC',
  OfferingLastActivityAtDesc = 'OFFERING_LAST_ACTIVITY_AT_DESC',
  MetaTitleAsc = 'META_TITLE_ASC',
  MetaTitleDesc = 'META_TITLE_DESC',
  MetaDescriptionAsc = 'META_DESCRIPTION_ASC',
  MetaDescriptionDesc = 'META_DESCRIPTION_DESC',
  InstitutionTitleAsc = 'INSTITUTION_TITLE_ASC',
  InstitutionTitleDesc = 'INSTITUTION_TITLE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  FeaturedContentAsc = 'FEATURED_CONTENT_ASC',
  FeaturedContentDesc = 'FEATURED_CONTENT_DESC',
  LogoContentAsc = 'LOGO_CONTENT_ASC',
  LogoContentDesc = 'LOGO_CONTENT_DESC',
  OfferingPathAsc = 'OFFERING_PATH_ASC',
  OfferingPathDesc = 'OFFERING_PATH_DESC',
  InstitutionPathAsc = 'INSTITUTION_PATH_ASC',
  InstitutionPathDesc = 'INSTITUTION_PATH_DESC',
  PermalinkAsc = 'PERMALINK_ASC',
  PermalinkDesc = 'PERMALINK_DESC',
  OfferingTypeAsc = 'OFFERING_TYPE_ASC',
  OfferingTypeDesc = 'OFFERING_TYPE_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  WebsiteUrlAsc = 'WEBSITE_URL_ASC',
  WebsiteUrlDesc = 'WEBSITE_URL_DESC',
  ApprovedDateAsc = 'APPROVED_DATE_ASC',
  ApprovedDateDesc = 'APPROVED_DATE_DESC',
  OfferingApprovedByAsc = 'OFFERING_APPROVED_BY_ASC',
  OfferingApprovedByDesc = 'OFFERING_APPROVED_BY_DESC',
  OfferingCuratedByAsc = 'OFFERING_CURATED_BY_ASC',
  OfferingCuratedByDesc = 'OFFERING_CURATED_BY_DESC',
  OfferingCuratedOnAsc = 'OFFERING_CURATED_ON_ASC',
  OfferingCuratedOnDesc = 'OFFERING_CURATED_ON_DESC',
  OfferingCreatedByAsc = 'OFFERING_CREATED_BY_ASC',
  OfferingCreatedByDesc = 'OFFERING_CREATED_BY_DESC',
  OfferingCreatedEmailAsc = 'OFFERING_CREATED_EMAIL_ASC',
  OfferingCreatedEmailDesc = 'OFFERING_CREATED_EMAIL_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC',
  PublishDateAsc = 'PUBLISH_DATE_ASC',
  PublishDateDesc = 'PUBLISH_DATE_DESC'
}

/** All input for the `openprojectAssetHttpRequest` mutation. */
export type OpenprojectAssetHttpRequestInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  prov?: Maybe<OpenprojectProvenanceInput>;
  attachmentId?: Maybe<Scalars['Int']>;
};

/** The output of our `openprojectAssetHttpRequest` mutation. */
export type OpenprojectAssetHttpRequestPayload = {
  __typename?: 'OpenprojectAssetHttpRequestPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  httpRequest?: Maybe<HttpRequest>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** An input for mutations affecting `OpenprojectProvenance` */
export type OpenprojectProvenanceInput = {
  identity: Scalars['OpenprojectServerIdentity'];
  context: Scalars['ExecutionContext'];
  apiBaseUrl: Scalars['String'];
  secretAuthnToken: Scalars['String'];
  authnTokenCreatedAt: Scalars['Datetime'];
  authnTokenCreatedBy: Scalars['String'];
  authnTokenExpiresAt: Scalars['Datetime'];
  meta?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  createdBy?: Maybe<Scalars['String']>;
};


/** All input for the `optimizeImage` mutation. */
export type OptimizeImageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  provenance?: Maybe<Scalars['String']>;
  originalImage?: Maybe<Scalars['String']>;
  optimizeSize?: Maybe<Scalars['Int']>;
};

/** The output of our `optimizeImage` mutation. */
export type OptimizeImagePayload = {
  __typename?: 'OptimizeImagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageContent?: Maybe<ImageContent>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type OrganizationDetail = {
  __typename?: 'OrganizationDetail';
  id?: Maybe<Scalars['UUID']>;
  electronicDetails?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['UUID']>;
  organizationId?: Maybe<Scalars['UUID']>;
  organizationName?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OrganizationDetail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OrganizationDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationName` field. */
  organizationName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `street` field. */
  street?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OrganizationDetail` object types. All fields are combined with a logical ‘and.’ */
export type OrganizationDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationName` field. */
  organizationName?: Maybe<StringFilter>;
  /** Filter by the object’s `street` field. */
  street?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganizationDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganizationDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<OrganizationDetailFilter>;
};

/** A connection to a list of `OrganizationDetail` values. */
export type OrganizationDetailsConnection = {
  __typename?: 'OrganizationDetailsConnection';
  /** A list of `OrganizationDetail` objects. */
  nodes: Array<Maybe<OrganizationDetail>>;
  /** A list of edges which contains the `OrganizationDetail` and cursor to aid in pagination. */
  edges: Array<OrganizationDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganizationDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OrganizationDetail` edge in the connection. */
export type OrganizationDetailsEdge = {
  __typename?: 'OrganizationDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganizationDetail` at the end of the edge. */
  node?: Maybe<OrganizationDetail>;
};

/** Methods to use when ordering `OrganizationDetail`. */
export enum OrganizationDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  OrganizationNameAsc = 'ORGANIZATION_NAME_ASC',
  OrganizationNameDesc = 'ORGANIZATION_NAME_DESC',
  StreetAsc = 'STREET_ASC',
  StreetDesc = 'STREET_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC'
}

export type OrganizationGroupMasterV1 = {
  __typename?: 'OrganizationGroupMasterV1';
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `OrganizationGroupMasterV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type OrganizationGroupMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `OrganizationGroupMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type OrganizationGroupMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganizationGroupMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganizationGroupMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<OrganizationGroupMasterV1Filter>;
};

/** An input for mutations affecting `OrganizationGroupMasterV1` */
export type OrganizationGroupMasterV1Input = {
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `OrganizationGroupMasterV1` values. */
export type OrganizationGroupMasterV1sConnection = {
  __typename?: 'OrganizationGroupMasterV1sConnection';
  /** A list of `OrganizationGroupMasterV1` objects. */
  nodes: Array<Maybe<OrganizationGroupMasterV1>>;
  /** A list of edges which contains the `OrganizationGroupMasterV1` and cursor to aid in pagination. */
  edges: Array<OrganizationGroupMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganizationGroupMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OrganizationGroupMasterV1` edge in the connection. */
export type OrganizationGroupMasterV1sEdge = {
  __typename?: 'OrganizationGroupMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganizationGroupMasterV1` at the end of the edge. */
  node?: Maybe<OrganizationGroupMasterV1>;
};

/** Methods to use when ordering `OrganizationGroupMasterV1`. */
export enum OrganizationGroupMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

export type OrganizationMaster = {
  __typename?: 'OrganizationMaster';
  id?: Maybe<Scalars['UUID']>;
  organizationName?: Maybe<Scalars['String']>;
  organizationTypeId?: Maybe<Scalars['UUID']>;
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
  parentOrgId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `OrganizationMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OrganizationMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationName` field. */
  organizationName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationTypeId` field. */
  organizationTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zipcode` field. */
  zipcode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `parentOrgId` field. */
  parentOrgId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `OrganizationMaster` object types. All fields are combined with a logical ‘and.’ */
export type OrganizationMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationName` field. */
  organizationName?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationTypeId` field. */
  organizationTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `zipcode` field. */
  zipcode?: Maybe<StringFilter>;
  /** Filter by the object’s `parentOrgId` field. */
  parentOrgId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganizationMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganizationMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<OrganizationMasterFilter>;
};

export type OrganizationMasterV1 = {
  __typename?: 'OrganizationMasterV1';
  id?: Maybe<Scalars['UUID']>;
  organization?: Maybe<Scalars['String']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  organizationGroup?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `OrganizationMasterV1` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OrganizationMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organization` field. */
  organization?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroup` field. */
  organizationGroup?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `OrganizationMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type OrganizationMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `organization` field. */
  organization?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroup` field. */
  organizationGroup?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganizationMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganizationMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<OrganizationMasterV1Filter>;
};

/** A connection to a list of `OrganizationMasterV1` values. */
export type OrganizationMasterV1sConnection = {
  __typename?: 'OrganizationMasterV1sConnection';
  /** A list of `OrganizationMasterV1` objects. */
  nodes: Array<Maybe<OrganizationMasterV1>>;
  /** A list of edges which contains the `OrganizationMasterV1` and cursor to aid in pagination. */
  edges: Array<OrganizationMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganizationMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OrganizationMasterV1` edge in the connection. */
export type OrganizationMasterV1sEdge = {
  __typename?: 'OrganizationMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganizationMasterV1` at the end of the edge. */
  node?: Maybe<OrganizationMasterV1>;
};

/** Methods to use when ordering `OrganizationMasterV1`. */
export enum OrganizationMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OrganizationAsc = 'ORGANIZATION_ASC',
  OrganizationDesc = 'ORGANIZATION_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  OrganizationGroupAsc = 'ORGANIZATION_GROUP_ASC',
  OrganizationGroupDesc = 'ORGANIZATION_GROUP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

export type OrganizationMasterV2 = {
  __typename?: 'OrganizationMasterV2';
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  organizationTypeId?: Maybe<Scalars['UUID']>;
  parentOrgId?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `OrganizationMasterV2` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OrganizationMasterV2Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationTypeId` field. */
  organizationTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `parentOrgId` field. */
  parentOrgId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `OrganizationMasterV2` object types. All fields are combined with a logical ‘and.’ */
export type OrganizationMasterV2Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationTypeId` field. */
  organizationTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `parentOrgId` field. */
  parentOrgId?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganizationMasterV2Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganizationMasterV2Filter>>;
  /** Negates the expression. */
  not?: Maybe<OrganizationMasterV2Filter>;
};

/** A connection to a list of `OrganizationMasterV2` values. */
export type OrganizationMasterV2sConnection = {
  __typename?: 'OrganizationMasterV2sConnection';
  /** A list of `OrganizationMasterV2` objects. */
  nodes: Array<Maybe<OrganizationMasterV2>>;
  /** A list of edges which contains the `OrganizationMasterV2` and cursor to aid in pagination. */
  edges: Array<OrganizationMasterV2sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganizationMasterV2` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OrganizationMasterV2` edge in the connection. */
export type OrganizationMasterV2sEdge = {
  __typename?: 'OrganizationMasterV2sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganizationMasterV2` at the end of the edge. */
  node?: Maybe<OrganizationMasterV2>;
};

/** Methods to use when ordering `OrganizationMasterV2`. */
export enum OrganizationMasterV2sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  OrganizationTypeIdAsc = 'ORGANIZATION_TYPE_ID_ASC',
  OrganizationTypeIdDesc = 'ORGANIZATION_TYPE_ID_DESC',
  ParentOrgIdAsc = 'PARENT_ORG_ID_ASC',
  ParentOrgIdDesc = 'PARENT_ORG_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

/** A connection to a list of `OrganizationMaster` values. */
export type OrganizationMastersConnection = {
  __typename?: 'OrganizationMastersConnection';
  /** A list of `OrganizationMaster` objects. */
  nodes: Array<Maybe<OrganizationMaster>>;
  /** A list of edges which contains the `OrganizationMaster` and cursor to aid in pagination. */
  edges: Array<OrganizationMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganizationMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OrganizationMaster` edge in the connection. */
export type OrganizationMastersEdge = {
  __typename?: 'OrganizationMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganizationMaster` at the end of the edge. */
  node?: Maybe<OrganizationMaster>;
};

/** Methods to use when ordering `OrganizationMaster`. */
export enum OrganizationMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OrganizationNameAsc = 'ORGANIZATION_NAME_ASC',
  OrganizationNameDesc = 'ORGANIZATION_NAME_DESC',
  OrganizationTypeIdAsc = 'ORGANIZATION_TYPE_ID_ASC',
  OrganizationTypeIdDesc = 'ORGANIZATION_TYPE_ID_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ZipcodeAsc = 'ZIPCODE_ASC',
  ZipcodeDesc = 'ZIPCODE_DESC',
  ParentOrgIdAsc = 'PARENT_ORG_ID_ASC',
  ParentOrgIdDesc = 'PARENT_ORG_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

export type OtResponse = {
  __typename?: 'OtResponse';
  status?: Maybe<Scalars['String']>;
  statusmessage?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

/** All input for the `otTrackCustomData` mutation. */
export type OtTrackCustomDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  activityName?: Maybe<Scalars['String']>;
  attrs?: Maybe<Scalars['JSON']>;
  context?: Maybe<Scalars['JSON']>;
  otJsonContent?: Maybe<Scalars['JSON']>;
};

/** The output of our `otTrackCustomData` mutation. */
export type OtTrackCustomDataPayload = {
  __typename?: 'OtTrackCustomDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  otResponse?: Maybe<OtResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `otTrackCustomDataUptrace` mutation. */
export type OtTrackCustomDataUptraceInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  activityName?: Maybe<Scalars['String']>;
  attrs?: Maybe<Scalars['JSON']>;
  context?: Maybe<Scalars['JSON']>;
  otJsonContent?: Maybe<Scalars['JSON']>;
};

/** The output of our `otTrackCustomDataUptrace` mutation. */
export type OtTrackCustomDataUptracePayload = {
  __typename?: 'OtTrackCustomDataUptracePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  otResponse?: Maybe<OtResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type OwnerClaimedView = {
  __typename?: 'OwnerClaimedView';
  id?: Maybe<Scalars['BigInt']>;
  offeringId: Scalars['GitlabProjectId'];
  directory?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `OwnerClaimedView` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OwnerClaimedViewCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `directory` field. */
  directory?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ref` field. */
  ref?: Maybe<Scalars['String']>;
};

/** A filter to be used against `OwnerClaimedView` object types. All fields are combined with a logical ‘and.’ */
export type OwnerClaimedViewFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<BigIntFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `directory` field. */
  directory?: Maybe<StringFilter>;
  /** Filter by the object’s `ref` field. */
  ref?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OwnerClaimedViewFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OwnerClaimedViewFilter>>;
  /** Negates the expression. */
  not?: Maybe<OwnerClaimedViewFilter>;
};

/** A connection to a list of `OwnerClaimedView` values. */
export type OwnerClaimedViewsConnection = {
  __typename?: 'OwnerClaimedViewsConnection';
  /** A list of `OwnerClaimedView` objects. */
  nodes: Array<Maybe<OwnerClaimedView>>;
  /** A list of edges which contains the `OwnerClaimedView` and cursor to aid in pagination. */
  edges: Array<OwnerClaimedViewsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OwnerClaimedView` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `OwnerClaimedView` edge in the connection. */
export type OwnerClaimedViewsEdge = {
  __typename?: 'OwnerClaimedViewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OwnerClaimedView` at the end of the edge. */
  node?: Maybe<OwnerClaimedView>;
};

/** Methods to use when ordering `OwnerClaimedView`. */
export enum OwnerClaimedViewsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  DirectoryAsc = 'DIRECTORY_ASC',
  DirectoryDesc = 'DIRECTORY_DESC',
  RefAsc = 'REF_ASC',
  RefDesc = 'REF_DESC'
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
};

export type PatientDemographic = {
  __typename?: 'PatientDemographic';
  id?: Maybe<Scalars['UUID']>;
  suffix?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  prefferedPronouns?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  address1?: Maybe<Scalars['String']>;
  address2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  personType?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
  recordStatus?: Maybe<Scalars['String']>;
  registrationStatus?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  inviteDetails?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  status?: Maybe<Scalars['String']>;
  verifiedAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `PatientDemographic` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PatientDemographicCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `address1` field. */
  address1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address2` field. */
  address2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `zip` field. */
  zip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `PatientDemographic` object types. All fields are combined with a logical ‘and.’ */
export type PatientDemographicFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguage` field. */
  preferredLanguage?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `prefferedPronouns` field. */
  prefferedPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `address1` field. */
  address1?: Maybe<StringFilter>;
  /** Filter by the object’s `address2` field. */
  address2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `zip` field. */
  zip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationStatus` field. */
  registrationStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteDetails` field. */
  inviteDetails?: Maybe<JsonFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientDemographicFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientDemographicFilter>>;
  /** Negates the expression. */
  not?: Maybe<PatientDemographicFilter>;
};

/** A connection to a list of `PatientDemographic` values. */
export type PatientDemographicsConnection = {
  __typename?: 'PatientDemographicsConnection';
  /** A list of `PatientDemographic` objects. */
  nodes: Array<Maybe<PatientDemographic>>;
  /** A list of edges which contains the `PatientDemographic` and cursor to aid in pagination. */
  edges: Array<PatientDemographicsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientDemographic` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientDemographic` edge in the connection. */
export type PatientDemographicsEdge = {
  __typename?: 'PatientDemographicsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientDemographic` at the end of the edge. */
  node?: Maybe<PatientDemographic>;
};

/** Methods to use when ordering `PatientDemographic`. */
export enum PatientDemographicsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageAsc = 'PREFERRED_LANGUAGE_ASC',
  PreferredLanguageDesc = 'PREFERRED_LANGUAGE_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PrefferedPronounsAsc = 'PREFFERED_PRONOUNS_ASC',
  PrefferedPronounsDesc = 'PREFFERED_PRONOUNS_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  Address1Asc = 'ADDRESS1_ASC',
  Address1Desc = 'ADDRESS1_DESC',
  Address2Asc = 'ADDRESS2_ASC',
  Address2Desc = 'ADDRESS2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ZipAsc = 'ZIP_ASC',
  ZipDesc = 'ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  RegistrationStatusAsc = 'REGISTRATION_STATUS_ASC',
  RegistrationStatusDesc = 'REGISTRATION_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  InviteDetailsAsc = 'INVITE_DETAILS_ASC',
  InviteDetailsDesc = 'INVITE_DETAILS_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  VerifiedAtAsc = 'VERIFIED_AT_ASC',
  VerifiedAtDesc = 'VERIFIED_AT_DESC'
}

export type PatientDemographicsV1 = {
  __typename?: 'PatientDemographicsV1';
  id?: Maybe<Scalars['UUID']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PatientDemographicsV1` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type PatientDemographicsV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PatientDemographicsV1` object types. All fields are combined with a logical ‘and.’ */
export type PatientDemographicsV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientDemographicsV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientDemographicsV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<PatientDemographicsV1Filter>;
};

/** A connection to a list of `PatientDemographicsV1` values. */
export type PatientDemographicsV1sConnection = {
  __typename?: 'PatientDemographicsV1sConnection';
  /** A list of `PatientDemographicsV1` objects. */
  nodes: Array<Maybe<PatientDemographicsV1>>;
  /** A list of edges which contains the `PatientDemographicsV1` and cursor to aid in pagination. */
  edges: Array<PatientDemographicsV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientDemographicsV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientDemographicsV1` edge in the connection. */
export type PatientDemographicsV1sEdge = {
  __typename?: 'PatientDemographicsV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientDemographicsV1` at the end of the edge. */
  node?: Maybe<PatientDemographicsV1>;
};

/** Methods to use when ordering `PatientDemographicsV1`. */
export enum PatientDemographicsV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC'
}

export type PatientDescription = {
  __typename?: 'PatientDescription';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PatientDescription` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PatientDescriptionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PatientDescription` object types. All fields are combined with a logical ‘and.’ */
export type PatientDescriptionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<IntFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<IntFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<IntFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientDescriptionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientDescriptionFilter>>;
  /** Negates the expression. */
  not?: Maybe<PatientDescriptionFilter>;
};

/** A connection to a list of `PatientDescription` values. */
export type PatientDescriptionsConnection = {
  __typename?: 'PatientDescriptionsConnection';
  /** A list of `PatientDescription` objects. */
  nodes: Array<Maybe<PatientDescription>>;
  /** A list of edges which contains the `PatientDescription` and cursor to aid in pagination. */
  edges: Array<PatientDescriptionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientDescription` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientDescription` edge in the connection. */
export type PatientDescriptionsEdge = {
  __typename?: 'PatientDescriptionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientDescription` at the end of the edge. */
  node?: Maybe<PatientDescription>;
};

/** Methods to use when ordering `PatientDescription`. */
export enum PatientDescriptionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC'
}

/** All input for the `patientDetails` mutation. */
export type PatientDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientid?: Maybe<Scalars['UUID']>;
};

/** The output of our `patientDetails` mutation. */
export type PatientDetailsPayload = {
  __typename?: 'PatientDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<PatientDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `patientDetails` mutation. */
export type PatientDetailsRecord = {
  __typename?: 'PatientDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  personFname?: Maybe<Scalars['String']>;
  personMname?: Maybe<Scalars['String']>;
  personLname?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressCity?: Maybe<Scalars['String']>;
  addressState?: Maybe<Scalars['String']>;
  addressCountry?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  partyUuid?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** All input for the `patientDetailsV1` mutation. */
export type PatientDetailsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientid?: Maybe<Scalars['UUID']>;
};

/** The output of our `patientDetailsV1` mutation. */
export type PatientDetailsV1Payload = {
  __typename?: 'PatientDetailsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<PatientDetailsV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `patientDetailsV1` mutation. */
export type PatientDetailsV1Record = {
  __typename?: 'PatientDetailsV1Record';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type PatientExternalDocumentList = {
  __typename?: 'PatientExternalDocumentList';
  id?: Maybe<Scalars['BigInt']>;
  partyId?: Maybe<Scalars['UUID']>;
  extSystemId?: Maybe<Scalars['UUID']>;
  partnerSysRequestRefId?: Maybe<Scalars['String']>;
  patientResourceId?: Maybe<Scalars['String']>;
  documentUrl?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PatientExternalDocumentList` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type PatientExternalDocumentListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['BigInt']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `extSystemId` field. */
  extSystemId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partnerSysRequestRefId` field. */
  partnerSysRequestRefId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientResourceId` field. */
  patientResourceId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `documentUrl` field. */
  documentUrl?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PatientExternalDocumentList` object types. All fields are combined with a logical ‘and.’ */
export type PatientExternalDocumentListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<BigIntFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `extSystemId` field. */
  extSystemId?: Maybe<UuidFilter>;
  /** Filter by the object’s `partnerSysRequestRefId` field. */
  partnerSysRequestRefId?: Maybe<StringFilter>;
  /** Filter by the object’s `patientResourceId` field. */
  patientResourceId?: Maybe<StringFilter>;
  /** Filter by the object’s `documentUrl` field. */
  documentUrl?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientExternalDocumentListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientExternalDocumentListFilter>>;
  /** Negates the expression. */
  not?: Maybe<PatientExternalDocumentListFilter>;
};

/** A connection to a list of `PatientExternalDocumentList` values. */
export type PatientExternalDocumentListsConnection = {
  __typename?: 'PatientExternalDocumentListsConnection';
  /** A list of `PatientExternalDocumentList` objects. */
  nodes: Array<Maybe<PatientExternalDocumentList>>;
  /** A list of edges which contains the `PatientExternalDocumentList` and cursor to aid in pagination. */
  edges: Array<PatientExternalDocumentListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientExternalDocumentList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientExternalDocumentList` edge in the connection. */
export type PatientExternalDocumentListsEdge = {
  __typename?: 'PatientExternalDocumentListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientExternalDocumentList` at the end of the edge. */
  node?: Maybe<PatientExternalDocumentList>;
};

/** Methods to use when ordering `PatientExternalDocumentList`. */
export enum PatientExternalDocumentListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  ExtSystemIdAsc = 'EXT_SYSTEM_ID_ASC',
  ExtSystemIdDesc = 'EXT_SYSTEM_ID_DESC',
  PartnerSysRequestRefIdAsc = 'PARTNER_SYS_REQUEST_REF_ID_ASC',
  PartnerSysRequestRefIdDesc = 'PARTNER_SYS_REQUEST_REF_ID_DESC',
  PatientResourceIdAsc = 'PATIENT_RESOURCE_ID_ASC',
  PatientResourceIdDesc = 'PATIENT_RESOURCE_ID_DESC',
  DocumentUrlAsc = 'DOCUMENT_URL_ASC',
  DocumentUrlDesc = 'DOCUMENT_URL_DESC'
}

export type PatientList = {
  __typename?: 'PatientList';
  personId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `PatientList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type PatientListCondition = {
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `PatientList` object types. All fields are combined with a logical ‘and.’ */
export type PatientListFilter = {
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientListFilter>>;
  /** Negates the expression. */
  not?: Maybe<PatientListFilter>;
};

/** A connection to a list of `PatientList` values. */
export type PatientListsConnection = {
  __typename?: 'PatientListsConnection';
  /** A list of `PatientList` objects. */
  nodes: Array<Maybe<PatientList>>;
  /** A list of edges which contains the `PatientList` and cursor to aid in pagination. */
  edges: Array<PatientListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientList` edge in the connection. */
export type PatientListsEdge = {
  __typename?: 'PatientListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientList` at the end of the edge. */
  node?: Maybe<PatientList>;
};

/** Methods to use when ordering `PatientList`. */
export enum PatientListsOrderBy {
  Natural = 'NATURAL',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC'
}

export type PatientProfile = {
  __typename?: 'PatientProfile';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PatientProfile` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PatientProfileCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PatientProfile` object types. All fields are combined with a logical ‘and.’ */
export type PatientProfileFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<IntFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<IntFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<IntFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientProfileFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientProfileFilter>>;
  /** Negates the expression. */
  not?: Maybe<PatientProfileFilter>;
};

export type PatientProfileV1 = {
  __typename?: 'PatientProfileV1';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  previousSuffix?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  stateValue?: Maybe<Scalars['String']>;
  countryValue?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
};

/**
 * A condition to be used against `PatientProfileV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PatientProfileV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousLastName` field. */
  previousLastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateValue` field. */
  stateValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryValue` field. */
  countryValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
};

/** A filter to be used against `PatientProfileV1` object types. All fields are combined with a logical ‘and.’ */
export type PatientProfileV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `previousSuffix` field. */
  previousSuffix?: Maybe<StringFilter>;
  /** Filter by the object’s `previousFirstName` field. */
  previousFirstName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousMiddleName` field. */
  previousMiddleName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousLastName` field. */
  previousLastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `stateValue` field. */
  stateValue?: Maybe<StringFilter>;
  /** Filter by the object’s `countryValue` field. */
  countryValue?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<IntFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PatientProfileV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PatientProfileV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<PatientProfileV1Filter>;
};

/** A connection to a list of `PatientProfileV1` values. */
export type PatientProfileV1sConnection = {
  __typename?: 'PatientProfileV1sConnection';
  /** A list of `PatientProfileV1` objects. */
  nodes: Array<Maybe<PatientProfileV1>>;
  /** A list of edges which contains the `PatientProfileV1` and cursor to aid in pagination. */
  edges: Array<PatientProfileV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientProfileV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientProfileV1` edge in the connection. */
export type PatientProfileV1sEdge = {
  __typename?: 'PatientProfileV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientProfileV1` at the end of the edge. */
  node?: Maybe<PatientProfileV1>;
};

/** Methods to use when ordering `PatientProfileV1`. */
export enum PatientProfileV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  StateValueAsc = 'STATE_VALUE_ASC',
  StateValueDesc = 'STATE_VALUE_DESC',
  CountryValueAsc = 'COUNTRY_VALUE_ASC',
  CountryValueDesc = 'COUNTRY_VALUE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC'
}

/** A connection to a list of `PatientProfile` values. */
export type PatientProfilesConnection = {
  __typename?: 'PatientProfilesConnection';
  /** A list of `PatientProfile` objects. */
  nodes: Array<Maybe<PatientProfile>>;
  /** A list of edges which contains the `PatientProfile` and cursor to aid in pagination. */
  edges: Array<PatientProfilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PatientProfile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PatientProfile` edge in the connection. */
export type PatientProfilesEdge = {
  __typename?: 'PatientProfilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PatientProfile` at the end of the edge. */
  node?: Maybe<PatientProfile>;
};

/** Methods to use when ordering `PatientProfile`. */
export enum PatientProfilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  PreviousSuffixAsc = 'PREVIOUS_SUFFIX_ASC',
  PreviousSuffixDesc = 'PREVIOUS_SUFFIX_DESC',
  PreviousFirstNameAsc = 'PREVIOUS_FIRST_NAME_ASC',
  PreviousFirstNameDesc = 'PREVIOUS_FIRST_NAME_DESC',
  PreviousMiddleNameAsc = 'PREVIOUS_MIDDLE_NAME_ASC',
  PreviousMiddleNameDesc = 'PREVIOUS_MIDDLE_NAME_DESC',
  PreviousLastNameAsc = 'PREVIOUS_LAST_NAME_ASC',
  PreviousLastNameDesc = 'PREVIOUS_LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC'
}

/** This view is used to get ppa or patient or MRA id along with details. */
export type PersonDemographicsDetailsV1 = {
  __typename?: 'PersonDemographicsDetailsV1';
  id?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PersonDemographicsDetailsV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type PersonDemographicsDetailsV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PersonDemographicsDetailsV1` object types. All fields are combined with a logical ‘and.’ */
export type PersonDemographicsDetailsV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonDemographicsDetailsV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonDemographicsDetailsV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<PersonDemographicsDetailsV1Filter>;
};

/** A connection to a list of `PersonDemographicsDetailsV1` values. */
export type PersonDemographicsDetailsV1sConnection = {
  __typename?: 'PersonDemographicsDetailsV1sConnection';
  /** A list of `PersonDemographicsDetailsV1` objects. */
  nodes: Array<Maybe<PersonDemographicsDetailsV1>>;
  /** A list of edges which contains the `PersonDemographicsDetailsV1` and cursor to aid in pagination. */
  edges: Array<PersonDemographicsDetailsV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonDemographicsDetailsV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonDemographicsDetailsV1` edge in the connection. */
export type PersonDemographicsDetailsV1sEdge = {
  __typename?: 'PersonDemographicsDetailsV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonDemographicsDetailsV1` at the end of the edge. */
  node?: Maybe<PersonDemographicsDetailsV1>;
};

/** Methods to use when ordering `PersonDemographicsDetailsV1`. */
export enum PersonDemographicsDetailsV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC'
}

export type PersonDemographicsDetailsV2 = {
  __typename?: 'PersonDemographicsDetailsV2';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PersonDemographicsDetailsV2` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type PersonDemographicsDetailsV2Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PersonDemographicsDetailsV2` object types. All fields are combined with a logical ‘and.’ */
export type PersonDemographicsDetailsV2Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonDemographicsDetailsV2Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonDemographicsDetailsV2Filter>>;
  /** Negates the expression. */
  not?: Maybe<PersonDemographicsDetailsV2Filter>;
};

/** A connection to a list of `PersonDemographicsDetailsV2` values. */
export type PersonDemographicsDetailsV2sConnection = {
  __typename?: 'PersonDemographicsDetailsV2sConnection';
  /** A list of `PersonDemographicsDetailsV2` objects. */
  nodes: Array<Maybe<PersonDemographicsDetailsV2>>;
  /** A list of edges which contains the `PersonDemographicsDetailsV2` and cursor to aid in pagination. */
  edges: Array<PersonDemographicsDetailsV2sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonDemographicsDetailsV2` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonDemographicsDetailsV2` edge in the connection. */
export type PersonDemographicsDetailsV2sEdge = {
  __typename?: 'PersonDemographicsDetailsV2sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonDemographicsDetailsV2` at the end of the edge. */
  node?: Maybe<PersonDemographicsDetailsV2>;
};

/** Methods to use when ordering `PersonDemographicsDetailsV2`. */
export enum PersonDemographicsDetailsV2sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC'
}

/** An input for mutations affecting `PersonDemographicsRecordV1` */
export type PersonDemographicsRecordV1Input = {
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  suffix?: Maybe<Scalars['String']>;
  previousSuffix?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  gender?: Maybe<Scalars['Int']>;
  personType?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
};

export type PersonDetail = {
  __typename?: 'PersonDetail';
  personId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `PersonDetail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PersonDetailCondition = {
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `PersonDetail` object types. All fields are combined with a logical ‘and.’ */
export type PersonDetailFilter = {
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<PersonDetailFilter>;
};

/** A connection to a list of `PersonDetail` values. */
export type PersonDetailsConnection = {
  __typename?: 'PersonDetailsConnection';
  /** A list of `PersonDetail` objects. */
  nodes: Array<Maybe<PersonDetail>>;
  /** A list of edges which contains the `PersonDetail` and cursor to aid in pagination. */
  edges: Array<PersonDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonDetail` edge in the connection. */
export type PersonDetailsEdge = {
  __typename?: 'PersonDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonDetail` at the end of the edge. */
  node?: Maybe<PersonDetail>;
};

export type PersonDetailsEmail = {
  __typename?: 'PersonDetailsEmail';
  personId?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `PersonDetailsEmail` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PersonDetailsEmailCondition = {
  /** Checks for equality with the object’s `personId` field. */
  personId?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `PersonDetailsEmail` object types. All fields are combined with a logical ‘and.’ */
export type PersonDetailsEmailFilter = {
  /** Filter by the object’s `personId` field. */
  personId?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonDetailsEmailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonDetailsEmailFilter>>;
  /** Negates the expression. */
  not?: Maybe<PersonDetailsEmailFilter>;
};

/** A connection to a list of `PersonDetailsEmail` values. */
export type PersonDetailsEmailsConnection = {
  __typename?: 'PersonDetailsEmailsConnection';
  /** A list of `PersonDetailsEmail` objects. */
  nodes: Array<Maybe<PersonDetailsEmail>>;
  /** A list of edges which contains the `PersonDetailsEmail` and cursor to aid in pagination. */
  edges: Array<PersonDetailsEmailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonDetailsEmail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonDetailsEmail` edge in the connection. */
export type PersonDetailsEmailsEdge = {
  __typename?: 'PersonDetailsEmailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonDetailsEmail` at the end of the edge. */
  node?: Maybe<PersonDetailsEmail>;
};

/** Methods to use when ordering `PersonDetailsEmail`. */
export enum PersonDetailsEmailsOrderBy {
  Natural = 'NATURAL',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC'
}

/** Methods to use when ordering `PersonDetail`. */
export enum PersonDetailsOrderBy {
  Natural = 'NATURAL',
  PersonIdAsc = 'PERSON_ID_ASC',
  PersonIdDesc = 'PERSON_ID_DESC'
}

export type PersonProfile = {
  __typename?: 'PersonProfile';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  stateValue?: Maybe<Scalars['String']>;
  countryValue?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  personType?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronounsValue?: Maybe<Scalars['String']>;
  profilePicId?: Maybe<Scalars['UUID']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  emailVerifiedAt?: Maybe<Scalars['Datetime']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  directAddress?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  verifiedAt?: Maybe<Scalars['Datetime']>;
  stateCode?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PersonProfile` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PersonProfileCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `stateValue` field. */
  stateValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryValue` field. */
  countryValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `personType` field. */
  personType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronounsValue` field. */
  preferredPronounsValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `profilePicId` field. */
  profilePicId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `isEmailVerified` field. */
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `emailVerifiedAt` field. */
  emailVerifiedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `directAddress` field. */
  directAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `stateCode` field. */
  stateCode?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PersonProfile` object types. All fields are combined with a logical ‘and.’ */
export type PersonProfileFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `stateValue` field. */
  stateValue?: Maybe<StringFilter>;
  /** Filter by the object’s `countryValue` field. */
  countryValue?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<IntFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `personType` field. */
  personType?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronounsValue` field. */
  preferredPronounsValue?: Maybe<StringFilter>;
  /** Filter by the object’s `profilePicId` field. */
  profilePicId?: Maybe<UuidFilter>;
  /** Filter by the object’s `isEmailVerified` field. */
  isEmailVerified?: Maybe<BooleanFilter>;
  /** Filter by the object’s `emailVerifiedAt` field. */
  emailVerifiedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `directAddress` field. */
  directAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<StringFilter>;
  /** Filter by the object’s `verifiedAt` field. */
  verifiedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `stateCode` field. */
  stateCode?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonProfileFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonProfileFilter>>;
  /** Negates the expression. */
  not?: Maybe<PersonProfileFilter>;
};

/** A connection to a list of `PersonProfile` values. */
export type PersonProfilesConnection = {
  __typename?: 'PersonProfilesConnection';
  /** A list of `PersonProfile` objects. */
  nodes: Array<Maybe<PersonProfile>>;
  /** A list of edges which contains the `PersonProfile` and cursor to aid in pagination. */
  edges: Array<PersonProfilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonProfile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonProfile` edge in the connection. */
export type PersonProfilesEdge = {
  __typename?: 'PersonProfilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonProfile` at the end of the edge. */
  node?: Maybe<PersonProfile>;
};

/** Methods to use when ordering `PersonProfile`. */
export enum PersonProfilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  StateValueAsc = 'STATE_VALUE_ASC',
  StateValueDesc = 'STATE_VALUE_DESC',
  CountryValueAsc = 'COUNTRY_VALUE_ASC',
  CountryValueDesc = 'COUNTRY_VALUE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  PersonTypeAsc = 'PERSON_TYPE_ASC',
  PersonTypeDesc = 'PERSON_TYPE_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredPronounsValueAsc = 'PREFERRED_PRONOUNS_VALUE_ASC',
  PreferredPronounsValueDesc = 'PREFERRED_PRONOUNS_VALUE_DESC',
  ProfilePicIdAsc = 'PROFILE_PIC_ID_ASC',
  ProfilePicIdDesc = 'PROFILE_PIC_ID_DESC',
  IsEmailVerifiedAsc = 'IS_EMAIL_VERIFIED_ASC',
  IsEmailVerifiedDesc = 'IS_EMAIL_VERIFIED_DESC',
  EmailVerifiedAtAsc = 'EMAIL_VERIFIED_AT_ASC',
  EmailVerifiedAtDesc = 'EMAIL_VERIFIED_AT_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  DirectAddressAsc = 'DIRECT_ADDRESS_ASC',
  DirectAddressDesc = 'DIRECT_ADDRESS_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  VerifiedAtAsc = 'VERIFIED_AT_ASC',
  VerifiedAtDesc = 'VERIFIED_AT_DESC',
  StateCodeAsc = 'STATE_CODE_ASC',
  StateCodeDesc = 'STATE_CODE_DESC'
}

export type PersonStatus = {
  __typename?: 'PersonStatus';
  id?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  organizationId?: Maybe<Scalars['UUID']>;
  code?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PersonStatus` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PersonStatusCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PersonStatus` object types. All fields are combined with a logical ‘and.’ */
export type PersonStatusFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PersonStatusFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PersonStatusFilter>>;
  /** Negates the expression. */
  not?: Maybe<PersonStatusFilter>;
};

/** A connection to a list of `PersonStatus` values. */
export type PersonStatusesConnection = {
  __typename?: 'PersonStatusesConnection';
  /** A list of `PersonStatus` objects. */
  nodes: Array<Maybe<PersonStatus>>;
  /** A list of edges which contains the `PersonStatus` and cursor to aid in pagination. */
  edges: Array<PersonStatusesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PersonStatus` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PersonStatus` edge in the connection. */
export type PersonStatusesEdge = {
  __typename?: 'PersonStatusesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PersonStatus` at the end of the edge. */
  node?: Maybe<PersonStatus>;
};

/** Methods to use when ordering `PersonStatus`. */
export enum PersonStatusesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC'
}

export type PreferredLanguageMasterV1 = {
  __typename?: 'PreferredLanguageMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PreferredLanguageMasterV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type PreferredLanguageMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PreferredLanguageMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type PreferredLanguageMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PreferredLanguageMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PreferredLanguageMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<PreferredLanguageMasterV1Filter>;
};

/** An input for mutations affecting `PreferredLanguageMasterV1` */
export type PreferredLanguageMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `PreferredLanguageMasterV1` values. */
export type PreferredLanguageMasterV1sConnection = {
  __typename?: 'PreferredLanguageMasterV1sConnection';
  /** A list of `PreferredLanguageMasterV1` objects. */
  nodes: Array<Maybe<PreferredLanguageMasterV1>>;
  /** A list of edges which contains the `PreferredLanguageMasterV1` and cursor to aid in pagination. */
  edges: Array<PreferredLanguageMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PreferredLanguageMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PreferredLanguageMasterV1` edge in the connection. */
export type PreferredLanguageMasterV1sEdge = {
  __typename?: 'PreferredLanguageMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PreferredLanguageMasterV1` at the end of the edge. */
  node?: Maybe<PreferredLanguageMasterV1>;
};

/** Methods to use when ordering `PreferredLanguageMasterV1`. */
export enum PreferredLanguageMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** This view is used as master table for preferred_pronouns and used in dropdownlist in UI */
export type PreferredPronounsMaster = {
  __typename?: 'PreferredPronounsMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `PreferredPronounsMaster` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type PreferredPronounsMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PreferredPronounsMaster` object types. All fields are combined with a logical ‘and.’ */
export type PreferredPronounsMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PreferredPronounsMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PreferredPronounsMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<PreferredPronounsMasterFilter>;
};

/** An input for mutations affecting `PreferredPronounsMaster` */
export type PreferredPronounsMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `PreferredPronounsMaster` values. */
export type PreferredPronounsMastersConnection = {
  __typename?: 'PreferredPronounsMastersConnection';
  /** A list of `PreferredPronounsMaster` objects. */
  nodes: Array<Maybe<PreferredPronounsMaster>>;
  /** A list of edges which contains the `PreferredPronounsMaster` and cursor to aid in pagination. */
  edges: Array<PreferredPronounsMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PreferredPronounsMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PreferredPronounsMaster` edge in the connection. */
export type PreferredPronounsMastersEdge = {
  __typename?: 'PreferredPronounsMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PreferredPronounsMaster` at the end of the edge. */
  node?: Maybe<PreferredPronounsMaster>;
};

/** Methods to use when ordering `PreferredPronounsMaster`. */
export enum PreferredPronounsMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `profleReverificationUpdate` mutation. */
export type ProfleReverificationUpdateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `profleReverificationUpdate` mutation. */
export type ProfleReverificationUpdatePayload = {
  __typename?: 'ProfleReverificationUpdatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** Reads and enables pagination through a set of `FileUpload`. */
  fileUploads?: Maybe<FileUploadsConnection>;
  /** Reads a set of `FileUpload`. */
  fileUploadsList?: Maybe<Array<FileUpload>>;
  /** Reads and enables pagination through a set of `AssignToMraMasterV1`. */
  assignToMraMasterV1s?: Maybe<AssignToMraMasterV1sConnection>;
  /** Reads a set of `AssignToMraMasterV1`. */
  assignToMraMasterV1sList?: Maybe<Array<AssignToMraMasterV1>>;
  /** Reads and enables pagination through a set of `Dependent`. */
  dependents?: Maybe<DependentsConnection>;
  /** Reads a set of `Dependent`. */
  dependentsList?: Maybe<Array<Dependent>>;
  /** Reads and enables pagination through a set of `DependentList`. */
  dependentLists?: Maybe<DependentListsConnection>;
  /** Reads a set of `DependentList`. */
  dependentListsList?: Maybe<Array<DependentList>>;
  /** Reads and enables pagination through a set of `EthnicityMasterV1`. */
  ethnicityMasterV1s?: Maybe<EthnicityMasterV1sConnection>;
  /** Reads a set of `EthnicityMasterV1`. */
  ethnicityMasterV1sList?: Maybe<Array<EthnicityMasterV1>>;
  /** Reads and enables pagination through a set of `GenderMasterV1`. */
  genderMasterV1s?: Maybe<GenderMasterV1sConnection>;
  /** Reads a set of `GenderMasterV1`. */
  genderMasterV1sList?: Maybe<Array<GenderMasterV1>>;
  /** Reads and enables pagination through a set of `LoggedPersonId`. */
  loggedPersonIds?: Maybe<LoggedPersonIdsConnection>;
  /** Reads a set of `LoggedPersonId`. */
  loggedPersonIdsList?: Maybe<Array<LoggedPersonId>>;
  /** Reads and enables pagination through a set of `MaritalStatusMasterV1`. */
  maritalStatusMasterV1s?: Maybe<MaritalStatusMasterV1sConnection>;
  /** Reads a set of `MaritalStatusMasterV1`. */
  maritalStatusMasterV1sList?: Maybe<Array<MaritalStatusMasterV1>>;
  /** Reads and enables pagination through a set of `OccupationIndustryMasterV1`. */
  occupationIndustryMasterV1s?: Maybe<OccupationIndustryMasterV1sConnection>;
  /** Reads a set of `OccupationIndustryMasterV1`. */
  occupationIndustryMasterV1sList?: Maybe<Array<OccupationIndustryMasterV1>>;
  /** Reads and enables pagination through a set of `OrganizationDetail`. */
  organizationDetails?: Maybe<OrganizationDetailsConnection>;
  /** Reads a set of `OrganizationDetail`. */
  organizationDetailsList?: Maybe<Array<OrganizationDetail>>;
  /** Reads and enables pagination through a set of `OrganizationGroupMasterV1`. */
  organizationGroupMasterV1s?: Maybe<OrganizationGroupMasterV1sConnection>;
  /** Reads a set of `OrganizationGroupMasterV1`. */
  organizationGroupMasterV1sList?: Maybe<Array<OrganizationGroupMasterV1>>;
  /** Reads and enables pagination through a set of `OrganizationMaster`. */
  organizationMasters?: Maybe<OrganizationMastersConnection>;
  /** Reads a set of `OrganizationMaster`. */
  organizationMastersList?: Maybe<Array<OrganizationMaster>>;
  /** Reads and enables pagination through a set of `OrganizationMasterV1`. */
  organizationMasterV1s?: Maybe<OrganizationMasterV1sConnection>;
  /** Reads a set of `OrganizationMasterV1`. */
  organizationMasterV1sList?: Maybe<Array<OrganizationMasterV1>>;
  /** Reads and enables pagination through a set of `OrganizationMasterV2`. */
  organizationMasterV2s?: Maybe<OrganizationMasterV2sConnection>;
  /** Reads a set of `OrganizationMasterV2`. */
  organizationMasterV2sList?: Maybe<Array<OrganizationMasterV2>>;
  /** Reads and enables pagination through a set of `PatientDemographic`. */
  patientDemographics?: Maybe<PatientDemographicsConnection>;
  /** Reads a set of `PatientDemographic`. */
  patientDemographicsList?: Maybe<Array<PatientDemographic>>;
  /** Reads and enables pagination through a set of `PatientDemographicsV1`. */
  patientDemographicsV1s?: Maybe<PatientDemographicsV1sConnection>;
  /** Reads a set of `PatientDemographicsV1`. */
  patientDemographicsV1sList?: Maybe<Array<PatientDemographicsV1>>;
  /** Reads and enables pagination through a set of `PatientDescription`. */
  patientDescriptions?: Maybe<PatientDescriptionsConnection>;
  /** Reads a set of `PatientDescription`. */
  patientDescriptionsList?: Maybe<Array<PatientDescription>>;
  /** Reads and enables pagination through a set of `PatientList`. */
  patientLists?: Maybe<PatientListsConnection>;
  /** Reads a set of `PatientList`. */
  patientListsList?: Maybe<Array<PatientList>>;
  /** Reads and enables pagination through a set of `PatientProfile`. */
  patientProfiles?: Maybe<PatientProfilesConnection>;
  /** Reads a set of `PatientProfile`. */
  patientProfilesList?: Maybe<Array<PatientProfile>>;
  /** Reads and enables pagination through a set of `PatientProfileV1`. */
  patientProfileV1s?: Maybe<PatientProfileV1sConnection>;
  /** Reads a set of `PatientProfileV1`. */
  patientProfileV1sList?: Maybe<Array<PatientProfileV1>>;
  /** Reads and enables pagination through a set of `PersonDemographicsDetailsV1`. */
  personDemographicsDetailsV1s?: Maybe<PersonDemographicsDetailsV1sConnection>;
  /** Reads a set of `PersonDemographicsDetailsV1`. */
  personDemographicsDetailsV1sList?: Maybe<Array<PersonDemographicsDetailsV1>>;
  /** Reads and enables pagination through a set of `PersonDemographicsDetailsV2`. */
  personDemographicsDetailsV2s?: Maybe<PersonDemographicsDetailsV2sConnection>;
  /** Reads a set of `PersonDemographicsDetailsV2`. */
  personDemographicsDetailsV2sList?: Maybe<Array<PersonDemographicsDetailsV2>>;
  /** Reads and enables pagination through a set of `PersonDetail`. */
  personDetails?: Maybe<PersonDetailsConnection>;
  /** Reads a set of `PersonDetail`. */
  personDetailsList?: Maybe<Array<PersonDetail>>;
  /** Reads and enables pagination through a set of `PersonDetailsEmail`. */
  personDetailsEmails?: Maybe<PersonDetailsEmailsConnection>;
  /** Reads a set of `PersonDetailsEmail`. */
  personDetailsEmailsList?: Maybe<Array<PersonDetailsEmail>>;
  /** Reads and enables pagination through a set of `PersonProfile`. */
  personProfiles?: Maybe<PersonProfilesConnection>;
  /** Reads a set of `PersonProfile`. */
  personProfilesList?: Maybe<Array<PersonProfile>>;
  /** Reads and enables pagination through a set of `PersonStatus`. */
  personStatuses?: Maybe<PersonStatusesConnection>;
  /** Reads a set of `PersonStatus`. */
  personStatusesList?: Maybe<Array<PersonStatus>>;
  /** Reads and enables pagination through a set of `PreferredLanguageMasterV1`. */
  preferredLanguageMasterV1s?: Maybe<PreferredLanguageMasterV1sConnection>;
  /** Reads a set of `PreferredLanguageMasterV1`. */
  preferredLanguageMasterV1sList?: Maybe<Array<PreferredLanguageMasterV1>>;
  /** Reads and enables pagination through a set of `RaceMasterV1`. */
  raceMasterV1s?: Maybe<RaceMasterV1sConnection>;
  /** Reads a set of `RaceMasterV1`. */
  raceMasterV1sList?: Maybe<Array<RaceMasterV1>>;
  /** Reads and enables pagination through a set of `RelatedPersonRelationshipMaster`. */
  relatedPersonRelationshipMasters?: Maybe<RelatedPersonRelationshipMastersConnection>;
  /** Reads a set of `RelatedPersonRelationshipMaster`. */
  relatedPersonRelationshipMastersList?: Maybe<Array<RelatedPersonRelationshipMaster>>;
  /** Reads and enables pagination through a set of `SexMasterV1`. */
  sexMasterV1s?: Maybe<SexMasterV1sConnection>;
  /** Reads a set of `SexMasterV1`. */
  sexMasterV1sList?: Maybe<Array<SexMasterV1>>;
  /** Reads and enables pagination through a set of `SexualOrientationMasterV1`. */
  sexualOrientationMasterV1s?: Maybe<SexualOrientationMasterV1sConnection>;
  /** Reads a set of `SexualOrientationMasterV1`. */
  sexualOrientationMasterV1sList?: Maybe<Array<SexualOrientationMasterV1>>;
  /** Reads and enables pagination through a set of `StatusMaster`. */
  statusMasters?: Maybe<StatusMastersConnection>;
  /** Reads a set of `StatusMaster`. */
  statusMastersList?: Maybe<Array<StatusMaster>>;
  /** Reads and enables pagination through a set of `AddendumDoctorsDetail`. */
  addendumDoctorsDetails?: Maybe<AddendumDoctorsDetailsConnection>;
  /** Reads a set of `AddendumDoctorsDetail`. */
  addendumDoctorsDetailsList?: Maybe<Array<AddendumDoctorsDetail>>;
  /** Reads and enables pagination through a set of `AllRequestDetail`. */
  allRequestDetails?: Maybe<AllRequestDetailsConnection>;
  /** Reads a set of `AllRequestDetail`. */
  allRequestDetailsList?: Maybe<Array<AllRequestDetail>>;
  /** Reads and enables pagination through a set of `BillingRequestCategory`. */
  billingRequestCategories?: Maybe<BillingRequestCategoriesConnection>;
  /** Reads a set of `BillingRequestCategory`. */
  billingRequestCategoriesList?: Maybe<Array<BillingRequestCategory>>;
  /** Reads and enables pagination through a set of `BillingRequestCategoryMaster`. */
  billingRequestCategoryMasters?: Maybe<BillingRequestCategoryMastersConnection>;
  /** Reads a set of `BillingRequestCategoryMaster`. */
  billingRequestCategoryMastersList?: Maybe<Array<BillingRequestCategoryMaster>>;
  /** Reads and enables pagination through a set of `BillingRequestTypeMaster`. */
  billingRequestTypeMasters?: Maybe<BillingRequestTypeMastersConnection>;
  /** Reads a set of `BillingRequestTypeMaster`. */
  billingRequestTypeMastersList?: Maybe<Array<BillingRequestTypeMaster>>;
  /** Reads and enables pagination through a set of `CommunicationRequestMaster`. */
  communicationRequestMasters?: Maybe<CommunicationRequestMastersConnection>;
  /** Reads a set of `CommunicationRequestMaster`. */
  communicationRequestMastersList?: Maybe<Array<CommunicationRequestMaster>>;
  /** Reads and enables pagination through a set of `CommunicationRequestMasterV1`. */
  communicationRequestMasterV1s?: Maybe<CommunicationRequestMasterV1sConnection>;
  /** Reads a set of `CommunicationRequestMasterV1`. */
  communicationRequestMasterV1sList?: Maybe<Array<CommunicationRequestMasterV1>>;
  /** Reads and enables pagination through a set of `CountryMasterV1`. */
  countryMasterV1s?: Maybe<CountryMasterV1sConnection>;
  /** Reads a set of `CountryMasterV1`. */
  countryMasterV1sList?: Maybe<Array<CountryMasterV1>>;
  /** Reads and enables pagination through a set of `DenialFormV1`. */
  denialFormV1s?: Maybe<DenialFormV1sConnection>;
  /** Reads a set of `DenialFormV1`. */
  denialFormV1sList?: Maybe<Array<DenialFormV1>>;
  /** Reads and enables pagination through a set of `DenialLetterReasonMaster`. */
  denialLetterReasonMasters?: Maybe<DenialLetterReasonMastersConnection>;
  /** Reads a set of `DenialLetterReasonMaster`. */
  denialLetterReasonMastersList?: Maybe<Array<DenialLetterReasonMaster>>;
  /** Reads and enables pagination through a set of `DepartmentHeadMasterDetailsV1`. */
  departmentHeadMasterDetailsV1s?: Maybe<DepartmentHeadMasterDetailsV1sConnection>;
  /** Reads a set of `DepartmentHeadMasterDetailsV1`. */
  departmentHeadMasterDetailsV1sList?: Maybe<Array<DepartmentHeadMasterDetailsV1>>;
  /** Reads and enables pagination through a set of `FeedbackDetail`. */
  feedbackDetails?: Maybe<FeedbackDetailsConnection>;
  /** Reads a set of `FeedbackDetail`. */
  feedbackDetailsList?: Maybe<Array<FeedbackDetail>>;
  /** Reads and enables pagination through a set of `FeedbackQueryTypeMaster`. */
  feedbackQueryTypeMasters?: Maybe<FeedbackQueryTypeMastersConnection>;
  /** Reads a set of `FeedbackQueryTypeMaster`. */
  feedbackQueryTypeMastersList?: Maybe<Array<FeedbackQueryTypeMaster>>;
  /** Reads and enables pagination through a set of `GetChatroomDetail`. */
  getChatroomDetails?: Maybe<GetChatroomDetailsConnection>;
  /** Reads a set of `GetChatroomDetail`. */
  getChatroomDetailsList?: Maybe<Array<GetChatroomDetail>>;
  /** Reads and enables pagination through a set of `HealthAuthAuthorizationTitleMaster`. */
  healthAuthAuthorizationTitleMasters?: Maybe<HealthAuthAuthorizationTitleMastersConnection>;
  /** Reads a set of `HealthAuthAuthorizationTitleMaster`. */
  healthAuthAuthorizationTitleMastersList?: Maybe<Array<HealthAuthAuthorizationTitleMaster>>;
  /** Reads and enables pagination through a set of `HealthInfoAuthorizationV1`. */
  healthInfoAuthorizationV1s?: Maybe<HealthInfoAuthorizationV1sConnection>;
  /** Reads a set of `HealthInfoAuthorizationV1`. */
  healthInfoAuthorizationV1sList?: Maybe<Array<HealthInfoAuthorizationV1>>;
  /** Reads and enables pagination through a set of `HealthInfoAuthorizationV2`. */
  healthInfoAuthorizationV2s?: Maybe<HealthInfoAuthorizationV2sConnection>;
  /** Reads a set of `HealthInfoAuthorizationV2`. */
  healthInfoAuthorizationV2sList?: Maybe<Array<HealthInfoAuthorizationV2>>;
  /** Reads and enables pagination through a set of `ImpactSeverityMaster`. */
  impactSeverityMasters?: Maybe<ImpactSeverityMastersConnection>;
  /** Reads a set of `ImpactSeverityMaster`. */
  impactSeverityMastersList?: Maybe<Array<ImpactSeverityMaster>>;
  /** Reads and enables pagination through a set of `InformationBlockingExceptionsMaster`. */
  informationBlockingExceptionsMasters?: Maybe<InformationBlockingExceptionsMastersConnection>;
  /** Reads a set of `InformationBlockingExceptionsMaster`. */
  informationBlockingExceptionsMastersList?: Maybe<Array<InformationBlockingExceptionsMaster>>;
  /** Reads and enables pagination through a set of `Institution`. */
  institutions?: Maybe<InstitutionsConnection>;
  /** Reads a set of `Institution`. */
  institutionsList?: Maybe<Array<Institution>>;
  /** Reads and enables pagination through a set of `Integration`. */
  integrations?: Maybe<IntegrationsConnection>;
  /** Reads a set of `Integration`. */
  integrationsList?: Maybe<Array<Integration>>;
  /** Reads and enables pagination through a set of `IssueDescriptionMaster`. */
  issueDescriptionMasters?: Maybe<IssueDescriptionMastersConnection>;
  /** Reads a set of `IssueDescriptionMaster`. */
  issueDescriptionMastersList?: Maybe<Array<IssueDescriptionMaster>>;
  /** Reads and enables pagination through a set of `IssueDescriptionMastersMedical`. */
  issueDescriptionMastersMedicals?: Maybe<IssueDescriptionMastersMedicalsConnection>;
  /** Reads a set of `IssueDescriptionMastersMedical`. */
  issueDescriptionMastersMedicalsList?: Maybe<Array<IssueDescriptionMastersMedical>>;
  /** Reads and enables pagination through a set of `IssueImpactMaster`. */
  issueImpactMasters?: Maybe<IssueImpactMastersConnection>;
  /** Reads a set of `IssueImpactMaster`. */
  issueImpactMastersList?: Maybe<Array<IssueImpactMaster>>;
  /** Reads and enables pagination through a set of `JourneyMetricsCurrentWeek`. */
  journeyMetricsCurrentWeeks?: Maybe<JourneyMetricsCurrentWeeksConnection>;
  /** Reads a set of `JourneyMetricsCurrentWeek`. */
  journeyMetricsCurrentWeeksList?: Maybe<Array<JourneyMetricsCurrentWeek>>;
  /** Reads and enables pagination through a set of `MedicalAddendumInsuranceRequest`. */
  medicalAddendumInsuranceRequests?: Maybe<MedicalAddendumInsuranceRequestsConnection>;
  /** Reads a set of `MedicalAddendumInsuranceRequest`. */
  medicalAddendumInsuranceRequestsList?: Maybe<Array<MedicalAddendumInsuranceRequest>>;
  /** Reads and enables pagination through a set of `MetricsViewAll`. */
  metricsViewAlls?: Maybe<MetricsViewAllsConnection>;
  /** Reads a set of `MetricsViewAll`. */
  metricsViewAllsList?: Maybe<Array<MetricsViewAll>>;
  /** Reads and enables pagination through a set of `MetricsViewCurrentWeek`. */
  metricsViewCurrentWeeks?: Maybe<MetricsViewCurrentWeeksConnection>;
  /** Reads a set of `MetricsViewCurrentWeek`. */
  metricsViewCurrentWeeksList?: Maybe<Array<MetricsViewCurrentWeek>>;
  /** Reads and enables pagination through a set of `MetricsViewCurrentWeekV1`. */
  metricsViewCurrentWeekV1s?: Maybe<MetricsViewCurrentWeekV1sConnection>;
  /** Reads a set of `MetricsViewCurrentWeekV1`. */
  metricsViewCurrentWeekV1sList?: Maybe<Array<MetricsViewCurrentWeekV1>>;
  /** Reads and enables pagination through a set of `MyRequest`. */
  myRequests?: Maybe<MyRequestsConnection>;
  /** Reads a set of `MyRequest`. */
  myRequestsList?: Maybe<Array<MyRequest>>;
  /** Reads and enables pagination through a set of `NotificationList`. */
  notificationLists?: Maybe<NotificationListsConnection>;
  /** Reads a set of `NotificationList`. */
  notificationListsList?: Maybe<Array<NotificationList>>;
  /** Reads and enables pagination through a set of `NotificationListV1`. */
  notificationListV1s?: Maybe<NotificationListV1sConnection>;
  /** Reads a set of `NotificationListV1`. */
  notificationListV1sList?: Maybe<Array<NotificationListV1>>;
  /** Reads and enables pagination through a set of `ObtainRecordTypeMaster`. */
  obtainRecordTypeMasters?: Maybe<ObtainRecordTypeMastersConnection>;
  /** Reads a set of `ObtainRecordTypeMaster`. */
  obtainRecordTypeMastersList?: Maybe<Array<ObtainRecordTypeMaster>>;
  /** Reads and enables pagination through a set of `ObtainTypeMaster`. */
  obtainTypeMasters?: Maybe<ObtainTypeMastersConnection>;
  /** Reads a set of `ObtainTypeMaster`. */
  obtainTypeMastersList?: Maybe<Array<ObtainTypeMaster>>;
  /** Reads and enables pagination through a set of `ObtainTypeMasterV1`. */
  obtainTypeMasterV1s?: Maybe<ObtainTypeMasterV1sConnection>;
  /** Reads a set of `ObtainTypeMasterV1`. */
  obtainTypeMasterV1sList?: Maybe<Array<ObtainTypeMasterV1>>;
  /** Reads and enables pagination through a set of `PatientExternalDocumentList`. */
  patientExternalDocumentLists?: Maybe<PatientExternalDocumentListsConnection>;
  /** Reads a set of `PatientExternalDocumentList`. */
  patientExternalDocumentListsList?: Maybe<Array<PatientExternalDocumentList>>;
  /** Reads and enables pagination through a set of `PreferredPronounsMaster`. */
  preferredPronounsMasters?: Maybe<PreferredPronounsMastersConnection>;
  /** Reads a set of `PreferredPronounsMaster`. */
  preferredPronounsMastersList?: Maybe<Array<PreferredPronounsMaster>>;
  /** Reads and enables pagination through a set of `RelationshipType`. */
  relationshipTypes?: Maybe<RelationshipTypesConnection>;
  /** Reads a set of `RelationshipType`. */
  relationshipTypesList?: Maybe<Array<RelationshipType>>;
  /** Reads and enables pagination through a set of `ReminderNotificationDetail`. */
  reminderNotificationDetails?: Maybe<ReminderNotificationDetailsConnection>;
  /** Reads a set of `ReminderNotificationDetail`. */
  reminderNotificationDetailsList?: Maybe<Array<ReminderNotificationDetail>>;
  /** Reads and enables pagination through a set of `Request`. */
  requests?: Maybe<RequestsConnection>;
  /** Reads a set of `Request`. */
  requestsList?: Maybe<Array<Request>>;
  /** Reads and enables pagination through a set of `RequestContactDetail`. */
  requestContactDetails?: Maybe<RequestContactDetailsConnection>;
  /** Reads a set of `RequestContactDetail`. */
  requestContactDetailsList?: Maybe<Array<RequestContactDetail>>;
  /** Reads and enables pagination through a set of `RequestLogMaster`. */
  requestLogMasters?: Maybe<RequestLogMastersConnection>;
  /** Reads a set of `RequestLogMaster`. */
  requestLogMastersList?: Maybe<Array<RequestLogMaster>>;
  /** Reads and enables pagination through a set of `RequestLogMasterV1`. */
  requestLogMasterV1s?: Maybe<RequestLogMasterV1sConnection>;
  /** Reads a set of `RequestLogMasterV1`. */
  requestLogMasterV1sList?: Maybe<Array<RequestLogMasterV1>>;
  /** Reads and enables pagination through a set of `RequestObtainRecordType`. */
  requestObtainRecordTypes?: Maybe<RequestObtainRecordTypesConnection>;
  /** Reads a set of `RequestObtainRecordType`. */
  requestObtainRecordTypesList?: Maybe<Array<RequestObtainRecordType>>;
  /** Reads and enables pagination through a set of `RequestPatientView`. */
  requestPatientViews?: Maybe<RequestPatientViewsConnection>;
  /** Reads a set of `RequestPatientView`. */
  requestPatientViewsList?: Maybe<Array<RequestPatientView>>;
  /** Reads and enables pagination through a set of `RequestPpaMraView`. */
  requestPpaMraViews?: Maybe<RequestPpaMraViewsConnection>;
  /** Reads a set of `RequestPpaMraView`. */
  requestPpaMraViewsList?: Maybe<Array<RequestPpaMraView>>;
  /** Reads and enables pagination through a set of `RequestPpaMraViewV1`. */
  requestPpaMraViewV1s?: Maybe<RequestPpaMraViewV1sConnection>;
  /** Reads a set of `RequestPpaMraViewV1`. */
  requestPpaMraViewV1sList?: Maybe<Array<RequestPpaMraViewV1>>;
  /** Reads and enables pagination through a set of `RequestPpaMraViewV2`. */
  requestPpaMraViewV2s?: Maybe<RequestPpaMraViewV2sConnection>;
  /** Reads a set of `RequestPpaMraViewV2`. */
  requestPpaMraViewV2sList?: Maybe<Array<RequestPpaMraViewV2>>;
  /** Reads and enables pagination through a set of `RequestPpaMraViewV3`. */
  requestPpaMraViewV3s?: Maybe<RequestPpaMraViewV3sConnection>;
  /** Reads a set of `RequestPpaMraViewV3`. */
  requestPpaMraViewV3sList?: Maybe<Array<RequestPpaMraViewV3>>;
  /** Reads and enables pagination through a set of `RequestPpaMraViewV4`. */
  requestPpaMraViewV4s?: Maybe<RequestPpaMraViewV4sConnection>;
  /** Reads a set of `RequestPpaMraViewV4`. */
  requestPpaMraViewV4sList?: Maybe<Array<RequestPpaMraViewV4>>;
  /** Reads and enables pagination through a set of `RequestPriorityMaster`. */
  requestPriorityMasters?: Maybe<RequestPriorityMastersConnection>;
  /** Reads a set of `RequestPriorityMaster`. */
  requestPriorityMastersList?: Maybe<Array<RequestPriorityMaster>>;
  /** Reads and enables pagination through a set of `RequestResponse`. */
  requestResponses?: Maybe<RequestResponsesConnection>;
  /** Reads a set of `RequestResponse`. */
  requestResponsesList?: Maybe<Array<RequestResponse>>;
  /** Reads and enables pagination through a set of `RequestStatusMaster`. */
  requestStatusMasters?: Maybe<RequestStatusMastersConnection>;
  /** Reads a set of `RequestStatusMaster`. */
  requestStatusMastersList?: Maybe<Array<RequestStatusMaster>>;
  /** Reads and enables pagination through a set of `RequestToken`. */
  requestTokens?: Maybe<RequestTokensConnection>;
  /** Reads a set of `RequestToken`. */
  requestTokensList?: Maybe<Array<RequestToken>>;
  /** Reads and enables pagination through a set of `RequestTokenV1`. */
  requestTokenV1s?: Maybe<RequestTokenV1sConnection>;
  /** Reads a set of `RequestTokenV1`. */
  requestTokenV1sList?: Maybe<Array<RequestTokenV1>>;
  /** Reads and enables pagination through a set of `RequestTypeMaster`. */
  requestTypeMasters?: Maybe<RequestTypeMastersConnection>;
  /** Reads a set of `RequestTypeMaster`. */
  requestTypeMastersList?: Maybe<Array<RequestTypeMaster>>;
  /** Reads and enables pagination through a set of `RequestsOnBehalf`. */
  requestsOnBehalves?: Maybe<RequestsOnBehalvesConnection>;
  /** Reads a set of `RequestsOnBehalf`. */
  requestsOnBehalvesList?: Maybe<Array<RequestsOnBehalf>>;
  /** Reads and enables pagination through a set of `ServiceCategoryMaster`. */
  serviceCategoryMasters?: Maybe<ServiceCategoryMastersConnection>;
  /** Reads a set of `ServiceCategoryMaster`. */
  serviceCategoryMastersList?: Maybe<Array<ServiceCategoryMaster>>;
  /** Reads and enables pagination through a set of `SourceNatureMaster`. */
  sourceNatureMasters?: Maybe<SourceNatureMastersConnection>;
  /** Reads a set of `SourceNatureMaster`. */
  sourceNatureMastersList?: Maybe<Array<SourceNatureMaster>>;
  /** Reads and enables pagination through a set of `StateMasterV1`. */
  stateMasterV1s?: Maybe<StateMasterV1sConnection>;
  /** Reads a set of `StateMasterV1`. */
  stateMasterV1sList?: Maybe<Array<StateMasterV1>>;
  /** Reads and enables pagination through a set of `SubstanceDisorderAuthorizationV1`. */
  substanceDisorderAuthorizationV1s?: Maybe<SubstanceDisorderAuthorizationV1sConnection>;
  /** Reads a set of `SubstanceDisorderAuthorizationV1`. */
  substanceDisorderAuthorizationV1sList?: Maybe<Array<SubstanceDisorderAuthorizationV1>>;
  /** Reads and enables pagination through a set of `SubstanceDisorderInformationMasterV1`. */
  substanceDisorderInformationMasterV1s?: Maybe<SubstanceDisorderInformationMasterV1sConnection>;
  /** Reads a set of `SubstanceDisorderInformationMasterV1`. */
  substanceDisorderInformationMasterV1sList?: Maybe<Array<SubstanceDisorderInformationMasterV1>>;
  /** Reads and enables pagination through a set of `UseDisorderAuthorizationTitleMaster`. */
  useDisorderAuthorizationTitleMasters?: Maybe<UseDisorderAuthorizationTitleMastersConnection>;
  /** Reads a set of `UseDisorderAuthorizationTitleMaster`. */
  useDisorderAuthorizationTitleMastersList?: Maybe<Array<UseDisorderAuthorizationTitleMaster>>;
  /** Reads and enables pagination through a set of `UserGroupMaster`. */
  userGroupMasters?: Maybe<UserGroupMastersConnection>;
  /** Reads a set of `UserGroupMaster`. */
  userGroupMastersList?: Maybe<Array<UserGroupMaster>>;
  /** Reads and enables pagination through a set of `UserInviteList`. */
  userInviteLists?: Maybe<UserInviteListsConnection>;
  /** Reads a set of `UserInviteList`. */
  userInviteListsList?: Maybe<Array<UserInviteList>>;
  /** Reads and enables pagination through a set of `UserKeycloakEventLog`. */
  userKeycloakEventLogs?: Maybe<UserKeycloakEventLogsConnection>;
  /** Reads a set of `UserKeycloakEventLog`. */
  userKeycloakEventLogsList?: Maybe<Array<UserKeycloakEventLog>>;
  /** Reads and enables pagination through a set of `UserMedicalRecordsDatum`. */
  userMedicalRecordsData?: Maybe<UserMedicalRecordsDataConnection>;
  /** Reads a set of `UserMedicalRecordsDatum`. */
  userMedicalRecordsDataList?: Maybe<Array<UserMedicalRecordsDatum>>;
  /** Reads and enables pagination through a set of `MediaType`. */
  mediaTypes?: Maybe<MediaTypesConnection>;
  /** Reads a set of `MediaType`. */
  mediaTypesList?: Maybe<Array<MediaType>>;
  /** Reads and enables pagination through a set of `InstitutionAliasesList`. */
  institutionAliasesLists?: Maybe<InstitutionAliasesListsConnection>;
  /** Reads a set of `InstitutionAliasesList`. */
  institutionAliasesListsList?: Maybe<Array<InstitutionAliasesList>>;
  /** Reads and enables pagination through a set of `InstitutionAssetsProject`. */
  institutionAssetsProjects?: Maybe<InstitutionAssetsProjectsConnection>;
  /** Reads a set of `InstitutionAssetsProject`. */
  institutionAssetsProjectsList?: Maybe<Array<InstitutionAssetsProject>>;
  /** Reads and enables pagination through a set of `InstitutionBrokenUrlList`. */
  institutionBrokenUrlLists?: Maybe<InstitutionBrokenUrlListsConnection>;
  /** Reads a set of `InstitutionBrokenUrlList`. */
  institutionBrokenUrlListsList?: Maybe<Array<InstitutionBrokenUrlList>>;
  /** Reads and enables pagination through a set of `InstitutionMergePendingList`. */
  institutionMergePendingLists?: Maybe<InstitutionMergePendingListsConnection>;
  /** Reads a set of `InstitutionMergePendingList`. */
  institutionMergePendingListsList?: Maybe<Array<InstitutionMergePendingList>>;
  /** Reads and enables pagination through a set of `InstitutionProfileJune20213`. */
  institutionProfileJune20213s?: Maybe<InstitutionProfileJune20213sConnection>;
  /** Reads a set of `InstitutionProfileJune20213`. */
  institutionProfileJune20213sList?: Maybe<Array<InstitutionProfileJune20213>>;
  /** Reads and enables pagination through a set of `InstitutionProfileSearch`. */
  institutionProfileSearches?: Maybe<InstitutionProfileSearchesConnection>;
  /** Reads a set of `InstitutionProfileSearch`. */
  institutionProfileSearchesList?: Maybe<Array<InstitutionProfileSearch>>;
  /** Reads and enables pagination through a set of `MedigyInstitution`. */
  medigyInstitutions?: Maybe<MedigyInstitutionsConnection>;
  /** Reads a set of `MedigyInstitution`. */
  medigyInstitutionsList?: Maybe<Array<MedigyInstitution>>;
  /** Reads and enables pagination through a set of `MedigyInstitutionImage`. */
  medigyInstitutionImages?: Maybe<MedigyInstitutionImagesConnection>;
  /** Reads a set of `MedigyInstitutionImage`. */
  medigyInstitutionImagesList?: Maybe<Array<MedigyInstitutionImage>>;
  /** Reads and enables pagination through a set of `MedigyNamespace`. */
  medigyNamespaces?: Maybe<MedigyNamespacesConnection>;
  /** Reads a set of `MedigyNamespace`. */
  medigyNamespacesList?: Maybe<Array<MedigyNamespace>>;
  /** Reads and enables pagination through a set of `ApprovedOfferingListWithCommitMsg`. */
  approvedOfferingListWithCommitMsgs?: Maybe<ApprovedOfferingListWithCommitMsgsConnection>;
  /** Reads a set of `ApprovedOfferingListWithCommitMsg`. */
  approvedOfferingListWithCommitMsgsList?: Maybe<Array<ApprovedOfferingListWithCommitMsg>>;
  /** Reads and enables pagination through a set of `FrostSullivanArtificialIntelligenceOffering`. */
  frostSullivanArtificialIntelligenceOfferings?: Maybe<FrostSullivanArtificialIntelligenceOfferingsConnection>;
  /** Reads a set of `FrostSullivanArtificialIntelligenceOffering`. */
  frostSullivanArtificialIntelligenceOfferingsList?: Maybe<Array<FrostSullivanArtificialIntelligenceOffering>>;
  /** Reads and enables pagination through a set of `FrostSullivanElectronicHealthRecordsEhrsOffering`. */
  frostSullivanElectronicHealthRecordsEhrsOfferings?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingsConnection>;
  /** Reads a set of `FrostSullivanElectronicHealthRecordsEhrsOffering`. */
  frostSullivanElectronicHealthRecordsEhrsOfferingsList?: Maybe<Array<FrostSullivanElectronicHealthRecordsEhrsOffering>>;
  /** Reads and enables pagination through a set of `GartnerDataAnalyticsOffering`. */
  gartnerDataAnalyticsOfferings?: Maybe<GartnerDataAnalyticsOfferingsConnection>;
  /** Reads a set of `GartnerDataAnalyticsOffering`. */
  gartnerDataAnalyticsOfferingsList?: Maybe<Array<GartnerDataAnalyticsOffering>>;
  /** Reads and enables pagination through a set of `GartnerPcmPatientCareManagementOffering`. */
  gartnerPcmPatientCareManagementOfferings?: Maybe<GartnerPcmPatientCareManagementOfferingsConnection>;
  /** Reads a set of `GartnerPcmPatientCareManagementOffering`. */
  gartnerPcmPatientCareManagementOfferingsList?: Maybe<Array<GartnerPcmPatientCareManagementOffering>>;
  /** Reads and enables pagination through a set of `GartnerRemoteDiagnosticsOffering`. */
  gartnerRemoteDiagnosticsOfferings?: Maybe<GartnerRemoteDiagnosticsOfferingsConnection>;
  /** Reads a set of `GartnerRemoteDiagnosticsOffering`. */
  gartnerRemoteDiagnosticsOfferingsList?: Maybe<Array<GartnerRemoteDiagnosticsOffering>>;
  /** Reads and enables pagination through a set of `GartnerRoboticProcessAutomationRpaOffering`. */
  gartnerRoboticProcessAutomationRpaOfferings?: Maybe<GartnerRoboticProcessAutomationRpaOfferingsConnection>;
  /** Reads a set of `GartnerRoboticProcessAutomationRpaOffering`. */
  gartnerRoboticProcessAutomationRpaOfferingsList?: Maybe<Array<GartnerRoboticProcessAutomationRpaOffering>>;
  /** Reads and enables pagination through a set of `GartnerSupplyChainOffering`. */
  gartnerSupplyChainOfferings?: Maybe<GartnerSupplyChainOfferingsConnection>;
  /** Reads a set of `GartnerSupplyChainOffering`. */
  gartnerSupplyChainOfferingsList?: Maybe<Array<GartnerSupplyChainOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsAppointmentSchedulingOffering`. */
  healthcareItNewsAppointmentSchedulingOfferings?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsAppointmentSchedulingOffering`. */
  healthcareItNewsAppointmentSchedulingOfferingsList?: Maybe<Array<HealthcareItNewsAppointmentSchedulingOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsCybersecurityOffering`. */
  healthcareItNewsCybersecurityOfferings?: Maybe<HealthcareItNewsCybersecurityOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsCybersecurityOffering`. */
  healthcareItNewsCybersecurityOfferingsList?: Maybe<Array<HealthcareItNewsCybersecurityOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsDigitalTransformationOffering`. */
  healthcareItNewsDigitalTransformationOfferings?: Maybe<HealthcareItNewsDigitalTransformationOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsDigitalTransformationOffering`. */
  healthcareItNewsDigitalTransformationOfferingsList?: Maybe<Array<HealthcareItNewsDigitalTransformationOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsHealthInformationTechnologyHitOffering`. */
  healthcareItNewsHealthInformationTechnologyHitOfferings?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsHealthInformationTechnologyHitOffering`. */
  healthcareItNewsHealthInformationTechnologyHitOfferingsList?: Maybe<Array<HealthcareItNewsHealthInformationTechnologyHitOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsImagingTechnologyOffering`. */
  healthcareItNewsImagingTechnologyOfferings?: Maybe<HealthcareItNewsImagingTechnologyOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsImagingTechnologyOffering`. */
  healthcareItNewsImagingTechnologyOfferingsList?: Maybe<Array<HealthcareItNewsImagingTechnologyOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsMachineLearningOffering`. */
  healthcareItNewsMachineLearningOfferings?: Maybe<HealthcareItNewsMachineLearningOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsMachineLearningOffering`. */
  healthcareItNewsMachineLearningOfferingsList?: Maybe<Array<HealthcareItNewsMachineLearningOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsMergersAcquisitionsOffering`. */
  healthcareItNewsMergersAcquisitionsOfferings?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsMergersAcquisitionsOffering`. */
  healthcareItNewsMergersAcquisitionsOfferingsList?: Maybe<Array<HealthcareItNewsMergersAcquisitionsOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsMobileHealthMhealthOffering`. */
  healthcareItNewsMobileHealthMhealthOfferings?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsMobileHealthMhealthOffering`. */
  healthcareItNewsMobileHealthMhealthOfferingsList?: Maybe<Array<HealthcareItNewsMobileHealthMhealthOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsOncologyOffering`. */
  healthcareItNewsOncologyOfferings?: Maybe<HealthcareItNewsOncologyOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsOncologyOffering`. */
  healthcareItNewsOncologyOfferingsList?: Maybe<Array<HealthcareItNewsOncologyOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsPatientEngagementOffering`. */
  healthcareItNewsPatientEngagementOfferings?: Maybe<HealthcareItNewsPatientEngagementOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsPatientEngagementOffering`. */
  healthcareItNewsPatientEngagementOfferingsList?: Maybe<Array<HealthcareItNewsPatientEngagementOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsPublicHealthOffering`. */
  healthcareItNewsPublicHealthOfferings?: Maybe<HealthcareItNewsPublicHealthOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsPublicHealthOffering`. */
  healthcareItNewsPublicHealthOfferingsList?: Maybe<Array<HealthcareItNewsPublicHealthOffering>>;
  /** Reads and enables pagination through a set of `HealthcareItNewsRevenueCycleManagementOffering`. */
  healthcareItNewsRevenueCycleManagementOfferings?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingsConnection>;
  /** Reads a set of `HealthcareItNewsRevenueCycleManagementOffering`. */
  healthcareItNewsRevenueCycleManagementOfferingsList?: Maybe<Array<HealthcareItNewsRevenueCycleManagementOffering>>;
  /** Reads and enables pagination through a set of `HimssComplianceOffering`. */
  himssComplianceOfferings?: Maybe<HimssComplianceOfferingsConnection>;
  /** Reads a set of `HimssComplianceOffering`. */
  himssComplianceOfferingsList?: Maybe<Array<HimssComplianceOffering>>;
  /** Reads and enables pagination through a set of `HimssDigitalHealthOffering`. */
  himssDigitalHealthOfferings?: Maybe<HimssDigitalHealthOfferingsConnection>;
  /** Reads a set of `HimssDigitalHealthOffering`. */
  himssDigitalHealthOfferingsList?: Maybe<Array<HimssDigitalHealthOffering>>;
  /** Reads and enables pagination through a set of `HimssHealthAndWellnessOffering`. */
  himssHealthAndWellnessOfferings?: Maybe<HimssHealthAndWellnessOfferingsConnection>;
  /** Reads a set of `HimssHealthAndWellnessOffering`. */
  himssHealthAndWellnessOfferingsList?: Maybe<Array<HimssHealthAndWellnessOffering>>;
  /** Reads and enables pagination through a set of `HimssInformaticsOffering`. */
  himssInformaticsOfferings?: Maybe<HimssInformaticsOfferingsConnection>;
  /** Reads a set of `HimssInformaticsOffering`. */
  himssInformaticsOfferingsList?: Maybe<Array<HimssInformaticsOffering>>;
  /** Reads and enables pagination through a set of `HimssInteroperabilityOffering`. */
  himssInteroperabilityOfferings?: Maybe<HimssInteroperabilityOfferingsConnection>;
  /** Reads a set of `HimssInteroperabilityOffering`. */
  himssInteroperabilityOfferingsList?: Maybe<Array<HimssInteroperabilityOffering>>;
  /** Reads and enables pagination through a set of `KlasClaimsManagementOffering`. */
  klasClaimsManagementOfferings?: Maybe<KlasClaimsManagementOfferingsConnection>;
  /** Reads a set of `KlasClaimsManagementOffering`. */
  klasClaimsManagementOfferingsList?: Maybe<Array<KlasClaimsManagementOffering>>;
  /** Reads and enables pagination through a set of `KlasHomeHealthOffering`. */
  klasHomeHealthOfferings?: Maybe<KlasHomeHealthOfferingsConnection>;
  /** Reads a set of `KlasHomeHealthOffering`. */
  klasHomeHealthOfferingsList?: Maybe<Array<KlasHomeHealthOffering>>;
  /** Reads and enables pagination through a set of `KlasPatientPortalsOffering`. */
  klasPatientPortalsOfferings?: Maybe<KlasPatientPortalsOfferingsConnection>;
  /** Reads a set of `KlasPatientPortalsOffering`. */
  klasPatientPortalsOfferingsList?: Maybe<Array<KlasPatientPortalsOffering>>;
  /** Reads and enables pagination through a set of `KlasPracticeManagementOffering`. */
  klasPracticeManagementOfferings?: Maybe<KlasPracticeManagementOfferingsConnection>;
  /** Reads a set of `KlasPracticeManagementOffering`. */
  klasPracticeManagementOfferingsList?: Maybe<Array<KlasPracticeManagementOffering>>;
  /** Reads and enables pagination through a set of `KlasRemotePatientMonitoringOffering`. */
  klasRemotePatientMonitoringOfferings?: Maybe<KlasRemotePatientMonitoringOfferingsConnection>;
  /** Reads a set of `KlasRemotePatientMonitoringOffering`. */
  klasRemotePatientMonitoringOfferingsList?: Maybe<Array<KlasRemotePatientMonitoringOffering>>;
  /** Reads and enables pagination through a set of `MedigyChronicCareManagementOffering`. */
  medigyChronicCareManagementOfferings?: Maybe<MedigyChronicCareManagementOfferingsConnection>;
  /** Reads a set of `MedigyChronicCareManagementOffering`. */
  medigyChronicCareManagementOfferingsList?: Maybe<Array<MedigyChronicCareManagementOffering>>;
  /** Reads and enables pagination through a set of `MedigyOfferingList`. */
  medigyOfferingLists?: Maybe<MedigyOfferingListsConnection>;
  /** Reads a set of `MedigyOfferingList`. */
  medigyOfferingListsList?: Maybe<Array<MedigyOfferingList>>;
  /** Reads and enables pagination through a set of `MedigyOfferingListCount`. */
  medigyOfferingListCounts?: Maybe<MedigyOfferingListCountsConnection>;
  /** Reads a set of `MedigyOfferingListCount`. */
  medigyOfferingListCountsList?: Maybe<Array<MedigyOfferingListCount>>;
  /** Reads and enables pagination through a set of `MedigyOffering`. */
  medigyOfferings?: Maybe<MedigyOfferingsConnection>;
  /** Reads a set of `MedigyOffering`. */
  medigyOfferingsList?: Maybe<Array<MedigyOffering>>;
  /** Reads and enables pagination through a set of `MedigyTelemedicineOffering`. */
  medigyTelemedicineOfferings?: Maybe<MedigyTelemedicineOfferingsConnection>;
  /** Reads a set of `MedigyTelemedicineOffering`. */
  medigyTelemedicineOfferingsList?: Maybe<Array<MedigyTelemedicineOffering>>;
  /** Reads and enables pagination through a set of `MergePendingList`. */
  mergePendingLists?: Maybe<MergePendingListsConnection>;
  /** Reads a set of `MergePendingList`. */
  mergePendingListsList?: Maybe<Array<MergePendingList>>;
  /** Reads and enables pagination through a set of `OfferingAliasesList`. */
  offeringAliasesLists?: Maybe<OfferingAliasesListsConnection>;
  /** Reads a set of `OfferingAliasesList`. */
  offeringAliasesListsList?: Maybe<Array<OfferingAliasesList>>;
  /** Reads and enables pagination through a set of `OfferingBrokenUrlList`. */
  offeringBrokenUrlLists?: Maybe<OfferingBrokenUrlListsConnection>;
  /** Reads a set of `OfferingBrokenUrlList`. */
  offeringBrokenUrlListsList?: Maybe<Array<OfferingBrokenUrlList>>;
  /** Reads and enables pagination through a set of `OfferingCampaignsList`. */
  offeringCampaignsLists?: Maybe<OfferingCampaignsListsConnection>;
  /** Reads a set of `OfferingCampaignsList`. */
  offeringCampaignsListsList?: Maybe<Array<OfferingCampaignsList>>;
  /** Reads and enables pagination through a set of `OfferingCreatedByUser`. */
  offeringCreatedByUsers?: Maybe<OfferingCreatedByUsersConnection>;
  /** Reads a set of `OfferingCreatedByUser`. */
  offeringCreatedByUsersList?: Maybe<Array<OfferingCreatedByUser>>;
  /** Reads and enables pagination through a set of `OfferingCuratedListWithCommitMsg`. */
  offeringCuratedListWithCommitMsgs?: Maybe<OfferingCuratedListWithCommitMsgsConnection>;
  /** Reads a set of `OfferingCuratedListWithCommitMsg`. */
  offeringCuratedListWithCommitMsgsList?: Maybe<Array<OfferingCuratedListWithCommitMsg>>;
  /** Reads and enables pagination through a set of `OfferingProfile`. */
  offeringProfiles?: Maybe<OfferingProfilesConnection>;
  /** Reads a set of `OfferingProfile`. */
  offeringProfilesList?: Maybe<Array<OfferingProfile>>;
  /** Reads and enables pagination through a set of `OfferingProfileJune2021`. */
  offeringProfileJune2021s?: Maybe<OfferingProfileJune2021sConnection>;
  /** Reads a set of `OfferingProfileJune2021`. */
  offeringProfileJune2021sList?: Maybe<Array<OfferingProfileJune2021>>;
  /** Reads and enables pagination through a set of `OfferingProfileMaterialized`. */
  offeringProfileMaterializeds?: Maybe<OfferingProfileMaterializedsConnection>;
  /** Reads a set of `OfferingProfileMaterialized`. */
  offeringProfileMaterializedsList?: Maybe<Array<OfferingProfileMaterialized>>;
  /** Reads and enables pagination through a set of `OfferingProfileMedigy`. */
  offeringProfileMedigies?: Maybe<OfferingProfileMedigiesConnection>;
  /** Reads a set of `OfferingProfileMedigy`. */
  offeringProfileMedigiesList?: Maybe<Array<OfferingProfileMedigy>>;
  /** Reads and enables pagination through a set of `OfferingProfileSearch`. */
  offeringProfileSearches?: Maybe<OfferingProfileSearchesConnection>;
  /** Reads a set of `OfferingProfileSearch`. */
  offeringProfileSearchesList?: Maybe<Array<OfferingProfileSearch>>;
  /** Reads and enables pagination through a set of `OfferingSearch`. */
  offeringSearches?: Maybe<OfferingSearchesConnection>;
  /** Reads a set of `OfferingSearch`. */
  offeringSearchesList?: Maybe<Array<OfferingSearch>>;
  /** Reads and enables pagination through a set of `OfferingTopicUrl`. */
  offeringTopicUrls?: Maybe<OfferingTopicUrlsConnection>;
  /** Reads a set of `OfferingTopicUrl`. */
  offeringTopicUrlsList?: Maybe<Array<OfferingTopicUrl>>;
  /** Reads and enables pagination through a set of `OfferingVendorNameMismatch`. */
  offeringVendorNameMismatches?: Maybe<OfferingVendorNameMismatchesConnection>;
  /** Reads a set of `OfferingVendorNameMismatch`. */
  offeringVendorNameMismatchesList?: Maybe<Array<OfferingVendorNameMismatch>>;
  /** Reads and enables pagination through a set of `OwnerClaimedView`. */
  ownerClaimedViews?: Maybe<OwnerClaimedViewsConnection>;
  /** Reads a set of `OwnerClaimedView`. */
  ownerClaimedViewsList?: Maybe<Array<OwnerClaimedView>>;
  /** Reads and enables pagination through a set of `RelatedOfferingsList`. */
  relatedOfferingsLists?: Maybe<RelatedOfferingsListsConnection>;
  /** Reads a set of `RelatedOfferingsList`. */
  relatedOfferingsListsList?: Maybe<Array<RelatedOfferingsList>>;
  /** Reads and enables pagination through a set of `SymplurMedicalBillingOffering`. */
  symplurMedicalBillingOfferings?: Maybe<SymplurMedicalBillingOfferingsConnection>;
  /** Reads a set of `SymplurMedicalBillingOffering`. */
  symplurMedicalBillingOfferingsList?: Maybe<Array<SymplurMedicalBillingOffering>>;
  /** Reads and enables pagination through a set of `SymplurMedicalDevicesOffering`. */
  symplurMedicalDevicesOfferings?: Maybe<SymplurMedicalDevicesOfferingsConnection>;
  /** Reads a set of `SymplurMedicalDevicesOffering`. */
  symplurMedicalDevicesOfferingsList?: Maybe<Array<SymplurMedicalDevicesOffering>>;
  /** Reads and enables pagination through a set of `SymplurPatientExperienceOffering`. */
  symplurPatientExperienceOfferings?: Maybe<SymplurPatientExperienceOfferingsConnection>;
  /** Reads a set of `SymplurPatientExperienceOffering`. */
  symplurPatientExperienceOfferingsList?: Maybe<Array<SymplurPatientExperienceOffering>>;
  /** Reads and enables pagination through a set of `SymplurPrimaryCareOffering`. */
  symplurPrimaryCareOfferings?: Maybe<SymplurPrimaryCareOfferingsConnection>;
  /** Reads a set of `SymplurPrimaryCareOffering`. */
  symplurPrimaryCareOfferingsList?: Maybe<Array<SymplurPrimaryCareOffering>>;
  /** Reads and enables pagination through a set of `SymplurVirtualCareOffering`. */
  symplurVirtualCareOfferings?: Maybe<SymplurVirtualCareOfferingsConnection>;
  /** Reads a set of `SymplurVirtualCareOffering`. */
  symplurVirtualCareOfferingsList?: Maybe<Array<SymplurVirtualCareOffering>>;
  /** Reads and enables pagination through a set of `MedigyOfferingProfile`. */
  medigyOfferingProfiles?: Maybe<MedigyOfferingProfilesConnection>;
  /** Reads a set of `MedigyOfferingProfile`. */
  medigyOfferingProfilesList?: Maybe<Array<MedigyOfferingProfile>>;
  /** Reads and enables pagination through a set of `SurveyFormUpdate`. */
  surveyFormUpdates?: Maybe<SurveyFormUpdatesConnection>;
  /** Reads a set of `SurveyFormUpdate`. */
  surveyFormUpdatesList?: Maybe<Array<SurveyFormUpdate>>;
  /** Reads and enables pagination through a set of `SurveyList`. */
  surveyLists?: Maybe<SurveyListsConnection>;
  /** Reads a set of `SurveyList`. */
  surveyListsList?: Maybe<Array<SurveyList>>;
  /** Reads and enables pagination through a set of `CountryList`. */
  countryLists?: Maybe<CountryListsConnection>;
  /** Reads a set of `CountryList`. */
  countryListsList?: Maybe<Array<CountryList>>;
  /** Reads and enables pagination through a set of `MedicalGroup`. */
  medicalGroups?: Maybe<MedicalGroupsConnection>;
  /** Reads a set of `MedicalGroup`. */
  medicalGroupsList?: Maybe<Array<MedicalGroup>>;
  /** Reads and enables pagination through a set of `StateList`. */
  stateLists?: Maybe<StateListsConnection>;
  /** Reads a set of `StateList`. */
  stateListsList?: Maybe<Array<StateList>>;
  /** Reads and enables pagination through a set of `MedigyMember`. */
  medigyMembers?: Maybe<MedigyMembersConnection>;
  /** Reads a set of `MedigyMember`. */
  medigyMembersList?: Maybe<Array<MedigyMember>>;
  /** Reads and enables pagination through a set of `MedigyUser`. */
  medigyUsers?: Maybe<MedigyUsersConnection>;
  /** Reads a set of `MedigyUser`. */
  medigyUsersList?: Maybe<Array<MedigyUser>>;
  fileUpload?: Maybe<FileUpload>;
  mediaTypeByMimeTypeAndFileExtnAndLabel?: Maybe<MediaType>;
  surveyFormUpdate?: Maybe<SurveyFormUpdate>;
  getUserTourStatus?: Maybe<ResponseResultStatus>;
  /** Given a title or other basis, create a good filename for storing content */
  prepareFileName?: Maybe<Scalars['String']>;
  /** Given a string such as a URL, remove diacritic marks, lowercase the string, and return with hyphens between words */
  slugify?: Maybe<Scalars['String']>;
  /** Given a URL, return the hostname only without "www." prefix */
  urlBrand?: Maybe<Scalars['String']>;
  getMyInstitutions?: Maybe<MemberInstititutionResponse>;
  getCuratedCounts?: Maybe<CuratedCount>;
  getTelemetryConfig?: Maybe<TelemetryResult>;
  getUiCaptchaConfig?: Maybe<CaptchaResult>;
  authenticate?: Maybe<Scalars['String']>;
  forgotPasswordEmail?: Maybe<Scalars['String']>;
  forgotPasswordEmailWithRedirectUri?: Maybe<Scalars['String']>;
  getPromData?: Maybe<GetPrometheusDataResult>;
  getUserRealm?: Maybe<Scalars['String']>;
  getUserToken?: Maybe<UserTokenResponse>;
  refreshToken?: Maybe<Scalars['String']>;
  refreshTokenRealm?: Maybe<Scalars['String']>;
  validateUserToken?: Maybe<ValidateTokenResponse>;
  getUserProfile?: Maybe<UserProfile>;
  logout?: Maybe<Scalars['String']>;
  userInfo?: Maybe<Scalars['String']>;
  userRealm?: Maybe<Scalars['String']>;
  userRealmInfo?: Maybe<Scalars['String']>;
  userRole?: Maybe<Scalars['String']>;
  userRoleInfo?: Maybe<Scalars['String']>;
  /** Reads a single `FileUpload` using its globally unique `ID`. */
  fileUploadByNodeId?: Maybe<FileUpload>;
  /** Reads a single `SurveyFormUpdate` using its globally unique `ID`. */
  surveyFormUpdateByNodeId?: Maybe<SurveyFormUpdate>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileUploadsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FileUploadsOrderBy>>;
  condition?: Maybe<FileUploadCondition>;
  filter?: Maybe<FileUploadFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFileUploadsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<FileUploadsOrderBy>>;
  condition?: Maybe<FileUploadCondition>;
  filter?: Maybe<FileUploadFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignToMraMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<AssignToMraMasterV1sOrderBy>>;
  condition?: Maybe<AssignToMraMasterV1Condition>;
  filter?: Maybe<AssignToMraMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignToMraMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AssignToMraMasterV1sOrderBy>>;
  condition?: Maybe<AssignToMraMasterV1Condition>;
  filter?: Maybe<AssignToMraMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDependentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DependentsOrderBy>>;
  condition?: Maybe<DependentCondition>;
  filter?: Maybe<DependentFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDependentsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<DependentsOrderBy>>;
  condition?: Maybe<DependentCondition>;
  filter?: Maybe<DependentFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDependentListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DependentListsOrderBy>>;
  condition?: Maybe<DependentListCondition>;
  filter?: Maybe<DependentListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDependentListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<DependentListsOrderBy>>;
  condition?: Maybe<DependentListCondition>;
  filter?: Maybe<DependentListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEthnicityMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<EthnicityMasterV1sOrderBy>>;
  condition?: Maybe<EthnicityMasterV1Condition>;
  filter?: Maybe<EthnicityMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEthnicityMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<EthnicityMasterV1sOrderBy>>;
  condition?: Maybe<EthnicityMasterV1Condition>;
  filter?: Maybe<EthnicityMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGenderMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GenderMasterV1sOrderBy>>;
  condition?: Maybe<GenderMasterV1Condition>;
  filter?: Maybe<GenderMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGenderMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GenderMasterV1sOrderBy>>;
  condition?: Maybe<GenderMasterV1Condition>;
  filter?: Maybe<GenderMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLoggedPersonIdsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<LoggedPersonIdsOrderBy>>;
  condition?: Maybe<LoggedPersonIdCondition>;
  filter?: Maybe<LoggedPersonIdFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLoggedPersonIdsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<LoggedPersonIdsOrderBy>>;
  condition?: Maybe<LoggedPersonIdCondition>;
  filter?: Maybe<LoggedPersonIdFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMaritalStatusMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MaritalStatusMasterV1sOrderBy>>;
  condition?: Maybe<MaritalStatusMasterV1Condition>;
  filter?: Maybe<MaritalStatusMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMaritalStatusMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MaritalStatusMasterV1sOrderBy>>;
  condition?: Maybe<MaritalStatusMasterV1Condition>;
  filter?: Maybe<MaritalStatusMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOccupationIndustryMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OccupationIndustryMasterV1sOrderBy>>;
  condition?: Maybe<OccupationIndustryMasterV1Condition>;
  filter?: Maybe<OccupationIndustryMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOccupationIndustryMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OccupationIndustryMasterV1sOrderBy>>;
  condition?: Maybe<OccupationIndustryMasterV1Condition>;
  filter?: Maybe<OccupationIndustryMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganizationDetailsOrderBy>>;
  condition?: Maybe<OrganizationDetailCondition>;
  filter?: Maybe<OrganizationDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OrganizationDetailsOrderBy>>;
  condition?: Maybe<OrganizationDetailCondition>;
  filter?: Maybe<OrganizationDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationGroupMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganizationGroupMasterV1sOrderBy>>;
  condition?: Maybe<OrganizationGroupMasterV1Condition>;
  filter?: Maybe<OrganizationGroupMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationGroupMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OrganizationGroupMasterV1sOrderBy>>;
  condition?: Maybe<OrganizationGroupMasterV1Condition>;
  filter?: Maybe<OrganizationGroupMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganizationMastersOrderBy>>;
  condition?: Maybe<OrganizationMasterCondition>;
  filter?: Maybe<OrganizationMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OrganizationMastersOrderBy>>;
  condition?: Maybe<OrganizationMasterCondition>;
  filter?: Maybe<OrganizationMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganizationMasterV1sOrderBy>>;
  condition?: Maybe<OrganizationMasterV1Condition>;
  filter?: Maybe<OrganizationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OrganizationMasterV1sOrderBy>>;
  condition?: Maybe<OrganizationMasterV1Condition>;
  filter?: Maybe<OrganizationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMasterV2sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganizationMasterV2sOrderBy>>;
  condition?: Maybe<OrganizationMasterV2Condition>;
  filter?: Maybe<OrganizationMasterV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMasterV2sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OrganizationMasterV2sOrderBy>>;
  condition?: Maybe<OrganizationMasterV2Condition>;
  filter?: Maybe<OrganizationMasterV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDemographicsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientDemographicsOrderBy>>;
  condition?: Maybe<PatientDemographicCondition>;
  filter?: Maybe<PatientDemographicFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDemographicsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientDemographicsOrderBy>>;
  condition?: Maybe<PatientDemographicCondition>;
  filter?: Maybe<PatientDemographicFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDemographicsV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientDemographicsV1sOrderBy>>;
  condition?: Maybe<PatientDemographicsV1Condition>;
  filter?: Maybe<PatientDemographicsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDemographicsV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientDemographicsV1sOrderBy>>;
  condition?: Maybe<PatientDemographicsV1Condition>;
  filter?: Maybe<PatientDemographicsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDescriptionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientDescriptionsOrderBy>>;
  condition?: Maybe<PatientDescriptionCondition>;
  filter?: Maybe<PatientDescriptionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientDescriptionsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientDescriptionsOrderBy>>;
  condition?: Maybe<PatientDescriptionCondition>;
  filter?: Maybe<PatientDescriptionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientListsOrderBy>>;
  condition?: Maybe<PatientListCondition>;
  filter?: Maybe<PatientListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientListsOrderBy>>;
  condition?: Maybe<PatientListCondition>;
  filter?: Maybe<PatientListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientProfilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientProfilesOrderBy>>;
  condition?: Maybe<PatientProfileCondition>;
  filter?: Maybe<PatientProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientProfilesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientProfilesOrderBy>>;
  condition?: Maybe<PatientProfileCondition>;
  filter?: Maybe<PatientProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientProfileV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientProfileV1sOrderBy>>;
  condition?: Maybe<PatientProfileV1Condition>;
  filter?: Maybe<PatientProfileV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientProfileV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientProfileV1sOrderBy>>;
  condition?: Maybe<PatientProfileV1Condition>;
  filter?: Maybe<PatientProfileV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDemographicsDetailsV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonDemographicsDetailsV1sOrderBy>>;
  condition?: Maybe<PersonDemographicsDetailsV1Condition>;
  filter?: Maybe<PersonDemographicsDetailsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDemographicsDetailsV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonDemographicsDetailsV1sOrderBy>>;
  condition?: Maybe<PersonDemographicsDetailsV1Condition>;
  filter?: Maybe<PersonDemographicsDetailsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDemographicsDetailsV2sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonDemographicsDetailsV2sOrderBy>>;
  condition?: Maybe<PersonDemographicsDetailsV2Condition>;
  filter?: Maybe<PersonDemographicsDetailsV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDemographicsDetailsV2sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonDemographicsDetailsV2sOrderBy>>;
  condition?: Maybe<PersonDemographicsDetailsV2Condition>;
  filter?: Maybe<PersonDemographicsDetailsV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonDetailsOrderBy>>;
  condition?: Maybe<PersonDetailCondition>;
  filter?: Maybe<PersonDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonDetailsOrderBy>>;
  condition?: Maybe<PersonDetailCondition>;
  filter?: Maybe<PersonDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDetailsEmailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonDetailsEmailsOrderBy>>;
  condition?: Maybe<PersonDetailsEmailCondition>;
  filter?: Maybe<PersonDetailsEmailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonDetailsEmailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonDetailsEmailsOrderBy>>;
  condition?: Maybe<PersonDetailsEmailCondition>;
  filter?: Maybe<PersonDetailsEmailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonProfilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonProfilesOrderBy>>;
  condition?: Maybe<PersonProfileCondition>;
  filter?: Maybe<PersonProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonProfilesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonProfilesOrderBy>>;
  condition?: Maybe<PersonProfileCondition>;
  filter?: Maybe<PersonProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonStatusesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PersonStatusesOrderBy>>;
  condition?: Maybe<PersonStatusCondition>;
  filter?: Maybe<PersonStatusFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPersonStatusesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PersonStatusesOrderBy>>;
  condition?: Maybe<PersonStatusCondition>;
  filter?: Maybe<PersonStatusFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPreferredLanguageMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PreferredLanguageMasterV1sOrderBy>>;
  condition?: Maybe<PreferredLanguageMasterV1Condition>;
  filter?: Maybe<PreferredLanguageMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPreferredLanguageMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PreferredLanguageMasterV1sOrderBy>>;
  condition?: Maybe<PreferredLanguageMasterV1Condition>;
  filter?: Maybe<PreferredLanguageMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRaceMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RaceMasterV1sOrderBy>>;
  condition?: Maybe<RaceMasterV1Condition>;
  filter?: Maybe<RaceMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRaceMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RaceMasterV1sOrderBy>>;
  condition?: Maybe<RaceMasterV1Condition>;
  filter?: Maybe<RaceMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelatedPersonRelationshipMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RelatedPersonRelationshipMastersOrderBy>>;
  condition?: Maybe<RelatedPersonRelationshipMasterCondition>;
  filter?: Maybe<RelatedPersonRelationshipMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelatedPersonRelationshipMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RelatedPersonRelationshipMastersOrderBy>>;
  condition?: Maybe<RelatedPersonRelationshipMasterCondition>;
  filter?: Maybe<RelatedPersonRelationshipMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySexMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SexMasterV1sOrderBy>>;
  condition?: Maybe<SexMasterV1Condition>;
  filter?: Maybe<SexMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySexMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SexMasterV1sOrderBy>>;
  condition?: Maybe<SexMasterV1Condition>;
  filter?: Maybe<SexMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySexualOrientationMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SexualOrientationMasterV1sOrderBy>>;
  condition?: Maybe<SexualOrientationMasterV1Condition>;
  filter?: Maybe<SexualOrientationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySexualOrientationMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SexualOrientationMasterV1sOrderBy>>;
  condition?: Maybe<SexualOrientationMasterV1Condition>;
  filter?: Maybe<SexualOrientationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStatusMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<StatusMastersOrderBy>>;
  condition?: Maybe<StatusMasterCondition>;
  filter?: Maybe<StatusMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStatusMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<StatusMastersOrderBy>>;
  condition?: Maybe<StatusMasterCondition>;
  filter?: Maybe<StatusMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAddendumDoctorsDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<AddendumDoctorsDetailsOrderBy>>;
  condition?: Maybe<AddendumDoctorsDetailCondition>;
  filter?: Maybe<AddendumDoctorsDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAddendumDoctorsDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AddendumDoctorsDetailsOrderBy>>;
  condition?: Maybe<AddendumDoctorsDetailCondition>;
  filter?: Maybe<AddendumDoctorsDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllRequestDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<AllRequestDetailsOrderBy>>;
  condition?: Maybe<AllRequestDetailCondition>;
  filter?: Maybe<AllRequestDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllRequestDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<AllRequestDetailsOrderBy>>;
  condition?: Maybe<AllRequestDetailCondition>;
  filter?: Maybe<AllRequestDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestCategoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<BillingRequestCategoriesOrderBy>>;
  condition?: Maybe<BillingRequestCategoryCondition>;
  filter?: Maybe<BillingRequestCategoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestCategoriesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<BillingRequestCategoriesOrderBy>>;
  condition?: Maybe<BillingRequestCategoryCondition>;
  filter?: Maybe<BillingRequestCategoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestCategoryMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<BillingRequestCategoryMastersOrderBy>>;
  condition?: Maybe<BillingRequestCategoryMasterCondition>;
  filter?: Maybe<BillingRequestCategoryMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestCategoryMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<BillingRequestCategoryMastersOrderBy>>;
  condition?: Maybe<BillingRequestCategoryMasterCondition>;
  filter?: Maybe<BillingRequestCategoryMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestTypeMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<BillingRequestTypeMastersOrderBy>>;
  condition?: Maybe<BillingRequestTypeMasterCondition>;
  filter?: Maybe<BillingRequestTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryBillingRequestTypeMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<BillingRequestTypeMastersOrderBy>>;
  condition?: Maybe<BillingRequestTypeMasterCondition>;
  filter?: Maybe<BillingRequestTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCommunicationRequestMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<CommunicationRequestMastersOrderBy>>;
  condition?: Maybe<CommunicationRequestMasterCondition>;
  filter?: Maybe<CommunicationRequestMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCommunicationRequestMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CommunicationRequestMastersOrderBy>>;
  condition?: Maybe<CommunicationRequestMasterCondition>;
  filter?: Maybe<CommunicationRequestMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCommunicationRequestMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<CommunicationRequestMasterV1sOrderBy>>;
  condition?: Maybe<CommunicationRequestMasterV1Condition>;
  filter?: Maybe<CommunicationRequestMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCommunicationRequestMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CommunicationRequestMasterV1sOrderBy>>;
  condition?: Maybe<CommunicationRequestMasterV1Condition>;
  filter?: Maybe<CommunicationRequestMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCountryMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<CountryMasterV1sOrderBy>>;
  condition?: Maybe<CountryMasterV1Condition>;
  filter?: Maybe<CountryMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCountryMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CountryMasterV1sOrderBy>>;
  condition?: Maybe<CountryMasterV1Condition>;
  filter?: Maybe<CountryMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDenialFormV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DenialFormV1sOrderBy>>;
  condition?: Maybe<DenialFormV1Condition>;
  filter?: Maybe<DenialFormV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDenialFormV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<DenialFormV1sOrderBy>>;
  condition?: Maybe<DenialFormV1Condition>;
  filter?: Maybe<DenialFormV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDenialLetterReasonMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DenialLetterReasonMastersOrderBy>>;
  condition?: Maybe<DenialLetterReasonMasterCondition>;
  filter?: Maybe<DenialLetterReasonMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDenialLetterReasonMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<DenialLetterReasonMastersOrderBy>>;
  condition?: Maybe<DenialLetterReasonMasterCondition>;
  filter?: Maybe<DenialLetterReasonMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDepartmentHeadMasterDetailsV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DepartmentHeadMasterDetailsV1sOrderBy>>;
  condition?: Maybe<DepartmentHeadMasterDetailsV1Condition>;
  filter?: Maybe<DepartmentHeadMasterDetailsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDepartmentHeadMasterDetailsV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<DepartmentHeadMasterDetailsV1sOrderBy>>;
  condition?: Maybe<DepartmentHeadMasterDetailsV1Condition>;
  filter?: Maybe<DepartmentHeadMasterDetailsV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFeedbackDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FeedbackDetailsOrderBy>>;
  condition?: Maybe<FeedbackDetailCondition>;
  filter?: Maybe<FeedbackDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFeedbackDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<FeedbackDetailsOrderBy>>;
  condition?: Maybe<FeedbackDetailCondition>;
  filter?: Maybe<FeedbackDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFeedbackQueryTypeMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FeedbackQueryTypeMastersOrderBy>>;
  condition?: Maybe<FeedbackQueryTypeMasterCondition>;
  filter?: Maybe<FeedbackQueryTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFeedbackQueryTypeMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<FeedbackQueryTypeMastersOrderBy>>;
  condition?: Maybe<FeedbackQueryTypeMasterCondition>;
  filter?: Maybe<FeedbackQueryTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetChatroomDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GetChatroomDetailsOrderBy>>;
  condition?: Maybe<GetChatroomDetailCondition>;
  filter?: Maybe<GetChatroomDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetChatroomDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GetChatroomDetailsOrderBy>>;
  condition?: Maybe<GetChatroomDetailCondition>;
  filter?: Maybe<GetChatroomDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthAuthAuthorizationTitleMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthAuthAuthorizationTitleMastersOrderBy>>;
  condition?: Maybe<HealthAuthAuthorizationTitleMasterCondition>;
  filter?: Maybe<HealthAuthAuthorizationTitleMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthAuthAuthorizationTitleMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthAuthAuthorizationTitleMastersOrderBy>>;
  condition?: Maybe<HealthAuthAuthorizationTitleMasterCondition>;
  filter?: Maybe<HealthAuthAuthorizationTitleMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthInfoAuthorizationV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthInfoAuthorizationV1sOrderBy>>;
  condition?: Maybe<HealthInfoAuthorizationV1Condition>;
  filter?: Maybe<HealthInfoAuthorizationV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthInfoAuthorizationV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthInfoAuthorizationV1sOrderBy>>;
  condition?: Maybe<HealthInfoAuthorizationV1Condition>;
  filter?: Maybe<HealthInfoAuthorizationV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthInfoAuthorizationV2sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthInfoAuthorizationV2sOrderBy>>;
  condition?: Maybe<HealthInfoAuthorizationV2Condition>;
  filter?: Maybe<HealthInfoAuthorizationV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthInfoAuthorizationV2sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthInfoAuthorizationV2sOrderBy>>;
  condition?: Maybe<HealthInfoAuthorizationV2Condition>;
  filter?: Maybe<HealthInfoAuthorizationV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryImpactSeverityMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ImpactSeverityMastersOrderBy>>;
  condition?: Maybe<ImpactSeverityMasterCondition>;
  filter?: Maybe<ImpactSeverityMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryImpactSeverityMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ImpactSeverityMastersOrderBy>>;
  condition?: Maybe<ImpactSeverityMasterCondition>;
  filter?: Maybe<ImpactSeverityMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInformationBlockingExceptionsMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InformationBlockingExceptionsMastersOrderBy>>;
  condition?: Maybe<InformationBlockingExceptionsMasterCondition>;
  filter?: Maybe<InformationBlockingExceptionsMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInformationBlockingExceptionsMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InformationBlockingExceptionsMastersOrderBy>>;
  condition?: Maybe<InformationBlockingExceptionsMasterCondition>;
  filter?: Maybe<InformationBlockingExceptionsMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionsOrderBy>>;
  condition?: Maybe<InstitutionCondition>;
  filter?: Maybe<InstitutionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionsOrderBy>>;
  condition?: Maybe<InstitutionCondition>;
  filter?: Maybe<InstitutionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIntegrationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<IntegrationsOrderBy>>;
  condition?: Maybe<IntegrationCondition>;
  filter?: Maybe<IntegrationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIntegrationsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<IntegrationsOrderBy>>;
  condition?: Maybe<IntegrationCondition>;
  filter?: Maybe<IntegrationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueDescriptionMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<IssueDescriptionMastersOrderBy>>;
  condition?: Maybe<IssueDescriptionMasterCondition>;
  filter?: Maybe<IssueDescriptionMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueDescriptionMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<IssueDescriptionMastersOrderBy>>;
  condition?: Maybe<IssueDescriptionMasterCondition>;
  filter?: Maybe<IssueDescriptionMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueDescriptionMastersMedicalsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<IssueDescriptionMastersMedicalsOrderBy>>;
  condition?: Maybe<IssueDescriptionMastersMedicalCondition>;
  filter?: Maybe<IssueDescriptionMastersMedicalFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueDescriptionMastersMedicalsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<IssueDescriptionMastersMedicalsOrderBy>>;
  condition?: Maybe<IssueDescriptionMastersMedicalCondition>;
  filter?: Maybe<IssueDescriptionMastersMedicalFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueImpactMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<IssueImpactMastersOrderBy>>;
  condition?: Maybe<IssueImpactMasterCondition>;
  filter?: Maybe<IssueImpactMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIssueImpactMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<IssueImpactMastersOrderBy>>;
  condition?: Maybe<IssueImpactMasterCondition>;
  filter?: Maybe<IssueImpactMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJourneyMetricsCurrentWeeksArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<JourneyMetricsCurrentWeeksOrderBy>>;
  condition?: Maybe<JourneyMetricsCurrentWeekCondition>;
  filter?: Maybe<JourneyMetricsCurrentWeekFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJourneyMetricsCurrentWeeksListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<JourneyMetricsCurrentWeeksOrderBy>>;
  condition?: Maybe<JourneyMetricsCurrentWeekCondition>;
  filter?: Maybe<JourneyMetricsCurrentWeekFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedicalAddendumInsuranceRequestsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedicalAddendumInsuranceRequestsOrderBy>>;
  condition?: Maybe<MedicalAddendumInsuranceRequestCondition>;
  filter?: Maybe<MedicalAddendumInsuranceRequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedicalAddendumInsuranceRequestsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedicalAddendumInsuranceRequestsOrderBy>>;
  condition?: Maybe<MedicalAddendumInsuranceRequestCondition>;
  filter?: Maybe<MedicalAddendumInsuranceRequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewAllsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MetricsViewAllsOrderBy>>;
  condition?: Maybe<MetricsViewAllCondition>;
  filter?: Maybe<MetricsViewAllFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewAllsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MetricsViewAllsOrderBy>>;
  condition?: Maybe<MetricsViewAllCondition>;
  filter?: Maybe<MetricsViewAllFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewCurrentWeeksArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MetricsViewCurrentWeeksOrderBy>>;
  condition?: Maybe<MetricsViewCurrentWeekCondition>;
  filter?: Maybe<MetricsViewCurrentWeekFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewCurrentWeeksListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MetricsViewCurrentWeeksOrderBy>>;
  condition?: Maybe<MetricsViewCurrentWeekCondition>;
  filter?: Maybe<MetricsViewCurrentWeekFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewCurrentWeekV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MetricsViewCurrentWeekV1sOrderBy>>;
  condition?: Maybe<MetricsViewCurrentWeekV1Condition>;
  filter?: Maybe<MetricsViewCurrentWeekV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMetricsViewCurrentWeekV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MetricsViewCurrentWeekV1sOrderBy>>;
  condition?: Maybe<MetricsViewCurrentWeekV1Condition>;
  filter?: Maybe<MetricsViewCurrentWeekV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMyRequestsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MyRequestsOrderBy>>;
  condition?: Maybe<MyRequestCondition>;
  filter?: Maybe<MyRequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMyRequestsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MyRequestsOrderBy>>;
  condition?: Maybe<MyRequestCondition>;
  filter?: Maybe<MyRequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationListsOrderBy>>;
  condition?: Maybe<NotificationListCondition>;
  filter?: Maybe<NotificationListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<NotificationListsOrderBy>>;
  condition?: Maybe<NotificationListCondition>;
  filter?: Maybe<NotificationListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationListV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationListV1sOrderBy>>;
  condition?: Maybe<NotificationListV1Condition>;
  filter?: Maybe<NotificationListV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationListV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<NotificationListV1sOrderBy>>;
  condition?: Maybe<NotificationListV1Condition>;
  filter?: Maybe<NotificationListV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainRecordTypeMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ObtainRecordTypeMastersOrderBy>>;
  condition?: Maybe<ObtainRecordTypeMasterCondition>;
  filter?: Maybe<ObtainRecordTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainRecordTypeMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ObtainRecordTypeMastersOrderBy>>;
  condition?: Maybe<ObtainRecordTypeMasterCondition>;
  filter?: Maybe<ObtainRecordTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainTypeMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ObtainTypeMastersOrderBy>>;
  condition?: Maybe<ObtainTypeMasterCondition>;
  filter?: Maybe<ObtainTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainTypeMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ObtainTypeMastersOrderBy>>;
  condition?: Maybe<ObtainTypeMasterCondition>;
  filter?: Maybe<ObtainTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainTypeMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ObtainTypeMasterV1sOrderBy>>;
  condition?: Maybe<ObtainTypeMasterV1Condition>;
  filter?: Maybe<ObtainTypeMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryObtainTypeMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ObtainTypeMasterV1sOrderBy>>;
  condition?: Maybe<ObtainTypeMasterV1Condition>;
  filter?: Maybe<ObtainTypeMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientExternalDocumentListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PatientExternalDocumentListsOrderBy>>;
  condition?: Maybe<PatientExternalDocumentListCondition>;
  filter?: Maybe<PatientExternalDocumentListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPatientExternalDocumentListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PatientExternalDocumentListsOrderBy>>;
  condition?: Maybe<PatientExternalDocumentListCondition>;
  filter?: Maybe<PatientExternalDocumentListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPreferredPronounsMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PreferredPronounsMastersOrderBy>>;
  condition?: Maybe<PreferredPronounsMasterCondition>;
  filter?: Maybe<PreferredPronounsMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPreferredPronounsMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<PreferredPronounsMastersOrderBy>>;
  condition?: Maybe<PreferredPronounsMasterCondition>;
  filter?: Maybe<PreferredPronounsMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelationshipTypesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RelationshipTypesOrderBy>>;
  condition?: Maybe<RelationshipTypeCondition>;
  filter?: Maybe<RelationshipTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelationshipTypesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RelationshipTypesOrderBy>>;
  condition?: Maybe<RelationshipTypeCondition>;
  filter?: Maybe<RelationshipTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReminderNotificationDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReminderNotificationDetailsOrderBy>>;
  condition?: Maybe<ReminderNotificationDetailCondition>;
  filter?: Maybe<ReminderNotificationDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReminderNotificationDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ReminderNotificationDetailsOrderBy>>;
  condition?: Maybe<ReminderNotificationDetailCondition>;
  filter?: Maybe<ReminderNotificationDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestsOrderBy>>;
  condition?: Maybe<RequestCondition>;
  filter?: Maybe<RequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestsOrderBy>>;
  condition?: Maybe<RequestCondition>;
  filter?: Maybe<RequestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestContactDetailsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestContactDetailsOrderBy>>;
  condition?: Maybe<RequestContactDetailCondition>;
  filter?: Maybe<RequestContactDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestContactDetailsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestContactDetailsOrderBy>>;
  condition?: Maybe<RequestContactDetailCondition>;
  filter?: Maybe<RequestContactDetailFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestLogMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestLogMastersOrderBy>>;
  condition?: Maybe<RequestLogMasterCondition>;
  filter?: Maybe<RequestLogMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestLogMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestLogMastersOrderBy>>;
  condition?: Maybe<RequestLogMasterCondition>;
  filter?: Maybe<RequestLogMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestLogMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestLogMasterV1sOrderBy>>;
  condition?: Maybe<RequestLogMasterV1Condition>;
  filter?: Maybe<RequestLogMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestLogMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestLogMasterV1sOrderBy>>;
  condition?: Maybe<RequestLogMasterV1Condition>;
  filter?: Maybe<RequestLogMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestObtainRecordTypesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestObtainRecordTypesOrderBy>>;
  condition?: Maybe<RequestObtainRecordTypeCondition>;
  filter?: Maybe<RequestObtainRecordTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestObtainRecordTypesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestObtainRecordTypesOrderBy>>;
  condition?: Maybe<RequestObtainRecordTypeCondition>;
  filter?: Maybe<RequestObtainRecordTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPatientViewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPatientViewsOrderBy>>;
  condition?: Maybe<RequestPatientViewCondition>;
  filter?: Maybe<RequestPatientViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPatientViewsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPatientViewsOrderBy>>;
  condition?: Maybe<RequestPatientViewCondition>;
  filter?: Maybe<RequestPatientViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPpaMraViewsOrderBy>>;
  condition?: Maybe<RequestPpaMraViewCondition>;
  filter?: Maybe<RequestPpaMraViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPpaMraViewsOrderBy>>;
  condition?: Maybe<RequestPpaMraViewCondition>;
  filter?: Maybe<RequestPpaMraViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV1sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV1Condition>;
  filter?: Maybe<RequestPpaMraViewV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV1sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV1Condition>;
  filter?: Maybe<RequestPpaMraViewV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV2sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV2sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV2Condition>;
  filter?: Maybe<RequestPpaMraViewV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV2sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV2sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV2Condition>;
  filter?: Maybe<RequestPpaMraViewV2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV3sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV3sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV3Condition>;
  filter?: Maybe<RequestPpaMraViewV3Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV3sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV3sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV3Condition>;
  filter?: Maybe<RequestPpaMraViewV3Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV4sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV4sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV4Condition>;
  filter?: Maybe<RequestPpaMraViewV4Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPpaMraViewV4sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPpaMraViewV4sOrderBy>>;
  condition?: Maybe<RequestPpaMraViewV4Condition>;
  filter?: Maybe<RequestPpaMraViewV4Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPriorityMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestPriorityMastersOrderBy>>;
  condition?: Maybe<RequestPriorityMasterCondition>;
  filter?: Maybe<RequestPriorityMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestPriorityMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestPriorityMastersOrderBy>>;
  condition?: Maybe<RequestPriorityMasterCondition>;
  filter?: Maybe<RequestPriorityMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestResponsesOrderBy>>;
  condition?: Maybe<RequestResponseCondition>;
  filter?: Maybe<RequestResponseFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestResponsesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestResponsesOrderBy>>;
  condition?: Maybe<RequestResponseCondition>;
  filter?: Maybe<RequestResponseFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestStatusMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestStatusMastersOrderBy>>;
  condition?: Maybe<RequestStatusMasterCondition>;
  filter?: Maybe<RequestStatusMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestStatusMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestStatusMastersOrderBy>>;
  condition?: Maybe<RequestStatusMasterCondition>;
  filter?: Maybe<RequestStatusMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTokensArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestTokensOrderBy>>;
  condition?: Maybe<RequestTokenCondition>;
  filter?: Maybe<RequestTokenFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTokensListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestTokensOrderBy>>;
  condition?: Maybe<RequestTokenCondition>;
  filter?: Maybe<RequestTokenFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTokenV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestTokenV1sOrderBy>>;
  condition?: Maybe<RequestTokenV1Condition>;
  filter?: Maybe<RequestTokenV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTokenV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestTokenV1sOrderBy>>;
  condition?: Maybe<RequestTokenV1Condition>;
  filter?: Maybe<RequestTokenV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTypeMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestTypeMastersOrderBy>>;
  condition?: Maybe<RequestTypeMasterCondition>;
  filter?: Maybe<RequestTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestTypeMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestTypeMastersOrderBy>>;
  condition?: Maybe<RequestTypeMasterCondition>;
  filter?: Maybe<RequestTypeMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestsOnBehalvesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RequestsOnBehalvesOrderBy>>;
  condition?: Maybe<RequestsOnBehalfCondition>;
  filter?: Maybe<RequestsOnBehalfFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRequestsOnBehalvesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RequestsOnBehalvesOrderBy>>;
  condition?: Maybe<RequestsOnBehalfCondition>;
  filter?: Maybe<RequestsOnBehalfFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryServiceCategoryMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ServiceCategoryMastersOrderBy>>;
  condition?: Maybe<ServiceCategoryMasterCondition>;
  filter?: Maybe<ServiceCategoryMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryServiceCategoryMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ServiceCategoryMastersOrderBy>>;
  condition?: Maybe<ServiceCategoryMasterCondition>;
  filter?: Maybe<ServiceCategoryMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceNatureMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SourceNatureMastersOrderBy>>;
  condition?: Maybe<SourceNatureMasterCondition>;
  filter?: Maybe<SourceNatureMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySourceNatureMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SourceNatureMastersOrderBy>>;
  condition?: Maybe<SourceNatureMasterCondition>;
  filter?: Maybe<SourceNatureMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStateMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<StateMasterV1sOrderBy>>;
  condition?: Maybe<StateMasterV1Condition>;
  filter?: Maybe<StateMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStateMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<StateMasterV1sOrderBy>>;
  condition?: Maybe<StateMasterV1Condition>;
  filter?: Maybe<StateMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubstanceDisorderAuthorizationV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SubstanceDisorderAuthorizationV1sOrderBy>>;
  condition?: Maybe<SubstanceDisorderAuthorizationV1Condition>;
  filter?: Maybe<SubstanceDisorderAuthorizationV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubstanceDisorderAuthorizationV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SubstanceDisorderAuthorizationV1sOrderBy>>;
  condition?: Maybe<SubstanceDisorderAuthorizationV1Condition>;
  filter?: Maybe<SubstanceDisorderAuthorizationV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubstanceDisorderInformationMasterV1sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SubstanceDisorderInformationMasterV1sOrderBy>>;
  condition?: Maybe<SubstanceDisorderInformationMasterV1Condition>;
  filter?: Maybe<SubstanceDisorderInformationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubstanceDisorderInformationMasterV1sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SubstanceDisorderInformationMasterV1sOrderBy>>;
  condition?: Maybe<SubstanceDisorderInformationMasterV1Condition>;
  filter?: Maybe<SubstanceDisorderInformationMasterV1Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUseDisorderAuthorizationTitleMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UseDisorderAuthorizationTitleMastersOrderBy>>;
  condition?: Maybe<UseDisorderAuthorizationTitleMasterCondition>;
  filter?: Maybe<UseDisorderAuthorizationTitleMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUseDisorderAuthorizationTitleMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UseDisorderAuthorizationTitleMastersOrderBy>>;
  condition?: Maybe<UseDisorderAuthorizationTitleMasterCondition>;
  filter?: Maybe<UseDisorderAuthorizationTitleMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserGroupMastersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserGroupMastersOrderBy>>;
  condition?: Maybe<UserGroupMasterCondition>;
  filter?: Maybe<UserGroupMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserGroupMastersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserGroupMastersOrderBy>>;
  condition?: Maybe<UserGroupMasterCondition>;
  filter?: Maybe<UserGroupMasterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserInviteListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserInviteListsOrderBy>>;
  condition?: Maybe<UserInviteListCondition>;
  filter?: Maybe<UserInviteListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserInviteListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserInviteListsOrderBy>>;
  condition?: Maybe<UserInviteListCondition>;
  filter?: Maybe<UserInviteListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserKeycloakEventLogsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserKeycloakEventLogsOrderBy>>;
  condition?: Maybe<UserKeycloakEventLogCondition>;
  filter?: Maybe<UserKeycloakEventLogFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserKeycloakEventLogsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserKeycloakEventLogsOrderBy>>;
  condition?: Maybe<UserKeycloakEventLogCondition>;
  filter?: Maybe<UserKeycloakEventLogFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserMedicalRecordsDataArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserMedicalRecordsDataOrderBy>>;
  condition?: Maybe<UserMedicalRecordsDatumCondition>;
  filter?: Maybe<UserMedicalRecordsDatumFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserMedicalRecordsDataListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<UserMedicalRecordsDataOrderBy>>;
  condition?: Maybe<UserMedicalRecordsDatumCondition>;
  filter?: Maybe<UserMedicalRecordsDatumFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
  condition?: Maybe<MediaTypeCondition>;
  filter?: Maybe<MediaTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
  condition?: Maybe<MediaTypeCondition>;
  filter?: Maybe<MediaTypeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionAliasesListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionAliasesListsOrderBy>>;
  condition?: Maybe<InstitutionAliasesListCondition>;
  filter?: Maybe<InstitutionAliasesListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionAliasesListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionAliasesListsOrderBy>>;
  condition?: Maybe<InstitutionAliasesListCondition>;
  filter?: Maybe<InstitutionAliasesListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionAssetsProjectsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionAssetsProjectsOrderBy>>;
  condition?: Maybe<InstitutionAssetsProjectCondition>;
  filter?: Maybe<InstitutionAssetsProjectFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionAssetsProjectsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionAssetsProjectsOrderBy>>;
  condition?: Maybe<InstitutionAssetsProjectCondition>;
  filter?: Maybe<InstitutionAssetsProjectFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionBrokenUrlListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionBrokenUrlListsOrderBy>>;
  condition?: Maybe<InstitutionBrokenUrlListCondition>;
  filter?: Maybe<InstitutionBrokenUrlListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionBrokenUrlListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionBrokenUrlListsOrderBy>>;
  condition?: Maybe<InstitutionBrokenUrlListCondition>;
  filter?: Maybe<InstitutionBrokenUrlListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionMergePendingListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionMergePendingListsOrderBy>>;
  condition?: Maybe<InstitutionMergePendingListCondition>;
  filter?: Maybe<InstitutionMergePendingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionMergePendingListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionMergePendingListsOrderBy>>;
  condition?: Maybe<InstitutionMergePendingListCondition>;
  filter?: Maybe<InstitutionMergePendingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionProfileJune20213sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionProfileJune20213sOrderBy>>;
  condition?: Maybe<InstitutionProfileJune20213Condition>;
  filter?: Maybe<InstitutionProfileJune20213Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionProfileJune20213sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionProfileJune20213sOrderBy>>;
  condition?: Maybe<InstitutionProfileJune20213Condition>;
  filter?: Maybe<InstitutionProfileJune20213Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionProfileSearchesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<InstitutionProfileSearchesOrderBy>>;
  condition?: Maybe<InstitutionProfileSearchCondition>;
  filter?: Maybe<InstitutionProfileSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryInstitutionProfileSearchesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<InstitutionProfileSearchesOrderBy>>;
  condition?: Maybe<InstitutionProfileSearchCondition>;
  filter?: Maybe<InstitutionProfileSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyInstitutionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyInstitutionsOrderBy>>;
  condition?: Maybe<MedigyInstitutionCondition>;
  filter?: Maybe<MedigyInstitutionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyInstitutionsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyInstitutionsOrderBy>>;
  condition?: Maybe<MedigyInstitutionCondition>;
  filter?: Maybe<MedigyInstitutionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyInstitutionImagesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyInstitutionImagesOrderBy>>;
  condition?: Maybe<MedigyInstitutionImageCondition>;
  filter?: Maybe<MedigyInstitutionImageFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyInstitutionImagesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyInstitutionImagesOrderBy>>;
  condition?: Maybe<MedigyInstitutionImageCondition>;
  filter?: Maybe<MedigyInstitutionImageFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyNamespacesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyNamespacesOrderBy>>;
  condition?: Maybe<MedigyNamespaceCondition>;
  filter?: Maybe<MedigyNamespaceFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyNamespacesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyNamespacesOrderBy>>;
  condition?: Maybe<MedigyNamespaceCondition>;
  filter?: Maybe<MedigyNamespaceFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApprovedOfferingListWithCommitMsgsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApprovedOfferingListWithCommitMsgsOrderBy>>;
  condition?: Maybe<ApprovedOfferingListWithCommitMsgCondition>;
  filter?: Maybe<ApprovedOfferingListWithCommitMsgFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApprovedOfferingListWithCommitMsgsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<ApprovedOfferingListWithCommitMsgsOrderBy>>;
  condition?: Maybe<ApprovedOfferingListWithCommitMsgCondition>;
  filter?: Maybe<ApprovedOfferingListWithCommitMsgFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFrostSullivanArtificialIntelligenceOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FrostSullivanArtificialIntelligenceOfferingsOrderBy>>;
  condition?: Maybe<FrostSullivanArtificialIntelligenceOfferingCondition>;
  filter?: Maybe<FrostSullivanArtificialIntelligenceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFrostSullivanArtificialIntelligenceOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<FrostSullivanArtificialIntelligenceOfferingsOrderBy>>;
  condition?: Maybe<FrostSullivanArtificialIntelligenceOfferingCondition>;
  filter?: Maybe<FrostSullivanArtificialIntelligenceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFrostSullivanElectronicHealthRecordsEhrsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FrostSullivanElectronicHealthRecordsEhrsOfferingsOrderBy>>;
  condition?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingCondition>;
  filter?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFrostSullivanElectronicHealthRecordsEhrsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<FrostSullivanElectronicHealthRecordsEhrsOfferingsOrderBy>>;
  condition?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingCondition>;
  filter?: Maybe<FrostSullivanElectronicHealthRecordsEhrsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerDataAnalyticsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GartnerDataAnalyticsOfferingsOrderBy>>;
  condition?: Maybe<GartnerDataAnalyticsOfferingCondition>;
  filter?: Maybe<GartnerDataAnalyticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerDataAnalyticsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GartnerDataAnalyticsOfferingsOrderBy>>;
  condition?: Maybe<GartnerDataAnalyticsOfferingCondition>;
  filter?: Maybe<GartnerDataAnalyticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerPcmPatientCareManagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GartnerPcmPatientCareManagementOfferingsOrderBy>>;
  condition?: Maybe<GartnerPcmPatientCareManagementOfferingCondition>;
  filter?: Maybe<GartnerPcmPatientCareManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerPcmPatientCareManagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GartnerPcmPatientCareManagementOfferingsOrderBy>>;
  condition?: Maybe<GartnerPcmPatientCareManagementOfferingCondition>;
  filter?: Maybe<GartnerPcmPatientCareManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerRemoteDiagnosticsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GartnerRemoteDiagnosticsOfferingsOrderBy>>;
  condition?: Maybe<GartnerRemoteDiagnosticsOfferingCondition>;
  filter?: Maybe<GartnerRemoteDiagnosticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerRemoteDiagnosticsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GartnerRemoteDiagnosticsOfferingsOrderBy>>;
  condition?: Maybe<GartnerRemoteDiagnosticsOfferingCondition>;
  filter?: Maybe<GartnerRemoteDiagnosticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerRoboticProcessAutomationRpaOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GartnerRoboticProcessAutomationRpaOfferingsOrderBy>>;
  condition?: Maybe<GartnerRoboticProcessAutomationRpaOfferingCondition>;
  filter?: Maybe<GartnerRoboticProcessAutomationRpaOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerRoboticProcessAutomationRpaOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GartnerRoboticProcessAutomationRpaOfferingsOrderBy>>;
  condition?: Maybe<GartnerRoboticProcessAutomationRpaOfferingCondition>;
  filter?: Maybe<GartnerRoboticProcessAutomationRpaOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerSupplyChainOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<GartnerSupplyChainOfferingsOrderBy>>;
  condition?: Maybe<GartnerSupplyChainOfferingCondition>;
  filter?: Maybe<GartnerSupplyChainOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGartnerSupplyChainOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<GartnerSupplyChainOfferingsOrderBy>>;
  condition?: Maybe<GartnerSupplyChainOfferingCondition>;
  filter?: Maybe<GartnerSupplyChainOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsAppointmentSchedulingOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsAppointmentSchedulingOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingCondition>;
  filter?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsAppointmentSchedulingOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsAppointmentSchedulingOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingCondition>;
  filter?: Maybe<HealthcareItNewsAppointmentSchedulingOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsCybersecurityOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsCybersecurityOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsCybersecurityOfferingCondition>;
  filter?: Maybe<HealthcareItNewsCybersecurityOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsCybersecurityOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsCybersecurityOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsCybersecurityOfferingCondition>;
  filter?: Maybe<HealthcareItNewsCybersecurityOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsDigitalTransformationOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsDigitalTransformationOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsDigitalTransformationOfferingCondition>;
  filter?: Maybe<HealthcareItNewsDigitalTransformationOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsDigitalTransformationOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsDigitalTransformationOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsDigitalTransformationOfferingCondition>;
  filter?: Maybe<HealthcareItNewsDigitalTransformationOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsHealthInformationTechnologyHitOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsHealthInformationTechnologyHitOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingCondition>;
  filter?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsHealthInformationTechnologyHitOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsHealthInformationTechnologyHitOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingCondition>;
  filter?: Maybe<HealthcareItNewsHealthInformationTechnologyHitOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsImagingTechnologyOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsImagingTechnologyOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsImagingTechnologyOfferingCondition>;
  filter?: Maybe<HealthcareItNewsImagingTechnologyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsImagingTechnologyOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsImagingTechnologyOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsImagingTechnologyOfferingCondition>;
  filter?: Maybe<HealthcareItNewsImagingTechnologyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMachineLearningOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsMachineLearningOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMachineLearningOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMachineLearningOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMachineLearningOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsMachineLearningOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMachineLearningOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMachineLearningOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMergersAcquisitionsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsMergersAcquisitionsOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMergersAcquisitionsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsMergersAcquisitionsOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMergersAcquisitionsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMobileHealthMhealthOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsMobileHealthMhealthOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsMobileHealthMhealthOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsMobileHealthMhealthOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingCondition>;
  filter?: Maybe<HealthcareItNewsMobileHealthMhealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsOncologyOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsOncologyOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsOncologyOfferingCondition>;
  filter?: Maybe<HealthcareItNewsOncologyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsOncologyOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsOncologyOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsOncologyOfferingCondition>;
  filter?: Maybe<HealthcareItNewsOncologyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsPatientEngagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsPatientEngagementOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsPatientEngagementOfferingCondition>;
  filter?: Maybe<HealthcareItNewsPatientEngagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsPatientEngagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsPatientEngagementOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsPatientEngagementOfferingCondition>;
  filter?: Maybe<HealthcareItNewsPatientEngagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsPublicHealthOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsPublicHealthOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsPublicHealthOfferingCondition>;
  filter?: Maybe<HealthcareItNewsPublicHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsPublicHealthOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsPublicHealthOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsPublicHealthOfferingCondition>;
  filter?: Maybe<HealthcareItNewsPublicHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsRevenueCycleManagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HealthcareItNewsRevenueCycleManagementOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingCondition>;
  filter?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHealthcareItNewsRevenueCycleManagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HealthcareItNewsRevenueCycleManagementOfferingsOrderBy>>;
  condition?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingCondition>;
  filter?: Maybe<HealthcareItNewsRevenueCycleManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssComplianceOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HimssComplianceOfferingsOrderBy>>;
  condition?: Maybe<HimssComplianceOfferingCondition>;
  filter?: Maybe<HimssComplianceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssComplianceOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HimssComplianceOfferingsOrderBy>>;
  condition?: Maybe<HimssComplianceOfferingCondition>;
  filter?: Maybe<HimssComplianceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssDigitalHealthOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HimssDigitalHealthOfferingsOrderBy>>;
  condition?: Maybe<HimssDigitalHealthOfferingCondition>;
  filter?: Maybe<HimssDigitalHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssDigitalHealthOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HimssDigitalHealthOfferingsOrderBy>>;
  condition?: Maybe<HimssDigitalHealthOfferingCondition>;
  filter?: Maybe<HimssDigitalHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssHealthAndWellnessOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HimssHealthAndWellnessOfferingsOrderBy>>;
  condition?: Maybe<HimssHealthAndWellnessOfferingCondition>;
  filter?: Maybe<HimssHealthAndWellnessOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssHealthAndWellnessOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HimssHealthAndWellnessOfferingsOrderBy>>;
  condition?: Maybe<HimssHealthAndWellnessOfferingCondition>;
  filter?: Maybe<HimssHealthAndWellnessOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssInformaticsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HimssInformaticsOfferingsOrderBy>>;
  condition?: Maybe<HimssInformaticsOfferingCondition>;
  filter?: Maybe<HimssInformaticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssInformaticsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HimssInformaticsOfferingsOrderBy>>;
  condition?: Maybe<HimssInformaticsOfferingCondition>;
  filter?: Maybe<HimssInformaticsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssInteroperabilityOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<HimssInteroperabilityOfferingsOrderBy>>;
  condition?: Maybe<HimssInteroperabilityOfferingCondition>;
  filter?: Maybe<HimssInteroperabilityOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryHimssInteroperabilityOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<HimssInteroperabilityOfferingsOrderBy>>;
  condition?: Maybe<HimssInteroperabilityOfferingCondition>;
  filter?: Maybe<HimssInteroperabilityOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasClaimsManagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<KlasClaimsManagementOfferingsOrderBy>>;
  condition?: Maybe<KlasClaimsManagementOfferingCondition>;
  filter?: Maybe<KlasClaimsManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasClaimsManagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<KlasClaimsManagementOfferingsOrderBy>>;
  condition?: Maybe<KlasClaimsManagementOfferingCondition>;
  filter?: Maybe<KlasClaimsManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasHomeHealthOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<KlasHomeHealthOfferingsOrderBy>>;
  condition?: Maybe<KlasHomeHealthOfferingCondition>;
  filter?: Maybe<KlasHomeHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasHomeHealthOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<KlasHomeHealthOfferingsOrderBy>>;
  condition?: Maybe<KlasHomeHealthOfferingCondition>;
  filter?: Maybe<KlasHomeHealthOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasPatientPortalsOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<KlasPatientPortalsOfferingsOrderBy>>;
  condition?: Maybe<KlasPatientPortalsOfferingCondition>;
  filter?: Maybe<KlasPatientPortalsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasPatientPortalsOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<KlasPatientPortalsOfferingsOrderBy>>;
  condition?: Maybe<KlasPatientPortalsOfferingCondition>;
  filter?: Maybe<KlasPatientPortalsOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasPracticeManagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<KlasPracticeManagementOfferingsOrderBy>>;
  condition?: Maybe<KlasPracticeManagementOfferingCondition>;
  filter?: Maybe<KlasPracticeManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasPracticeManagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<KlasPracticeManagementOfferingsOrderBy>>;
  condition?: Maybe<KlasPracticeManagementOfferingCondition>;
  filter?: Maybe<KlasPracticeManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasRemotePatientMonitoringOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<KlasRemotePatientMonitoringOfferingsOrderBy>>;
  condition?: Maybe<KlasRemotePatientMonitoringOfferingCondition>;
  filter?: Maybe<KlasRemotePatientMonitoringOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryKlasRemotePatientMonitoringOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<KlasRemotePatientMonitoringOfferingsOrderBy>>;
  condition?: Maybe<KlasRemotePatientMonitoringOfferingCondition>;
  filter?: Maybe<KlasRemotePatientMonitoringOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyChronicCareManagementOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyChronicCareManagementOfferingsOrderBy>>;
  condition?: Maybe<MedigyChronicCareManagementOfferingCondition>;
  filter?: Maybe<MedigyChronicCareManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyChronicCareManagementOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyChronicCareManagementOfferingsOrderBy>>;
  condition?: Maybe<MedigyChronicCareManagementOfferingCondition>;
  filter?: Maybe<MedigyChronicCareManagementOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyOfferingListsOrderBy>>;
  condition?: Maybe<MedigyOfferingListCondition>;
  filter?: Maybe<MedigyOfferingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyOfferingListsOrderBy>>;
  condition?: Maybe<MedigyOfferingListCondition>;
  filter?: Maybe<MedigyOfferingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingListCountsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyOfferingListCountsOrderBy>>;
  condition?: Maybe<MedigyOfferingListCountCondition>;
  filter?: Maybe<MedigyOfferingListCountFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingListCountsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyOfferingListCountsOrderBy>>;
  condition?: Maybe<MedigyOfferingListCountCondition>;
  filter?: Maybe<MedigyOfferingListCountFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyOfferingsOrderBy>>;
  condition?: Maybe<MedigyOfferingCondition>;
  filter?: Maybe<MedigyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyOfferingsOrderBy>>;
  condition?: Maybe<MedigyOfferingCondition>;
  filter?: Maybe<MedigyOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyTelemedicineOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyTelemedicineOfferingsOrderBy>>;
  condition?: Maybe<MedigyTelemedicineOfferingCondition>;
  filter?: Maybe<MedigyTelemedicineOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyTelemedicineOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyTelemedicineOfferingsOrderBy>>;
  condition?: Maybe<MedigyTelemedicineOfferingCondition>;
  filter?: Maybe<MedigyTelemedicineOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMergePendingListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MergePendingListsOrderBy>>;
  condition?: Maybe<MergePendingListCondition>;
  filter?: Maybe<MergePendingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMergePendingListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MergePendingListsOrderBy>>;
  condition?: Maybe<MergePendingListCondition>;
  filter?: Maybe<MergePendingListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingAliasesListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingAliasesListsOrderBy>>;
  condition?: Maybe<OfferingAliasesListCondition>;
  filter?: Maybe<OfferingAliasesListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingAliasesListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingAliasesListsOrderBy>>;
  condition?: Maybe<OfferingAliasesListCondition>;
  filter?: Maybe<OfferingAliasesListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingBrokenUrlListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingBrokenUrlListsOrderBy>>;
  condition?: Maybe<OfferingBrokenUrlListCondition>;
  filter?: Maybe<OfferingBrokenUrlListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingBrokenUrlListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingBrokenUrlListsOrderBy>>;
  condition?: Maybe<OfferingBrokenUrlListCondition>;
  filter?: Maybe<OfferingBrokenUrlListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCampaignsListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingCampaignsListsOrderBy>>;
  condition?: Maybe<OfferingCampaignsListCondition>;
  filter?: Maybe<OfferingCampaignsListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCampaignsListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingCampaignsListsOrderBy>>;
  condition?: Maybe<OfferingCampaignsListCondition>;
  filter?: Maybe<OfferingCampaignsListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCreatedByUsersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingCreatedByUsersOrderBy>>;
  condition?: Maybe<OfferingCreatedByUserCondition>;
  filter?: Maybe<OfferingCreatedByUserFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCreatedByUsersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingCreatedByUsersOrderBy>>;
  condition?: Maybe<OfferingCreatedByUserCondition>;
  filter?: Maybe<OfferingCreatedByUserFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCuratedListWithCommitMsgsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingCuratedListWithCommitMsgsOrderBy>>;
  condition?: Maybe<OfferingCuratedListWithCommitMsgCondition>;
  filter?: Maybe<OfferingCuratedListWithCommitMsgFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingCuratedListWithCommitMsgsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingCuratedListWithCommitMsgsOrderBy>>;
  condition?: Maybe<OfferingCuratedListWithCommitMsgCondition>;
  filter?: Maybe<OfferingCuratedListWithCommitMsgFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingProfilesOrderBy>>;
  condition?: Maybe<OfferingProfileCondition>;
  filter?: Maybe<OfferingProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfilesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingProfilesOrderBy>>;
  condition?: Maybe<OfferingProfileCondition>;
  filter?: Maybe<OfferingProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileJune2021sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingProfileJune2021sOrderBy>>;
  condition?: Maybe<OfferingProfileJune2021Condition>;
  filter?: Maybe<OfferingProfileJune2021Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileJune2021sListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingProfileJune2021sOrderBy>>;
  condition?: Maybe<OfferingProfileJune2021Condition>;
  filter?: Maybe<OfferingProfileJune2021Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileMaterializedsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingProfileMaterializedsOrderBy>>;
  condition?: Maybe<OfferingProfileMaterializedCondition>;
  filter?: Maybe<OfferingProfileMaterializedFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileMaterializedsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingProfileMaterializedsOrderBy>>;
  condition?: Maybe<OfferingProfileMaterializedCondition>;
  filter?: Maybe<OfferingProfileMaterializedFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileMedigiesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingProfileMedigiesOrderBy>>;
  condition?: Maybe<OfferingProfileMedigyCondition>;
  filter?: Maybe<OfferingProfileMedigyFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileMedigiesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingProfileMedigiesOrderBy>>;
  condition?: Maybe<OfferingProfileMedigyCondition>;
  filter?: Maybe<OfferingProfileMedigyFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileSearchesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingProfileSearchesOrderBy>>;
  condition?: Maybe<OfferingProfileSearchCondition>;
  filter?: Maybe<OfferingProfileSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingProfileSearchesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingProfileSearchesOrderBy>>;
  condition?: Maybe<OfferingProfileSearchCondition>;
  filter?: Maybe<OfferingProfileSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingSearchesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingSearchesOrderBy>>;
  condition?: Maybe<OfferingSearchCondition>;
  filter?: Maybe<OfferingSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingSearchesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingSearchesOrderBy>>;
  condition?: Maybe<OfferingSearchCondition>;
  filter?: Maybe<OfferingSearchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingTopicUrlsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingTopicUrlsOrderBy>>;
  condition?: Maybe<OfferingTopicUrlCondition>;
  filter?: Maybe<OfferingTopicUrlFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingTopicUrlsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingTopicUrlsOrderBy>>;
  condition?: Maybe<OfferingTopicUrlCondition>;
  filter?: Maybe<OfferingTopicUrlFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingVendorNameMismatchesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OfferingVendorNameMismatchesOrderBy>>;
  condition?: Maybe<OfferingVendorNameMismatchCondition>;
  filter?: Maybe<OfferingVendorNameMismatchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferingVendorNameMismatchesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OfferingVendorNameMismatchesOrderBy>>;
  condition?: Maybe<OfferingVendorNameMismatchCondition>;
  filter?: Maybe<OfferingVendorNameMismatchFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOwnerClaimedViewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OwnerClaimedViewsOrderBy>>;
  condition?: Maybe<OwnerClaimedViewCondition>;
  filter?: Maybe<OwnerClaimedViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOwnerClaimedViewsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<OwnerClaimedViewsOrderBy>>;
  condition?: Maybe<OwnerClaimedViewCondition>;
  filter?: Maybe<OwnerClaimedViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelatedOfferingsListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<RelatedOfferingsListsOrderBy>>;
  condition?: Maybe<RelatedOfferingsListCondition>;
  filter?: Maybe<RelatedOfferingsListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRelatedOfferingsListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<RelatedOfferingsListsOrderBy>>;
  condition?: Maybe<RelatedOfferingsListCondition>;
  filter?: Maybe<RelatedOfferingsListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurMedicalBillingOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SymplurMedicalBillingOfferingsOrderBy>>;
  condition?: Maybe<SymplurMedicalBillingOfferingCondition>;
  filter?: Maybe<SymplurMedicalBillingOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurMedicalBillingOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SymplurMedicalBillingOfferingsOrderBy>>;
  condition?: Maybe<SymplurMedicalBillingOfferingCondition>;
  filter?: Maybe<SymplurMedicalBillingOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurMedicalDevicesOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SymplurMedicalDevicesOfferingsOrderBy>>;
  condition?: Maybe<SymplurMedicalDevicesOfferingCondition>;
  filter?: Maybe<SymplurMedicalDevicesOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurMedicalDevicesOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SymplurMedicalDevicesOfferingsOrderBy>>;
  condition?: Maybe<SymplurMedicalDevicesOfferingCondition>;
  filter?: Maybe<SymplurMedicalDevicesOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurPatientExperienceOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SymplurPatientExperienceOfferingsOrderBy>>;
  condition?: Maybe<SymplurPatientExperienceOfferingCondition>;
  filter?: Maybe<SymplurPatientExperienceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurPatientExperienceOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SymplurPatientExperienceOfferingsOrderBy>>;
  condition?: Maybe<SymplurPatientExperienceOfferingCondition>;
  filter?: Maybe<SymplurPatientExperienceOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurPrimaryCareOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SymplurPrimaryCareOfferingsOrderBy>>;
  condition?: Maybe<SymplurPrimaryCareOfferingCondition>;
  filter?: Maybe<SymplurPrimaryCareOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurPrimaryCareOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SymplurPrimaryCareOfferingsOrderBy>>;
  condition?: Maybe<SymplurPrimaryCareOfferingCondition>;
  filter?: Maybe<SymplurPrimaryCareOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurVirtualCareOfferingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SymplurVirtualCareOfferingsOrderBy>>;
  condition?: Maybe<SymplurVirtualCareOfferingCondition>;
  filter?: Maybe<SymplurVirtualCareOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySymplurVirtualCareOfferingsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SymplurVirtualCareOfferingsOrderBy>>;
  condition?: Maybe<SymplurVirtualCareOfferingCondition>;
  filter?: Maybe<SymplurVirtualCareOfferingFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingProfilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyOfferingProfilesOrderBy>>;
  condition?: Maybe<MedigyOfferingProfileCondition>;
  filter?: Maybe<MedigyOfferingProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyOfferingProfilesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyOfferingProfilesOrderBy>>;
  condition?: Maybe<MedigyOfferingProfileCondition>;
  filter?: Maybe<MedigyOfferingProfileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyFormUpdatesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SurveyFormUpdatesOrderBy>>;
  condition?: Maybe<SurveyFormUpdateCondition>;
  filter?: Maybe<SurveyFormUpdateFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyFormUpdatesListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SurveyFormUpdatesOrderBy>>;
  condition?: Maybe<SurveyFormUpdateCondition>;
  filter?: Maybe<SurveyFormUpdateFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SurveyListsOrderBy>>;
  condition?: Maybe<SurveyListCondition>;
  filter?: Maybe<SurveyListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<SurveyListsOrderBy>>;
  condition?: Maybe<SurveyListCondition>;
  filter?: Maybe<SurveyListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCountryListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<CountryListsOrderBy>>;
  condition?: Maybe<CountryListCondition>;
  filter?: Maybe<CountryListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCountryListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<CountryListsOrderBy>>;
  condition?: Maybe<CountryListCondition>;
  filter?: Maybe<CountryListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedicalGroupsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedicalGroupsOrderBy>>;
  condition?: Maybe<MedicalGroupCondition>;
  filter?: Maybe<MedicalGroupFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedicalGroupsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedicalGroupsOrderBy>>;
  condition?: Maybe<MedicalGroupCondition>;
  filter?: Maybe<MedicalGroupFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStateListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<StateListsOrderBy>>;
  condition?: Maybe<StateListCondition>;
  filter?: Maybe<StateListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStateListsListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<StateListsOrderBy>>;
  condition?: Maybe<StateListCondition>;
  filter?: Maybe<StateListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyMembersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyMembersOrderBy>>;
  condition?: Maybe<MedigyMemberCondition>;
  filter?: Maybe<MedigyMemberFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyMembersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyMembersOrderBy>>;
  condition?: Maybe<MedigyMemberCondition>;
  filter?: Maybe<MedigyMemberFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyUsersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<MedigyUsersOrderBy>>;
  condition?: Maybe<MedigyUserCondition>;
  filter?: Maybe<MedigyUserFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryMedigyUsersListArgs = {
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<MedigyUsersOrderBy>>;
  condition?: Maybe<MedigyUserCondition>;
  filter?: Maybe<MedigyUserFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFileUploadArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryMediaTypeByMimeTypeAndFileExtnAndLabelArgs = {
  mimeType: Scalars['String'];
  fileExtn: Scalars['String'];
  label: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyFormUpdateArgs = {
  id: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserTourStatusArgs = {
  tourTypeName?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPrepareFileNameArgs = {
  basis: Scalars['String'];
  extn: Scalars['String'];
  maxLength?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySlugifyArgs = {
  value: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUrlBrandArgs = {
  url: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGetMyInstitutionsArgs = {
  authToken?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetCuratedCountsArgs = {
  fromDate: Scalars['Date'];
  endDate: Scalars['Date'];
};


/** The root query type which gives access points into the data universe. */
export type QueryGetTelemetryConfigArgs = {
  telemetry?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAuthenticateArgs = {
  username?: Maybe<Scalars['String']>;
  passwords?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryForgotPasswordEmailArgs = {
  username?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryForgotPasswordEmailWithRedirectUriArgs = {
  username?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetPromDataArgs = {
  getPrometheusInput?: Maybe<GetPrometheusInputRecordInput>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserRealmArgs = {
  username?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserTokenArgs = {
  userId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRefreshTokenArgs = {
  refreshToken?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRefreshTokenRealmArgs = {
  refreshToken?: Maybe<Scalars['String']>;
  realm?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryValidateUserTokenArgs = {
  accessToken?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetUserProfileArgs = {
  authToken?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryLogoutArgs = {
  refreshToken?: Maybe<Scalars['String']>;
  realmName?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserInfoArgs = {
  accessToken?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserRealmArgs = {
  realmName?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserRealmInfoArgs = {
  realmName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserRoleArgs = {
  realmName?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserRoleInfoArgs = {
  realmName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFileUploadByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySurveyFormUpdateByNodeIdArgs = {
  nodeId: Scalars['ID'];
};

export type RaceMasterV1 = {
  __typename?: 'RaceMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RaceMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RaceMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RaceMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type RaceMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RaceMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RaceMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<RaceMasterV1Filter>;
};

/** An input for mutations affecting `RaceMasterV1` */
export type RaceMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `RaceMasterV1` values. */
export type RaceMasterV1sConnection = {
  __typename?: 'RaceMasterV1sConnection';
  /** A list of `RaceMasterV1` objects. */
  nodes: Array<Maybe<RaceMasterV1>>;
  /** A list of edges which contains the `RaceMasterV1` and cursor to aid in pagination. */
  edges: Array<RaceMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RaceMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RaceMasterV1` edge in the connection. */
export type RaceMasterV1sEdge = {
  __typename?: 'RaceMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RaceMasterV1` at the end of the edge. */
  node?: Maybe<RaceMasterV1>;
};

/** Methods to use when ordering `RaceMasterV1`. */
export enum RaceMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `registerUser` mutation. */
export type RegisterUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  valuePassword?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  realmName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `registerUser` mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `registerUserSignup` mutation. */
export type RegisterUserSignupInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  fName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  serviceCategoryId?: Maybe<Scalars['Int']>;
  mName?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  orgName?: Maybe<Scalars['String']>;
  medicalGroup?: Maybe<Scalars['Int']>;
  orgWebsite?: Maybe<Scalars['String']>;
  orgEmail?: Maybe<Scalars['String']>;
  orgPhone?: Maybe<Scalars['String']>;
  orgFax?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgZipCode?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  orgStateId?: Maybe<Scalars['Int']>;
  orgCountryId?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `registerUserSignup` mutation. */
export type RegisterUserSignupPayload = {
  __typename?: 'RegisterUserSignupPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userPartyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `registerUserSignupV1` mutation. */
export type RegisterUserSignupV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  fName?: Maybe<Scalars['String']>;
  lName?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  serviceCategoryId?: Maybe<Scalars['Int']>;
  mName?: Maybe<Scalars['String']>;
  providerPartyId?: Maybe<Scalars['UUID']>;
  orgName?: Maybe<Scalars['String']>;
  medicalGroup?: Maybe<Scalars['Int']>;
  orgWebsite?: Maybe<Scalars['String']>;
  orgEmail?: Maybe<Scalars['String']>;
  orgPhone?: Maybe<Scalars['String']>;
  orgFax?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgZipCode?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  orgStateId?: Maybe<Scalars['Int']>;
  orgCountryId?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `registerUserSignupV1` mutation. */
export type RegisterUserSignupV1Payload = {
  __typename?: 'RegisterUserSignupV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userPartyId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type RelatedOfferingsList = {
  __typename?: 'RelatedOfferingsList';
  id: Scalars['GitlabProjectId'];
  offeringId: Scalars['GitlabProjectId'];
  offeringTitle?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  aliases?: Maybe<Scalars['String']>;
  offeringStatus?: Maybe<Scalars['String']>;
  oneLiner?: Maybe<Scalars['String']>;
  featuredImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  previewImage?: Maybe<Scalars['String']>;
  vendorName?: Maybe<Scalars['String']>;
  offeringCreated?: Maybe<Scalars['Datetime']>;
  slug?: Maybe<Scalars['String']>;
  institutionStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RelatedOfferingsList` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RelatedOfferingsListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `aliases` field. */
  aliases?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `oneLiner` field. */
  oneLiner?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `featuredImage` field. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoImage` field. */
  logoImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previewImage` field. */
  previewImage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `vendorName` field. */
  vendorName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `slug` field. */
  slug?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RelatedOfferingsList` object types. All fields are combined with a logical ‘and.’ */
export type RelatedOfferingsListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `offeringTitle` field. */
  offeringTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringListFilter>;
  /** Filter by the object’s `aliases` field. */
  aliases?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `oneLiner` field. */
  oneLiner?: Maybe<StringFilter>;
  /** Filter by the object’s `featuredImage` field. */
  featuredImage?: Maybe<StringFilter>;
  /** Filter by the object’s `logoImage` field. */
  logoImage?: Maybe<StringFilter>;
  /** Filter by the object’s `previewImage` field. */
  previewImage?: Maybe<StringFilter>;
  /** Filter by the object’s `vendorName` field. */
  vendorName?: Maybe<StringFilter>;
  /** Filter by the object’s `offeringCreated` field. */
  offeringCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `slug` field. */
  slug?: Maybe<StringFilter>;
  /** Filter by the object’s `institutionStatus` field. */
  institutionStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RelatedOfferingsListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RelatedOfferingsListFilter>>;
  /** Negates the expression. */
  not?: Maybe<RelatedOfferingsListFilter>;
};

/** A connection to a list of `RelatedOfferingsList` values. */
export type RelatedOfferingsListsConnection = {
  __typename?: 'RelatedOfferingsListsConnection';
  /** A list of `RelatedOfferingsList` objects. */
  nodes: Array<Maybe<RelatedOfferingsList>>;
  /** A list of edges which contains the `RelatedOfferingsList` and cursor to aid in pagination. */
  edges: Array<RelatedOfferingsListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RelatedOfferingsList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RelatedOfferingsList` edge in the connection. */
export type RelatedOfferingsListsEdge = {
  __typename?: 'RelatedOfferingsListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RelatedOfferingsList` at the end of the edge. */
  node?: Maybe<RelatedOfferingsList>;
};

/** Methods to use when ordering `RelatedOfferingsList`. */
export enum RelatedOfferingsListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  OfferingTitleAsc = 'OFFERING_TITLE_ASC',
  OfferingTitleDesc = 'OFFERING_TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  AliasesAsc = 'ALIASES_ASC',
  AliasesDesc = 'ALIASES_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC',
  OneLinerAsc = 'ONE_LINER_ASC',
  OneLinerDesc = 'ONE_LINER_DESC',
  FeaturedImageAsc = 'FEATURED_IMAGE_ASC',
  FeaturedImageDesc = 'FEATURED_IMAGE_DESC',
  LogoImageAsc = 'LOGO_IMAGE_ASC',
  LogoImageDesc = 'LOGO_IMAGE_DESC',
  PreviewImageAsc = 'PREVIEW_IMAGE_ASC',
  PreviewImageDesc = 'PREVIEW_IMAGE_DESC',
  VendorNameAsc = 'VENDOR_NAME_ASC',
  VendorNameDesc = 'VENDOR_NAME_DESC',
  OfferingCreatedAsc = 'OFFERING_CREATED_ASC',
  OfferingCreatedDesc = 'OFFERING_CREATED_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  InstitutionStatusAsc = 'INSTITUTION_STATUS_ASC',
  InstitutionStatusDesc = 'INSTITUTION_STATUS_DESC'
}

export type RelatedPersonRelationshipMaster = {
  __typename?: 'RelatedPersonRelationshipMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `RelatedPersonRelationshipMaster` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type RelatedPersonRelationshipMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `RelatedPersonRelationshipMaster` object types. All fields are combined with a logical ‘and.’ */
export type RelatedPersonRelationshipMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RelatedPersonRelationshipMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RelatedPersonRelationshipMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<RelatedPersonRelationshipMasterFilter>;
};

/** An input for mutations affecting `RelatedPersonRelationshipMaster` */
export type RelatedPersonRelationshipMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `RelatedPersonRelationshipMaster` values. */
export type RelatedPersonRelationshipMastersConnection = {
  __typename?: 'RelatedPersonRelationshipMastersConnection';
  /** A list of `RelatedPersonRelationshipMaster` objects. */
  nodes: Array<Maybe<RelatedPersonRelationshipMaster>>;
  /** A list of edges which contains the `RelatedPersonRelationshipMaster` and cursor to aid in pagination. */
  edges: Array<RelatedPersonRelationshipMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RelatedPersonRelationshipMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RelatedPersonRelationshipMaster` edge in the connection. */
export type RelatedPersonRelationshipMastersEdge = {
  __typename?: 'RelatedPersonRelationshipMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RelatedPersonRelationshipMaster` at the end of the edge. */
  node?: Maybe<RelatedPersonRelationshipMaster>;
};

/** Methods to use when ordering `RelatedPersonRelationshipMaster`. */
export enum RelatedPersonRelationshipMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

export type RelatedTopic = {
  __typename?: 'RelatedTopic';
  title?: Maybe<Scalars['String']>;
};

export type RelationshipType = {
  __typename?: 'RelationshipType';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RelationshipType` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RelationshipTypeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RelationshipType` object types. All fields are combined with a logical ‘and.’ */
export type RelationshipTypeFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RelationshipTypeFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RelationshipTypeFilter>>;
  /** Negates the expression. */
  not?: Maybe<RelationshipTypeFilter>;
};

/** An input for mutations affecting `RelationshipType` */
export type RelationshipTypeInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `RelationshipType` values. */
export type RelationshipTypesConnection = {
  __typename?: 'RelationshipTypesConnection';
  /** A list of `RelationshipType` objects. */
  nodes: Array<Maybe<RelationshipType>>;
  /** A list of edges which contains the `RelationshipType` and cursor to aid in pagination. */
  edges: Array<RelationshipTypesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RelationshipType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RelationshipType` edge in the connection. */
export type RelationshipTypesEdge = {
  __typename?: 'RelationshipTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RelationshipType` at the end of the edge. */
  node?: Maybe<RelationshipType>;
};

/** Methods to use when ordering `RelationshipType`. */
export enum RelationshipTypesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type ReminderNotificationDetail = {
  __typename?: 'ReminderNotificationDetail';
  id?: Maybe<Scalars['UUID']>;
  serviceTypeValue?: Maybe<Scalars['String']>;
  remainderNotificationType?: Maybe<Scalars['String']>;
  notificationSendAt?: Maybe<Scalars['Datetime']>;
  notificationSentTo?: Maybe<Scalars['String']>;
  notificationServiceProvider?: Maybe<Scalars['String']>;
  eventStatusMessage?: Maybe<Scalars['String']>;
  transactionRefId?: Maybe<Scalars['UUID']>;
  lastReminderSentAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `ReminderNotificationDetail` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ReminderNotificationDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `serviceTypeValue` field. */
  serviceTypeValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remainderNotificationType` field. */
  remainderNotificationType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `notificationSendAt` field. */
  notificationSendAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `notificationSentTo` field. */
  notificationSentTo?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `notificationServiceProvider` field. */
  notificationServiceProvider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `eventStatusMessage` field. */
  eventStatusMessage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `transactionRefId` field. */
  transactionRefId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `lastReminderSentAt` field. */
  lastReminderSentAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `ReminderNotificationDetail` object types. All fields are combined with a logical ‘and.’ */
export type ReminderNotificationDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `serviceTypeValue` field. */
  serviceTypeValue?: Maybe<StringFilter>;
  /** Filter by the object’s `remainderNotificationType` field. */
  remainderNotificationType?: Maybe<StringFilter>;
  /** Filter by the object’s `notificationSendAt` field. */
  notificationSendAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `notificationSentTo` field. */
  notificationSentTo?: Maybe<StringFilter>;
  /** Filter by the object’s `notificationServiceProvider` field. */
  notificationServiceProvider?: Maybe<StringFilter>;
  /** Filter by the object’s `eventStatusMessage` field. */
  eventStatusMessage?: Maybe<StringFilter>;
  /** Filter by the object’s `transactionRefId` field. */
  transactionRefId?: Maybe<UuidFilter>;
  /** Filter by the object’s `lastReminderSentAt` field. */
  lastReminderSentAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReminderNotificationDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReminderNotificationDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReminderNotificationDetailFilter>;
};

/** A connection to a list of `ReminderNotificationDetail` values. */
export type ReminderNotificationDetailsConnection = {
  __typename?: 'ReminderNotificationDetailsConnection';
  /** A list of `ReminderNotificationDetail` objects. */
  nodes: Array<Maybe<ReminderNotificationDetail>>;
  /** A list of edges which contains the `ReminderNotificationDetail` and cursor to aid in pagination. */
  edges: Array<ReminderNotificationDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReminderNotificationDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ReminderNotificationDetail` edge in the connection. */
export type ReminderNotificationDetailsEdge = {
  __typename?: 'ReminderNotificationDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReminderNotificationDetail` at the end of the edge. */
  node?: Maybe<ReminderNotificationDetail>;
};

/** Methods to use when ordering `ReminderNotificationDetail`. */
export enum ReminderNotificationDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ServiceTypeValueAsc = 'SERVICE_TYPE_VALUE_ASC',
  ServiceTypeValueDesc = 'SERVICE_TYPE_VALUE_DESC',
  RemainderNotificationTypeAsc = 'REMAINDER_NOTIFICATION_TYPE_ASC',
  RemainderNotificationTypeDesc = 'REMAINDER_NOTIFICATION_TYPE_DESC',
  NotificationSendAtAsc = 'NOTIFICATION_SEND_AT_ASC',
  NotificationSendAtDesc = 'NOTIFICATION_SEND_AT_DESC',
  NotificationSentToAsc = 'NOTIFICATION_SENT_TO_ASC',
  NotificationSentToDesc = 'NOTIFICATION_SENT_TO_DESC',
  NotificationServiceProviderAsc = 'NOTIFICATION_SERVICE_PROVIDER_ASC',
  NotificationServiceProviderDesc = 'NOTIFICATION_SERVICE_PROVIDER_DESC',
  EventStatusMessageAsc = 'EVENT_STATUS_MESSAGE_ASC',
  EventStatusMessageDesc = 'EVENT_STATUS_MESSAGE_DESC',
  TransactionRefIdAsc = 'TRANSACTION_REF_ID_ASC',
  TransactionRefIdDesc = 'TRANSACTION_REF_ID_DESC',
  LastReminderSentAtAsc = 'LAST_REMINDER_SENT_AT_ASC',
  LastReminderSentAtDesc = 'LAST_REMINDER_SENT_AT_DESC'
}

export type ReminderNotificationResult = {
  __typename?: 'ReminderNotificationResult';
  success?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};

/** All input for the `removeHtmlTags` mutation. */
export type RemoveHtmlTagsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  inputText?: Maybe<Scalars['String']>;
};

/** The output of our `removeHtmlTags` mutation. */
export type RemoveHtmlTagsPayload = {
  __typename?: 'RemoveHtmlTagsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type Request = {
  __typename?: 'Request';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

export type RequestApiResponse = {
  __typename?: 'RequestApiResponse';
  status?: Maybe<ResponseRecordStatus>;
  success?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['String']>;
};

/** A condition to be used against `Request` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type RequestCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestType` field. */
  requestType?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyRelation` field. */
  partyRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isDependent` field. */
  isDependent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `relationshipId` field. */
  relationshipId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `postalAddress` field. */
  postalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

export type RequestContactDetail = {
  __typename?: 'RequestContactDetail';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  contactPersonName?: Maybe<Scalars['String']>;
  contactPersonEmail?: Maybe<Scalars['String']>;
  contactPersonPhone?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestContactDetail` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestContactDetailCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactPersonName` field. */
  contactPersonName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `contactPersonEmail` field. */
  contactPersonEmail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `contactPersonPhone` field. */
  contactPersonPhone?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestContactDetail` object types. All fields are combined with a logical ‘and.’ */
export type RequestContactDetailFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactPersonName` field. */
  contactPersonName?: Maybe<StringFilter>;
  /** Filter by the object’s `contactPersonEmail` field. */
  contactPersonEmail?: Maybe<StringFilter>;
  /** Filter by the object’s `contactPersonPhone` field. */
  contactPersonPhone?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestContactDetailFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestContactDetailFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestContactDetailFilter>;
};

/** A connection to a list of `RequestContactDetail` values. */
export type RequestContactDetailsConnection = {
  __typename?: 'RequestContactDetailsConnection';
  /** A list of `RequestContactDetail` objects. */
  nodes: Array<Maybe<RequestContactDetail>>;
  /** A list of edges which contains the `RequestContactDetail` and cursor to aid in pagination. */
  edges: Array<RequestContactDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestContactDetail` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestContactDetail` edge in the connection. */
export type RequestContactDetailsEdge = {
  __typename?: 'RequestContactDetailsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestContactDetail` at the end of the edge. */
  node?: Maybe<RequestContactDetail>;
};

/** Methods to use when ordering `RequestContactDetail`. */
export enum RequestContactDetailsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  ContactPersonNameAsc = 'CONTACT_PERSON_NAME_ASC',
  ContactPersonNameDesc = 'CONTACT_PERSON_NAME_DESC',
  ContactPersonEmailAsc = 'CONTACT_PERSON_EMAIL_ASC',
  ContactPersonEmailDesc = 'CONTACT_PERSON_EMAIL_DESC',
  ContactPersonPhoneAsc = 'CONTACT_PERSON_PHONE_ASC',
  ContactPersonPhoneDesc = 'CONTACT_PERSON_PHONE_DESC'
}

/** All input for the `requestDetails` mutation. */
export type RequestDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestDetails` mutation. */
export type RequestDetailsPayload = {
  __typename?: 'RequestDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestDetails` mutation. */
export type RequestDetailsRecord = {
  __typename?: 'RequestDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/** All input for the `requestExpired` mutation. */
export type RequestExpiredInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
};

/** The output of our `requestExpired` mutation. */
export type RequestExpiredPayload = {
  __typename?: 'RequestExpiredPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  logId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** A filter to be used against `Request` object types. All fields are combined with a logical ‘and.’ */
export type RequestFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<StringFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestType` field. */
  requestType?: Maybe<JsonFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<StringFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<StringFilter>;
  /** Filter by the object’s `partyRelation` field. */
  partyRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `isDependent` field. */
  isDependent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `relationshipId` field. */
  relationshipId?: Maybe<IntFilter>;
  /** Filter by the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<IntFilter>;
  /** Filter by the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<UuidFilter>;
  /** Filter by the object’s `postalAddress` field. */
  postalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<BooleanFilter>;
  /** Filter by the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<IntFilter>;
  /** Filter by the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestFilter>;
};

export type RequestLogMaster = {
  __typename?: 'RequestLogMaster';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `RequestLogMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestLogMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientName` field. */
  patientName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fromStatus` field. */
  fromStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `toStatus` field. */
  toStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `content` field. */
  content?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remarks` field. */
  remarks?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `types` field. */
  types?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasRead` field. */
  hasRead?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `RequestLogMaster` object types. All fields are combined with a logical ‘and.’ */
export type RequestLogMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientName` field. */
  patientName?: Maybe<StringFilter>;
  /** Filter by the object’s `fromStatus` field. */
  fromStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `toStatus` field. */
  toStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `content` field. */
  content?: Maybe<StringFilter>;
  /** Filter by the object’s `remarks` field. */
  remarks?: Maybe<StringFilter>;
  /** Filter by the object’s `types` field. */
  types?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasRead` field. */
  hasRead?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestLogMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestLogMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestLogMasterFilter>;
};

export type RequestLogMasterV1 = {
  __typename?: 'RequestLogMasterV1';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  trackId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  patientName?: Maybe<Scalars['String']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  remarks?: Maybe<Scalars['String']>;
  types?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  partyId?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  mrn?: Maybe<Scalars['String']>;
  hasRead?: Maybe<Scalars['Boolean']>;
  createdBy?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `RequestLogMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestLogMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientName` field. */
  patientName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fromStatus` field. */
  fromStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `toStatus` field. */
  toStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `content` field. */
  content?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remarks` field. */
  remarks?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `types` field. */
  types?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasRead` field. */
  hasRead?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `RequestLogMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type RequestLogMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientName` field. */
  patientName?: Maybe<StringFilter>;
  /** Filter by the object’s `fromStatus` field. */
  fromStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `toStatus` field. */
  toStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `content` field. */
  content?: Maybe<StringFilter>;
  /** Filter by the object’s `remarks` field. */
  remarks?: Maybe<StringFilter>;
  /** Filter by the object’s `types` field. */
  types?: Maybe<IntFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasRead` field. */
  hasRead?: Maybe<BooleanFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestLogMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestLogMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestLogMasterV1Filter>;
};

/** A connection to a list of `RequestLogMasterV1` values. */
export type RequestLogMasterV1sConnection = {
  __typename?: 'RequestLogMasterV1sConnection';
  /** A list of `RequestLogMasterV1` objects. */
  nodes: Array<Maybe<RequestLogMasterV1>>;
  /** A list of edges which contains the `RequestLogMasterV1` and cursor to aid in pagination. */
  edges: Array<RequestLogMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestLogMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestLogMasterV1` edge in the connection. */
export type RequestLogMasterV1sEdge = {
  __typename?: 'RequestLogMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestLogMasterV1` at the end of the edge. */
  node?: Maybe<RequestLogMasterV1>;
};

/** Methods to use when ordering `RequestLogMasterV1`. */
export enum RequestLogMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  PatientNameAsc = 'PATIENT_NAME_ASC',
  PatientNameDesc = 'PATIENT_NAME_DESC',
  FromStatusAsc = 'FROM_STATUS_ASC',
  FromStatusDesc = 'FROM_STATUS_DESC',
  ToStatusAsc = 'TO_STATUS_ASC',
  ToStatusDesc = 'TO_STATUS_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  RemarksAsc = 'REMARKS_ASC',
  RemarksDesc = 'REMARKS_DESC',
  TypesAsc = 'TYPES_ASC',
  TypesDesc = 'TYPES_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasReadAsc = 'HAS_READ_ASC',
  HasReadDesc = 'HAS_READ_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC'
}

/** A connection to a list of `RequestLogMaster` values. */
export type RequestLogMastersConnection = {
  __typename?: 'RequestLogMastersConnection';
  /** A list of `RequestLogMaster` objects. */
  nodes: Array<Maybe<RequestLogMaster>>;
  /** A list of edges which contains the `RequestLogMaster` and cursor to aid in pagination. */
  edges: Array<RequestLogMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestLogMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestLogMaster` edge in the connection. */
export type RequestLogMastersEdge = {
  __typename?: 'RequestLogMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestLogMaster` at the end of the edge. */
  node?: Maybe<RequestLogMaster>;
};

/** Methods to use when ordering `RequestLogMaster`. */
export enum RequestLogMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  PatientNameAsc = 'PATIENT_NAME_ASC',
  PatientNameDesc = 'PATIENT_NAME_DESC',
  FromStatusAsc = 'FROM_STATUS_ASC',
  FromStatusDesc = 'FROM_STATUS_DESC',
  ToStatusAsc = 'TO_STATUS_ASC',
  ToStatusDesc = 'TO_STATUS_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  RemarksAsc = 'REMARKS_ASC',
  RemarksDesc = 'REMARKS_DESC',
  TypesAsc = 'TYPES_ASC',
  TypesDesc = 'TYPES_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasReadAsc = 'HAS_READ_ASC',
  HasReadDesc = 'HAS_READ_DESC'
}

/** This view is used to get request obtain record type . */
export type RequestObtainRecordType = {
  __typename?: 'RequestObtainRecordType';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  obtainRecordType?: Maybe<Scalars['String']>;
  remark?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestObtainRecordType` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type RequestObtainRecordTypeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `obtainRecordType` field. */
  obtainRecordType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `remark` field. */
  remark?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestObtainRecordType` object types. All fields are combined with a logical ‘and.’ */
export type RequestObtainRecordTypeFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `obtainRecordType` field. */
  obtainRecordType?: Maybe<StringFilter>;
  /** Filter by the object’s `remark` field. */
  remark?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestObtainRecordTypeFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestObtainRecordTypeFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestObtainRecordTypeFilter>;
};

/** A connection to a list of `RequestObtainRecordType` values. */
export type RequestObtainRecordTypesConnection = {
  __typename?: 'RequestObtainRecordTypesConnection';
  /** A list of `RequestObtainRecordType` objects. */
  nodes: Array<Maybe<RequestObtainRecordType>>;
  /** A list of edges which contains the `RequestObtainRecordType` and cursor to aid in pagination. */
  edges: Array<RequestObtainRecordTypesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestObtainRecordType` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestObtainRecordType` edge in the connection. */
export type RequestObtainRecordTypesEdge = {
  __typename?: 'RequestObtainRecordTypesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestObtainRecordType` at the end of the edge. */
  node?: Maybe<RequestObtainRecordType>;
};

/** Methods to use when ordering `RequestObtainRecordType`. */
export enum RequestObtainRecordTypesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  ObtainRecordTypeAsc = 'OBTAIN_RECORD_TYPE_ASC',
  ObtainRecordTypeDesc = 'OBTAIN_RECORD_TYPE_DESC',
  RemarkAsc = 'REMARK_ASC',
  RemarkDesc = 'REMARK_DESC'
}

/** All input for the `requestPatientDetails` mutation. */
export type RequestPatientDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPatientDetails` mutation. */
export type RequestPatientDetailsPayload = {
  __typename?: 'RequestPatientDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPatientDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPatientDetails` mutation. */
export type RequestPatientDetailsRecord = {
  __typename?: 'RequestPatientDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

export type RequestPatientView = {
  __typename?: 'RequestPatientView';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `RequestPatientView` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestPatientViewCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `RequestPatientView` object types. All fields are combined with a logical ‘and.’ */
export type RequestPatientViewFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPatientViewFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPatientViewFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPatientViewFilter>;
};

/** A connection to a list of `RequestPatientView` values. */
export type RequestPatientViewsConnection = {
  __typename?: 'RequestPatientViewsConnection';
  /** A list of `RequestPatientView` objects. */
  nodes: Array<Maybe<RequestPatientView>>;
  /** A list of edges which contains the `RequestPatientView` and cursor to aid in pagination. */
  edges: Array<RequestPatientViewsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPatientView` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPatientView` edge in the connection. */
export type RequestPatientViewsEdge = {
  __typename?: 'RequestPatientViewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPatientView` at the end of the edge. */
  node?: Maybe<RequestPatientView>;
};

/** Methods to use when ordering `RequestPatientView`. */
export enum RequestPatientViewsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC'
}

/** An input for mutations affecting `RequestPersonContactDetail` */
export type RequestPersonContactDetailInput = {
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** All input for the `requestPersonContactDetails` mutation. */
export type RequestPersonContactDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  inputs?: Maybe<Array<Maybe<RequestPersonContactDetailInput>>>;
  recordId?: Maybe<Scalars['UUID']>;
};

/** The output of our `requestPersonContactDetails` mutation. */
export type RequestPersonContactDetailsPayload = {
  __typename?: 'RequestPersonContactDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `requestPpaMraDetails` mutation. */
export type RequestPpaMraDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetails` mutation. */
export type RequestPpaMraDetailsPayload = {
  __typename?: 'RequestPpaMraDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetails` mutation. */
export type RequestPpaMraDetailsRecord = {
  __typename?: 'RequestPpaMraDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/** All input for the `requestPpaMraDetailsV1` mutation. */
export type RequestPpaMraDetailsV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetailsV1` mutation. */
export type RequestPpaMraDetailsV1Payload = {
  __typename?: 'RequestPpaMraDetailsV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsV1Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetailsV1` mutation. */
export type RequestPpaMraDetailsV1Record = {
  __typename?: 'RequestPpaMraDetailsV1Record';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/** All input for the `requestPpaMraDetailsV2` mutation. */
export type RequestPpaMraDetailsV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetailsV2` mutation. */
export type RequestPpaMraDetailsV2Payload = {
  __typename?: 'RequestPpaMraDetailsV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsV2Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetailsV2` mutation. */
export type RequestPpaMraDetailsV2Record = {
  __typename?: 'RequestPpaMraDetailsV2Record';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  requesttype?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestpriority?: Maybe<Scalars['String']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  requeststatus?: Maybe<Scalars['String']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  sexValue?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountryId?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousStateId?: Maybe<Scalars['Int']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/** All input for the `requestPpaMraDetailsV3` mutation. */
export type RequestPpaMraDetailsV3Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetailsV3` mutation. */
export type RequestPpaMraDetailsV3Payload = {
  __typename?: 'RequestPpaMraDetailsV3Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsV3Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetailsV3` mutation. */
export type RequestPpaMraDetailsV3Record = {
  __typename?: 'RequestPpaMraDetailsV3Record';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  requesttype?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestpriority?: Maybe<Scalars['String']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  requeststatus?: Maybe<Scalars['String']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  sexValue?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountryId?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousStateId?: Maybe<Scalars['Int']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
};

/** All input for the `requestPpaMraDetailsV4` mutation. */
export type RequestPpaMraDetailsV4Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetailsV4` mutation. */
export type RequestPpaMraDetailsV4Payload = {
  __typename?: 'RequestPpaMraDetailsV4Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsV4Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetailsV4` mutation. */
export type RequestPpaMraDetailsV4Record = {
  __typename?: 'RequestPpaMraDetailsV4Record';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

/** All input for the `requestPpaMraDetailsV5` mutation. */
export type RequestPpaMraDetailsV5Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestPpaMraDetailsV5` mutation. */
export type RequestPpaMraDetailsV5Payload = {
  __typename?: 'RequestPpaMraDetailsV5Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestPpaMraDetailsV5Record>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestPpaMraDetailsV5` mutation. */
export type RequestPpaMraDetailsV5Record = {
  __typename?: 'RequestPpaMraDetailsV5Record';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

export type RequestPpaMraView = {
  __typename?: 'RequestPpaMraView';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestPpaMraView` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestPpaMraViewCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestPpaMraView` object types. All fields are combined with a logical ‘and.’ */
export type RequestPpaMraViewFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPpaMraViewFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPpaMraViewFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPpaMraViewFilter>;
};

export type RequestPpaMraViewV1 = {
  __typename?: 'RequestPpaMraViewV1';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `RequestPpaMraViewV1` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestPpaMraViewV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `RequestPpaMraViewV1` object types. All fields are combined with a logical ‘and.’ */
export type RequestPpaMraViewV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPpaMraViewV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPpaMraViewV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPpaMraViewV1Filter>;
};

/** A connection to a list of `RequestPpaMraViewV1` values. */
export type RequestPpaMraViewV1sConnection = {
  __typename?: 'RequestPpaMraViewV1sConnection';
  /** A list of `RequestPpaMraViewV1` objects. */
  nodes: Array<Maybe<RequestPpaMraViewV1>>;
  /** A list of edges which contains the `RequestPpaMraViewV1` and cursor to aid in pagination. */
  edges: Array<RequestPpaMraViewV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPpaMraViewV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPpaMraViewV1` edge in the connection. */
export type RequestPpaMraViewV1sEdge = {
  __typename?: 'RequestPpaMraViewV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPpaMraViewV1` at the end of the edge. */
  node?: Maybe<RequestPpaMraViewV1>;
};

/** Methods to use when ordering `RequestPpaMraViewV1`. */
export enum RequestPpaMraViewV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC'
}

export type RequestPpaMraViewV2 = {
  __typename?: 'RequestPpaMraViewV2';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `RequestPpaMraViewV2` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestPpaMraViewV2Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `RequestPpaMraViewV2` object types. All fields are combined with a logical ‘and.’ */
export type RequestPpaMraViewV2Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPpaMraViewV2Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPpaMraViewV2Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPpaMraViewV2Filter>;
};

/** A connection to a list of `RequestPpaMraViewV2` values. */
export type RequestPpaMraViewV2sConnection = {
  __typename?: 'RequestPpaMraViewV2sConnection';
  /** A list of `RequestPpaMraViewV2` objects. */
  nodes: Array<Maybe<RequestPpaMraViewV2>>;
  /** A list of edges which contains the `RequestPpaMraViewV2` and cursor to aid in pagination. */
  edges: Array<RequestPpaMraViewV2sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPpaMraViewV2` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPpaMraViewV2` edge in the connection. */
export type RequestPpaMraViewV2sEdge = {
  __typename?: 'RequestPpaMraViewV2sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPpaMraViewV2` at the end of the edge. */
  node?: Maybe<RequestPpaMraViewV2>;
};

/** Methods to use when ordering `RequestPpaMraViewV2`. */
export enum RequestPpaMraViewV2sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC'
}

export type RequestPpaMraViewV3 = {
  __typename?: 'RequestPpaMraViewV3';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  requesttype?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestpriority?: Maybe<Scalars['String']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  requeststatus?: Maybe<Scalars['String']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['Int']>;
  sexValue?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountryId?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousStateId?: Maybe<Scalars['Int']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
};

/**
 * A condition to be used against `RequestPpaMraViewV3` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestPpaMraViewV3Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sexValue` field. */
  sexValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountryId` field. */
  previousCountryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousStateId` field. */
  previousStateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `RequestPpaMraViewV3` object types. All fields are combined with a logical ‘and.’ */
export type RequestPpaMraViewV3Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<StringFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<IntFilter>;
  /** Filter by the object’s `sexValue` field. */
  sexValue?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountryId` field. */
  previousCountryId?: Maybe<IntFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousStateId` field. */
  previousStateId?: Maybe<IntFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPpaMraViewV3Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPpaMraViewV3Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPpaMraViewV3Filter>;
};

/** A connection to a list of `RequestPpaMraViewV3` values. */
export type RequestPpaMraViewV3sConnection = {
  __typename?: 'RequestPpaMraViewV3sConnection';
  /** A list of `RequestPpaMraViewV3` objects. */
  nodes: Array<Maybe<RequestPpaMraViewV3>>;
  /** A list of edges which contains the `RequestPpaMraViewV3` and cursor to aid in pagination. */
  edges: Array<RequestPpaMraViewV3sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPpaMraViewV3` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPpaMraViewV3` edge in the connection. */
export type RequestPpaMraViewV3sEdge = {
  __typename?: 'RequestPpaMraViewV3sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPpaMraViewV3` at the end of the edge. */
  node?: Maybe<RequestPpaMraViewV3>;
};

/** Methods to use when ordering `RequestPpaMraViewV3`. */
export enum RequestPpaMraViewV3sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  IssueDescriptionMasterValueAsc = 'ISSUE_DESCRIPTION_MASTER_VALUE_ASC',
  IssueDescriptionMasterValueDesc = 'ISSUE_DESCRIPTION_MASTER_VALUE_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DestinationNatureValueAsc = 'DESTINATION_NATURE_VALUE_ASC',
  DestinationNatureValueDesc = 'DESTINATION_NATURE_VALUE_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  SexValueAsc = 'SEX_VALUE_ASC',
  SexValueDesc = 'SEX_VALUE_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryIdAsc = 'PREVIOUS_COUNTRY_ID_ASC',
  PreviousCountryIdDesc = 'PREVIOUS_COUNTRY_ID_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateIdAsc = 'PREVIOUS_STATE_ID_ASC',
  PreviousStateIdDesc = 'PREVIOUS_STATE_ID_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  HasMentalHealthConditionAsc = 'HAS_MENTAL_HEALTH_CONDITION_ASC',
  HasMentalHealthConditionDesc = 'HAS_MENTAL_HEALTH_CONDITION_DESC',
  HasSubstanceUseDisorderConditionAsc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_ASC',
  HasSubstanceUseDisorderConditionDesc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_DESC',
  HasSexualReproductiveHealthConditionAsc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_ASC',
  HasSexualReproductiveHealthConditionDesc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_DESC'
}

export type RequestPpaMraViewV4 = {
  __typename?: 'RequestPpaMraViewV4';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  deliverTo?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requesttype?: Maybe<Scalars['String']>;
  requestpriority?: Maybe<Scalars['String']>;
  destinationinstitutionname?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sexId?: Maybe<Scalars['String']>;
  preferredLanguageId?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousCountry?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['String']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestPpaMraViewV4` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestPpaMraViewV4Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deliverTo` field. */
  deliverTo?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requesttype` field. */
  requesttype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sexId` field. */
  sexId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCity` field. */
  previousCity?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousCountry` field. */
  previousCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousState` field. */
  previousState?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestPpaMraViewV4` object types. All fields are combined with a logical ‘and.’ */
export type RequestPpaMraViewV4Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `deliverTo` field. */
  deliverTo?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requesttype` field. */
  requesttype?: Maybe<StringFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationinstitutionname` field. */
  destinationinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sexId` field. */
  sexId?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressLine1` field. */
  previousAddressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCity` field. */
  previousCity?: Maybe<StringFilter>;
  /** Filter by the object’s `previousCountry` field. */
  previousCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `previousState` field. */
  previousState?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddressZip` field. */
  previousAddressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<StringFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPpaMraViewV4Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPpaMraViewV4Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPpaMraViewV4Filter>;
};

/** A connection to a list of `RequestPpaMraViewV4` values. */
export type RequestPpaMraViewV4sConnection = {
  __typename?: 'RequestPpaMraViewV4sConnection';
  /** A list of `RequestPpaMraViewV4` objects. */
  nodes: Array<Maybe<RequestPpaMraViewV4>>;
  /** A list of edges which contains the `RequestPpaMraViewV4` and cursor to aid in pagination. */
  edges: Array<RequestPpaMraViewV4sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPpaMraViewV4` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPpaMraViewV4` edge in the connection. */
export type RequestPpaMraViewV4sEdge = {
  __typename?: 'RequestPpaMraViewV4sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPpaMraViewV4` at the end of the edge. */
  node?: Maybe<RequestPpaMraViewV4>;
};

/** Methods to use when ordering `RequestPpaMraViewV4`. */
export enum RequestPpaMraViewV4sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  NoOfDaysToExpireAsc = 'NO_OF_DAYS_TO_EXPIRE_ASC',
  NoOfDaysToExpireDesc = 'NO_OF_DAYS_TO_EXPIRE_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  RequestTriggerStatusAsc = 'REQUEST_TRIGGER_STATUS_ASC',
  RequestTriggerStatusDesc = 'REQUEST_TRIGGER_STATUS_DESC'
}

/** A connection to a list of `RequestPpaMraView` values. */
export type RequestPpaMraViewsConnection = {
  __typename?: 'RequestPpaMraViewsConnection';
  /** A list of `RequestPpaMraView` objects. */
  nodes: Array<Maybe<RequestPpaMraView>>;
  /** A list of edges which contains the `RequestPpaMraView` and cursor to aid in pagination. */
  edges: Array<RequestPpaMraViewsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPpaMraView` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPpaMraView` edge in the connection. */
export type RequestPpaMraViewsEdge = {
  __typename?: 'RequestPpaMraViewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPpaMraView` at the end of the edge. */
  node?: Maybe<RequestPpaMraView>;
};

/** Methods to use when ordering `RequestPpaMraView`. */
export enum RequestPpaMraViewsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DeliverToAsc = 'DELIVER_TO_ASC',
  DeliverToDesc = 'DELIVER_TO_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequesttypeAsc = 'REQUESTTYPE_ASC',
  RequesttypeDesc = 'REQUESTTYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  DestinationinstitutionnameAsc = 'DESTINATIONINSTITUTIONNAME_ASC',
  DestinationinstitutionnameDesc = 'DESTINATIONINSTITUTIONNAME_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexIdAsc = 'SEX_ID_ASC',
  SexIdDesc = 'SEX_ID_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressLine1Asc = 'PREVIOUS_ADDRESS_LINE1_ASC',
  PreviousAddressLine1Desc = 'PREVIOUS_ADDRESS_LINE1_DESC',
  PreviousCityAsc = 'PREVIOUS_CITY_ASC',
  PreviousCityDesc = 'PREVIOUS_CITY_DESC',
  PreviousCountryAsc = 'PREVIOUS_COUNTRY_ASC',
  PreviousCountryDesc = 'PREVIOUS_COUNTRY_DESC',
  PreviousStateAsc = 'PREVIOUS_STATE_ASC',
  PreviousStateDesc = 'PREVIOUS_STATE_DESC',
  PreviousAddressZipAsc = 'PREVIOUS_ADDRESS_ZIP_ASC',
  PreviousAddressZipDesc = 'PREVIOUS_ADDRESS_ZIP_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  RequestTriggerStatusAsc = 'REQUEST_TRIGGER_STATUS_ASC',
  RequestTriggerStatusDesc = 'REQUEST_TRIGGER_STATUS_DESC'
}

export type RequestPriorityMaster = {
  __typename?: 'RequestPriorityMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestPriorityMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestPriorityMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestPriorityMaster` object types. All fields are combined with a logical ‘and.’ */
export type RequestPriorityMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestPriorityMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestPriorityMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestPriorityMasterFilter>;
};

/** An input for mutations affecting `RequestPriorityMaster` */
export type RequestPriorityMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `RequestPriorityMaster` values. */
export type RequestPriorityMastersConnection = {
  __typename?: 'RequestPriorityMastersConnection';
  /** A list of `RequestPriorityMaster` objects. */
  nodes: Array<Maybe<RequestPriorityMaster>>;
  /** A list of edges which contains the `RequestPriorityMaster` and cursor to aid in pagination. */
  edges: Array<RequestPriorityMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestPriorityMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestPriorityMaster` edge in the connection. */
export type RequestPriorityMastersEdge = {
  __typename?: 'RequestPriorityMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestPriorityMaster` at the end of the edge. */
  node?: Maybe<RequestPriorityMaster>;
};

/** Methods to use when ordering `RequestPriorityMaster`. */
export enum RequestPriorityMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type RequestResponse = {
  __typename?: 'RequestResponse';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  response?: Maybe<Scalars['String']>;
  repliedby?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  requestType?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `RequestResponse` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestResponseCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `response` field. */
  response?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `repliedby` field. */
  repliedby?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requestType` field. */
  requestType?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `RequestResponse` object types. All fields are combined with a logical ‘and.’ */
export type RequestResponseFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `response` field. */
  response?: Maybe<StringFilter>;
  /** Filter by the object’s `repliedby` field. */
  repliedby?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requestType` field. */
  requestType?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestResponseFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestResponseFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestResponseFilter>;
};

/** A connection to a list of `RequestResponse` values. */
export type RequestResponsesConnection = {
  __typename?: 'RequestResponsesConnection';
  /** A list of `RequestResponse` objects. */
  nodes: Array<Maybe<RequestResponse>>;
  /** A list of edges which contains the `RequestResponse` and cursor to aid in pagination. */
  edges: Array<RequestResponsesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestResponse` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestResponse` edge in the connection. */
export type RequestResponsesEdge = {
  __typename?: 'RequestResponsesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestResponse` at the end of the edge. */
  node?: Maybe<RequestResponse>;
};

/** Methods to use when ordering `RequestResponse`. */
export enum RequestResponsesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  ResponseAsc = 'RESPONSE_ASC',
  ResponseDesc = 'RESPONSE_DESC',
  RepliedbyAsc = 'REPLIEDBY_ASC',
  RepliedbyDesc = 'REPLIEDBY_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  RequestTypeAsc = 'REQUEST_TYPE_ASC',
  RequestTypeDesc = 'REQUEST_TYPE_DESC'
}

export type RequestResult = {
  __typename?: 'RequestResult';
  success?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};

export type RequestStatusMaster = {
  __typename?: 'RequestStatusMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestStatusMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type RequestStatusMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestStatusMaster` object types. All fields are combined with a logical ‘and.’ */
export type RequestStatusMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestStatusMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestStatusMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestStatusMasterFilter>;
};

/** An input for mutations affecting `RequestStatusMaster` */
export type RequestStatusMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `RequestStatusMaster` values. */
export type RequestStatusMastersConnection = {
  __typename?: 'RequestStatusMastersConnection';
  /** A list of `RequestStatusMaster` objects. */
  nodes: Array<Maybe<RequestStatusMaster>>;
  /** A list of edges which contains the `RequestStatusMaster` and cursor to aid in pagination. */
  edges: Array<RequestStatusMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestStatusMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestStatusMaster` edge in the connection. */
export type RequestStatusMastersEdge = {
  __typename?: 'RequestStatusMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestStatusMaster` at the end of the edge. */
  node?: Maybe<RequestStatusMaster>;
};

/** Methods to use when ordering `RequestStatusMaster`. */
export enum RequestStatusMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the `requestStatusPgcron` mutation. */
export type RequestStatusPgcronInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestStatusPgcron` mutation. */
export type RequestStatusPgcronPayload = {
  __typename?: 'RequestStatusPgcronPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type RequestToken = {
  __typename?: 'RequestToken';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  token?: Maybe<Scalars['String']>;
  authFormType?: Maybe<Scalars['Int']>;
  isFilled?: Maybe<Scalars['Boolean']>;
  isResend?: Maybe<Scalars['Boolean']>;
  resendDate?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `RequestToken` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestTokenCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `token` field. */
  token?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authFormType` field. */
  authFormType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isFilled` field. */
  isFilled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isResend` field. */
  isResend?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `resendDate` field. */
  resendDate?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `RequestToken` object types. All fields are combined with a logical ‘and.’ */
export type RequestTokenFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `token` field. */
  token?: Maybe<StringFilter>;
  /** Filter by the object’s `authFormType` field. */
  authFormType?: Maybe<IntFilter>;
  /** Filter by the object’s `isFilled` field. */
  isFilled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isResend` field. */
  isResend?: Maybe<BooleanFilter>;
  /** Filter by the object’s `resendDate` field. */
  resendDate?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestTokenFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestTokenFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestTokenFilter>;
};

/** An input for mutations affecting `RequestToken` */
export type RequestTokenInput = {
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  token?: Maybe<Scalars['String']>;
  authFormType?: Maybe<Scalars['Int']>;
  isFilled?: Maybe<Scalars['Boolean']>;
  isResend?: Maybe<Scalars['Boolean']>;
  resendDate?: Maybe<Scalars['Datetime']>;
};

export type RequestTokenV1 = {
  __typename?: 'RequestTokenV1';
  id?: Maybe<Scalars['UUID']>;
  requestId?: Maybe<Scalars['UUID']>;
  trackId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  token?: Maybe<Scalars['String']>;
  authFormType?: Maybe<Scalars['Int']>;
  isFilled?: Maybe<Scalars['Boolean']>;
  isResend?: Maybe<Scalars['Boolean']>;
  resendDate?: Maybe<Scalars['Datetime']>;
  createdBy?: Maybe<Scalars['UUID']>;
};

/**
 * A condition to be used against `RequestTokenV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestTokenV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `token` field. */
  token?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authFormType` field. */
  authFormType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isFilled` field. */
  isFilled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isResend` field. */
  isResend?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `resendDate` field. */
  resendDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
};

/** A filter to be used against `RequestTokenV1` object types. All fields are combined with a logical ‘and.’ */
export type RequestTokenV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `token` field. */
  token?: Maybe<StringFilter>;
  /** Filter by the object’s `authFormType` field. */
  authFormType?: Maybe<IntFilter>;
  /** Filter by the object’s `isFilled` field. */
  isFilled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isResend` field. */
  isResend?: Maybe<BooleanFilter>;
  /** Filter by the object’s `resendDate` field. */
  resendDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestTokenV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestTokenV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<RequestTokenV1Filter>;
};

/** A connection to a list of `RequestTokenV1` values. */
export type RequestTokenV1sConnection = {
  __typename?: 'RequestTokenV1sConnection';
  /** A list of `RequestTokenV1` objects. */
  nodes: Array<Maybe<RequestTokenV1>>;
  /** A list of edges which contains the `RequestTokenV1` and cursor to aid in pagination. */
  edges: Array<RequestTokenV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestTokenV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestTokenV1` edge in the connection. */
export type RequestTokenV1sEdge = {
  __typename?: 'RequestTokenV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestTokenV1` at the end of the edge. */
  node?: Maybe<RequestTokenV1>;
};

/** Methods to use when ordering `RequestTokenV1`. */
export enum RequestTokenV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  TokenAsc = 'TOKEN_ASC',
  TokenDesc = 'TOKEN_DESC',
  AuthFormTypeAsc = 'AUTH_FORM_TYPE_ASC',
  AuthFormTypeDesc = 'AUTH_FORM_TYPE_DESC',
  IsFilledAsc = 'IS_FILLED_ASC',
  IsFilledDesc = 'IS_FILLED_DESC',
  IsResendAsc = 'IS_RESEND_ASC',
  IsResendDesc = 'IS_RESEND_DESC',
  ResendDateAsc = 'RESEND_DATE_ASC',
  ResendDateDesc = 'RESEND_DATE_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC'
}

/** A connection to a list of `RequestToken` values. */
export type RequestTokensConnection = {
  __typename?: 'RequestTokensConnection';
  /** A list of `RequestToken` objects. */
  nodes: Array<Maybe<RequestToken>>;
  /** A list of edges which contains the `RequestToken` and cursor to aid in pagination. */
  edges: Array<RequestTokensEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestToken` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestToken` edge in the connection. */
export type RequestTokensEdge = {
  __typename?: 'RequestTokensEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestToken` at the end of the edge. */
  node?: Maybe<RequestToken>;
};

/** Methods to use when ordering `RequestToken`. */
export enum RequestTokensOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  TokenAsc = 'TOKEN_ASC',
  TokenDesc = 'TOKEN_DESC',
  AuthFormTypeAsc = 'AUTH_FORM_TYPE_ASC',
  AuthFormTypeDesc = 'AUTH_FORM_TYPE_DESC',
  IsFilledAsc = 'IS_FILLED_ASC',
  IsFilledDesc = 'IS_FILLED_DESC',
  IsResendAsc = 'IS_RESEND_ASC',
  IsResendDesc = 'IS_RESEND_DESC',
  ResendDateAsc = 'RESEND_DATE_ASC',
  ResendDateDesc = 'RESEND_DATE_DESC'
}

/** An input for mutations affecting `RequestTypeInfo` */
export type RequestTypeInfoInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Boolean']>;
  otherValue?: Maybe<Scalars['String']>;
};

export type RequestTypeMaster = {
  __typename?: 'RequestTypeMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestTypeMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestTypeMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestTypeMaster` object types. All fields are combined with a logical ‘and.’ */
export type RequestTypeMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestTypeMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestTypeMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestTypeMasterFilter>;
};

/** An input for mutations affecting `RequestTypeMaster` */
export type RequestTypeMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `RequestTypeMaster` values. */
export type RequestTypeMastersConnection = {
  __typename?: 'RequestTypeMastersConnection';
  /** A list of `RequestTypeMaster` objects. */
  nodes: Array<Maybe<RequestTypeMaster>>;
  /** A list of edges which contains the `RequestTypeMaster` and cursor to aid in pagination. */
  edges: Array<RequestTypeMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestTypeMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestTypeMaster` edge in the connection. */
export type RequestTypeMastersEdge = {
  __typename?: 'RequestTypeMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestTypeMaster` at the end of the edge. */
  node?: Maybe<RequestTypeMaster>;
};

/** Methods to use when ordering `RequestTypeMaster`. */
export enum RequestTypeMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** A connection to a list of `Request` values. */
export type RequestsConnection = {
  __typename?: 'RequestsConnection';
  /** A list of `Request` objects. */
  nodes: Array<Maybe<Request>>;
  /** A list of edges which contains the `Request` and cursor to aid in pagination. */
  edges: Array<RequestsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Request` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Request` edge in the connection. */
export type RequestsEdge = {
  __typename?: 'RequestsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Request` at the end of the edge. */
  node?: Maybe<Request>;
};

export type RequestsOnBehalf = {
  __typename?: 'RequestsOnBehalf';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `RequestsOnBehalf` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type RequestsOnBehalfCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trackId` field. */
  trackId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sourceNature` field. */
  sourceNature?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `departmentId` field. */
  departmentId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `mrn` field. */
  mrn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `categoryType` field. */
  categoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdat` field. */
  createdat?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `requester` field. */
  requester?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `reason` field. */
  reason?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `changeRequest` field. */
  changeRequest?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `provider` field. */
  provider?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `servicedDate` field. */
  servicedDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInspect` field. */
  isInspect?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `signatureId` field. */
  signatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `requestType` field. */
  requestType?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `requestpriority` field. */
  requestpriority?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `departmentname` field. */
  departmentname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `suffix` field. */
  suffix?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousName` field. */
  previousName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sex` field. */
  sex?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `gender` field. */
  gender?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `birthDate` field. */
  birthDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `addressLine1` field. */
  addressLine1?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressLine2` field. */
  addressLine2?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `city` field. */
  city?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stateId` field. */
  stateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `state` field. */
  state?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addressZip` field. */
  addressZip?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `previousAddress` field. */
  previousAddress?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requeststatus` field. */
  requeststatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdfname` field. */
  createdfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdmname` field. */
  createdmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdlastname` field. */
  createdlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `persontype` field. */
  persontype?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignedfname` field. */
  assignedfname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedmname` field. */
  assignedmname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `pan` field. */
  pan?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachment` field. */
  attachment?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organizationId` field. */
  organizationId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `contactData` field. */
  contactData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `channelName` field. */
  channelName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `representName` field. */
  representName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `representMail` field. */
  representMail?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `editedImageId` field. */
  editedImageId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `noOfDays` field. */
  noOfDays?: Maybe<Scalars['Float']>;
  /** Checks for equality with the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expired` field. */
  expired?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `ssn` field. */
  ssn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `partyRelation` field. */
  partyRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isDependent` field. */
  isDependent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `relationshipId` field. */
  relationshipId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `postalAddress` field. */
  postalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/** All input for the `requestsOnBehalfDetails` mutation. */
export type RequestsOnBehalfDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** The output of our `requestsOnBehalfDetails` mutation. */
export type RequestsOnBehalfDetailsPayload = {
  __typename?: 'RequestsOnBehalfDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  results?: Maybe<Array<Maybe<RequestsOnBehalfDetailsRecord>>>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The return type of our `requestsOnBehalfDetails` mutation. */
export type RequestsOnBehalfDetailsRecord = {
  __typename?: 'RequestsOnBehalfDetailsRecord';
  id?: Maybe<Scalars['UUID']>;
  requestTypeId?: Maybe<Scalars['Int']>;
  patientId?: Maybe<Scalars['UUID']>;
  requestPriorityId?: Maybe<Scalars['Int']>;
  requestStatusId?: Maybe<Scalars['Int']>;
  trackId?: Maybe<Scalars['String']>;
  communicationRequestId?: Maybe<Scalars['UUID']>;
  issueImpactMasterId?: Maybe<Scalars['UUID']>;
  impactSeverityId?: Maybe<Scalars['Int']>;
  issueDescriptionMasterId?: Maybe<Scalars['UUID']>;
  issueDescriptionMasterValue?: Maybe<Scalars['String']>;
  sourceNatureId?: Maybe<Scalars['Int']>;
  sourceNature?: Maybe<Scalars['String']>;
  destinationNatureId?: Maybe<Scalars['Int']>;
  destinationNatureValue?: Maybe<Scalars['String']>;
  deliverFrom?: Maybe<Scalars['UUID']>;
  organizationGroupId?: Maybe<Scalars['UUID']>;
  departmentId?: Maybe<Scalars['UUID']>;
  durationOfProblemEncountering?: Maybe<Scalars['String']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  medicalRequestFormFileId?: Maybe<Scalars['UUID']>;
  assignToPersonId?: Maybe<Scalars['UUID']>;
  mrn?: Maybe<Scalars['String']>;
  hasSensitiveInformation?: Maybe<Scalars['Boolean']>;
  contactPersonallyValue?: Maybe<Scalars['Int']>;
  contactByMailValue?: Maybe<Scalars['Int']>;
  contactByPhoneValue?: Maybe<Scalars['Int']>;
  contactBySmsValue?: Maybe<Scalars['Int']>;
  hasSignedRequest?: Maybe<Scalars['Boolean']>;
  recordsRequestedFrom?: Maybe<Scalars['Datetime']>;
  recordsRequestedTo?: Maybe<Scalars['Datetime']>;
  categoryType?: Maybe<Scalars['String']>;
  createdat?: Maybe<Scalars['Datetime']>;
  requester?: Maybe<Scalars['UUID']>;
  reason?: Maybe<Scalars['String']>;
  changeRequest?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  servicedDate?: Maybe<Scalars['Datetime']>;
  healthInformationAuth?: Maybe<Scalars['Boolean']>;
  disorderRequestAuth?: Maybe<Scalars['Boolean']>;
  isRequestedSupport?: Maybe<Scalars['Boolean']>;
  isInspect?: Maybe<Scalars['Boolean']>;
  isObtainCopy?: Maybe<Scalars['Boolean']>;
  hasPersonalRepresentative?: Maybe<Scalars['Boolean']>;
  proxyDocument?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  requestType?: Maybe<Scalars['JSON']>;
  requestpriority?: Maybe<Scalars['String']>;
  sourceinstitutionname?: Maybe<Scalars['String']>;
  departmentname?: Maybe<Scalars['String']>;
  organizationgroupname?: Maybe<Scalars['String']>;
  suffix?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousName?: Maybe<Scalars['String']>;
  preferredPronounsId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['String']>;
  sex?: Maybe<Scalars['JSON']>;
  gender?: Maybe<Scalars['JSON']>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  preferredLanguageValue?: Maybe<Scalars['String']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  stateId?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  previousAddress?: Maybe<Scalars['JSON']>;
  issueImpactMasterValue?: Maybe<Scalars['String']>;
  requeststatus?: Maybe<Scalars['String']>;
  createdfname?: Maybe<Scalars['String']>;
  createdmname?: Maybe<Scalars['String']>;
  createdlastname?: Maybe<Scalars['String']>;
  persontype?: Maybe<Scalars['Int']>;
  assignedfname?: Maybe<Scalars['String']>;
  assignedmname?: Maybe<Scalars['String']>;
  assignedlastname?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  pan?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['UUID']>;
  billingRequestCategoryId?: Maybe<Scalars['Int']>;
  organizationId?: Maybe<Scalars['UUID']>;
  contactData?: Maybe<Scalars['String']>;
  requestCategoryName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  channelName?: Maybe<Scalars['String']>;
  billingRequestTypeId?: Maybe<Scalars['UUID']>;
  representName?: Maybe<Scalars['String']>;
  representMail?: Maybe<Scalars['String']>;
  addendumRequestFileId?: Maybe<Scalars['UUID']>;
  editedImageId?: Maybe<Scalars['UUID']>;
  addendumDeniedSignatureId?: Maybe<Scalars['UUID']>;
  impactSeverityValue?: Maybe<Scalars['String']>;
  substanceDisorderInformationId?: Maybe<Scalars['Int']>;
  substanceDisorderInformation?: Maybe<Scalars['String']>;
  noOfDays?: Maybe<Scalars['Float']>;
  noOfDaysToExpire?: Maybe<Scalars['String']>;
  aboutToExpire?: Maybe<Scalars['Boolean']>;
  outstandingRequest?: Maybe<Scalars['Boolean']>;
  expired?: Maybe<Scalars['Boolean']>;
  requestTriggerStatus?: Maybe<Scalars['String']>;
  hasMentalHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSexualReproductiveHealthCondition?: Maybe<Scalars['Boolean']>;
  hasSubstanceUseDisorderCondition?: Maybe<Scalars['Boolean']>;
  ssn?: Maybe<Scalars['String']>;
  additionalNotes?: Maybe<Scalars['String']>;
  partyRelation?: Maybe<Scalars['String']>;
  isDependent?: Maybe<Scalars['Boolean']>;
  relationshipId?: Maybe<Scalars['Int']>;
  relationshipValue?: Maybe<Scalars['String']>;
  postalServiceId?: Maybe<Scalars['Int']>;
  postalServiceValue?: Maybe<Scalars['String']>;
  postalAddressId?: Maybe<Scalars['UUID']>;
  postalAddress?: Maybe<Scalars['String']>;
  obtainCopyDiffAddress?: Maybe<Scalars['Boolean']>;
  physicianPostalAddress?: Maybe<Scalars['String']>;
  obtainCopyMethodId?: Maybe<Scalars['Int']>;
  obtainCopyMethodValue?: Maybe<Scalars['String']>;
};

/** A filter to be used against `RequestsOnBehalf` object types. All fields are combined with a logical ‘and.’ */
export type RequestsOnBehalfFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestTypeId` field. */
  requestTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestPriorityId` field. */
  requestPriorityId?: Maybe<IntFilter>;
  /** Filter by the object’s `requestStatusId` field. */
  requestStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `trackId` field. */
  trackId?: Maybe<StringFilter>;
  /** Filter by the object’s `communicationRequestId` field. */
  communicationRequestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueImpactMasterId` field. */
  issueImpactMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityId` field. */
  impactSeverityId?: Maybe<IntFilter>;
  /** Filter by the object’s `issueDescriptionMasterId` field. */
  issueDescriptionMasterId?: Maybe<UuidFilter>;
  /** Filter by the object’s `issueDescriptionMasterValue` field. */
  issueDescriptionMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceNatureId` field. */
  sourceNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `sourceNature` field. */
  sourceNature?: Maybe<StringFilter>;
  /** Filter by the object’s `destinationNatureId` field. */
  destinationNatureId?: Maybe<IntFilter>;
  /** Filter by the object’s `destinationNatureValue` field. */
  destinationNatureValue?: Maybe<StringFilter>;
  /** Filter by the object’s `deliverFrom` field. */
  deliverFrom?: Maybe<UuidFilter>;
  /** Filter by the object’s `organizationGroupId` field. */
  organizationGroupId?: Maybe<UuidFilter>;
  /** Filter by the object’s `departmentId` field. */
  departmentId?: Maybe<UuidFilter>;
  /** Filter by the object’s `durationOfProblemEncountering` field. */
  durationOfProblemEncountering?: Maybe<StringFilter>;
  /** Filter by the object’s `disorderDisclosureAuthorizationFileId` field. */
  disorderDisclosureAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `hipaaAuthorizationFileId` field. */
  hipaaAuthorizationFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `medicalRequestFormFileId` field. */
  medicalRequestFormFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `assignToPersonId` field. */
  assignToPersonId?: Maybe<UuidFilter>;
  /** Filter by the object’s `mrn` field. */
  mrn?: Maybe<StringFilter>;
  /** Filter by the object’s `hasSensitiveInformation` field. */
  hasSensitiveInformation?: Maybe<BooleanFilter>;
  /** Filter by the object’s `contactPersonallyValue` field. */
  contactPersonallyValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByMailValue` field. */
  contactByMailValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactByPhoneValue` field. */
  contactByPhoneValue?: Maybe<IntFilter>;
  /** Filter by the object’s `contactBySmsValue` field. */
  contactBySmsValue?: Maybe<IntFilter>;
  /** Filter by the object’s `hasSignedRequest` field. */
  hasSignedRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `recordsRequestedFrom` field. */
  recordsRequestedFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordsRequestedTo` field. */
  recordsRequestedTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `categoryType` field. */
  categoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `createdat` field. */
  createdat?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `requester` field. */
  requester?: Maybe<UuidFilter>;
  /** Filter by the object’s `reason` field. */
  reason?: Maybe<StringFilter>;
  /** Filter by the object’s `changeRequest` field. */
  changeRequest?: Maybe<StringFilter>;
  /** Filter by the object’s `provider` field. */
  provider?: Maybe<StringFilter>;
  /** Filter by the object’s `servicedDate` field. */
  servicedDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `healthInformationAuth` field. */
  healthInformationAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `disorderRequestAuth` field. */
  disorderRequestAuth?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isRequestedSupport` field. */
  isRequestedSupport?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInspect` field. */
  isInspect?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isObtainCopy` field. */
  isObtainCopy?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasPersonalRepresentative` field. */
  hasPersonalRepresentative?: Maybe<BooleanFilter>;
  /** Filter by the object’s `proxyDocument` field. */
  proxyDocument?: Maybe<UuidFilter>;
  /** Filter by the object’s `signatureId` field. */
  signatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `requestType` field. */
  requestType?: Maybe<JsonFilter>;
  /** Filter by the object’s `requestpriority` field. */
  requestpriority?: Maybe<StringFilter>;
  /** Filter by the object’s `sourceinstitutionname` field. */
  sourceinstitutionname?: Maybe<StringFilter>;
  /** Filter by the object’s `departmentname` field. */
  departmentname?: Maybe<StringFilter>;
  /** Filter by the object’s `organizationgroupname` field. */
  organizationgroupname?: Maybe<StringFilter>;
  /** Filter by the object’s `suffix` field. */
  suffix?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `previousName` field. */
  previousName?: Maybe<StringFilter>;
  /** Filter by the object’s `preferredPronounsId` field. */
  preferredPronounsId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredPronouns` field. */
  preferredPronouns?: Maybe<StringFilter>;
  /** Filter by the object’s `sex` field. */
  sex?: Maybe<JsonFilter>;
  /** Filter by the object’s `gender` field. */
  gender?: Maybe<JsonFilter>;
  /** Filter by the object’s `preferredLanguageId` field. */
  preferredLanguageId?: Maybe<IntFilter>;
  /** Filter by the object’s `preferredLanguageValue` field. */
  preferredLanguageValue?: Maybe<StringFilter>;
  /** Filter by the object’s `electronicDetails` field. */
  electronicDetails?: Maybe<StringFilter>;
  /** Filter by the object’s `birthDate` field. */
  birthDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `addressLine1` field. */
  addressLine1?: Maybe<StringFilter>;
  /** Filter by the object’s `addressLine2` field. */
  addressLine2?: Maybe<StringFilter>;
  /** Filter by the object’s `city` field. */
  city?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `stateId` field. */
  stateId?: Maybe<IntFilter>;
  /** Filter by the object’s `state` field. */
  state?: Maybe<StringFilter>;
  /** Filter by the object’s `addressZip` field. */
  addressZip?: Maybe<StringFilter>;
  /** Filter by the object’s `previousAddress` field. */
  previousAddress?: Maybe<JsonFilter>;
  /** Filter by the object’s `issueImpactMasterValue` field. */
  issueImpactMasterValue?: Maybe<StringFilter>;
  /** Filter by the object’s `requeststatus` field. */
  requeststatus?: Maybe<StringFilter>;
  /** Filter by the object’s `createdfname` field. */
  createdfname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdmname` field. */
  createdmname?: Maybe<StringFilter>;
  /** Filter by the object’s `createdlastname` field. */
  createdlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `persontype` field. */
  persontype?: Maybe<IntFilter>;
  /** Filter by the object’s `assignedfname` field. */
  assignedfname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedmname` field. */
  assignedmname?: Maybe<StringFilter>;
  /** Filter by the object’s `assignedlastname` field. */
  assignedlastname?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `pan` field. */
  pan?: Maybe<StringFilter>;
  /** Filter by the object’s `attachment` field. */
  attachment?: Maybe<UuidFilter>;
  /** Filter by the object’s `billingRequestCategoryId` field. */
  billingRequestCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `organizationId` field. */
  organizationId?: Maybe<UuidFilter>;
  /** Filter by the object’s `contactData` field. */
  contactData?: Maybe<StringFilter>;
  /** Filter by the object’s `requestCategoryName` field. */
  requestCategoryName?: Maybe<StringFilter>;
  /** Filter by the object’s `phoneNumber` field. */
  phoneNumber?: Maybe<StringFilter>;
  /** Filter by the object’s `channelName` field. */
  channelName?: Maybe<StringFilter>;
  /** Filter by the object’s `billingRequestTypeId` field. */
  billingRequestTypeId?: Maybe<UuidFilter>;
  /** Filter by the object’s `representName` field. */
  representName?: Maybe<StringFilter>;
  /** Filter by the object’s `representMail` field. */
  representMail?: Maybe<StringFilter>;
  /** Filter by the object’s `addendumRequestFileId` field. */
  addendumRequestFileId?: Maybe<UuidFilter>;
  /** Filter by the object’s `editedImageId` field. */
  editedImageId?: Maybe<UuidFilter>;
  /** Filter by the object’s `addendumDeniedSignatureId` field. */
  addendumDeniedSignatureId?: Maybe<UuidFilter>;
  /** Filter by the object’s `impactSeverityValue` field. */
  impactSeverityValue?: Maybe<StringFilter>;
  /** Filter by the object’s `substanceDisorderInformationId` field. */
  substanceDisorderInformationId?: Maybe<IntFilter>;
  /** Filter by the object’s `substanceDisorderInformation` field. */
  substanceDisorderInformation?: Maybe<StringFilter>;
  /** Filter by the object’s `noOfDays` field. */
  noOfDays?: Maybe<FloatFilter>;
  /** Filter by the object’s `noOfDaysToExpire` field. */
  noOfDaysToExpire?: Maybe<StringFilter>;
  /** Filter by the object’s `aboutToExpire` field. */
  aboutToExpire?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outstandingRequest` field. */
  outstandingRequest?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expired` field. */
  expired?: Maybe<BooleanFilter>;
  /** Filter by the object’s `requestTriggerStatus` field. */
  requestTriggerStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `hasMentalHealthCondition` field. */
  hasMentalHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSexualReproductiveHealthCondition` field. */
  hasSexualReproductiveHealthCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `hasSubstanceUseDisorderCondition` field. */
  hasSubstanceUseDisorderCondition?: Maybe<BooleanFilter>;
  /** Filter by the object’s `ssn` field. */
  ssn?: Maybe<StringFilter>;
  /** Filter by the object’s `additionalNotes` field. */
  additionalNotes?: Maybe<StringFilter>;
  /** Filter by the object’s `partyRelation` field. */
  partyRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `isDependent` field. */
  isDependent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `relationshipId` field. */
  relationshipId?: Maybe<IntFilter>;
  /** Filter by the object’s `relationshipValue` field. */
  relationshipValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalServiceId` field. */
  postalServiceId?: Maybe<IntFilter>;
  /** Filter by the object’s `postalServiceValue` field. */
  postalServiceValue?: Maybe<StringFilter>;
  /** Filter by the object’s `postalAddressId` field. */
  postalAddressId?: Maybe<UuidFilter>;
  /** Filter by the object’s `postalAddress` field. */
  postalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyDiffAddress` field. */
  obtainCopyDiffAddress?: Maybe<BooleanFilter>;
  /** Filter by the object’s `physicianPostalAddress` field. */
  physicianPostalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `obtainCopyMethodId` field. */
  obtainCopyMethodId?: Maybe<IntFilter>;
  /** Filter by the object’s `obtainCopyMethodValue` field. */
  obtainCopyMethodValue?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<RequestsOnBehalfFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<RequestsOnBehalfFilter>>;
  /** Negates the expression. */
  not?: Maybe<RequestsOnBehalfFilter>;
};

/** A connection to a list of `RequestsOnBehalf` values. */
export type RequestsOnBehalvesConnection = {
  __typename?: 'RequestsOnBehalvesConnection';
  /** A list of `RequestsOnBehalf` objects. */
  nodes: Array<Maybe<RequestsOnBehalf>>;
  /** A list of edges which contains the `RequestsOnBehalf` and cursor to aid in pagination. */
  edges: Array<RequestsOnBehalvesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `RequestsOnBehalf` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `RequestsOnBehalf` edge in the connection. */
export type RequestsOnBehalvesEdge = {
  __typename?: 'RequestsOnBehalvesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `RequestsOnBehalf` at the end of the edge. */
  node?: Maybe<RequestsOnBehalf>;
};

/** Methods to use when ordering `RequestsOnBehalf`. */
export enum RequestsOnBehalvesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  IssueDescriptionMasterValueAsc = 'ISSUE_DESCRIPTION_MASTER_VALUE_ASC',
  IssueDescriptionMasterValueDesc = 'ISSUE_DESCRIPTION_MASTER_VALUE_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DestinationNatureValueAsc = 'DESTINATION_NATURE_VALUE_ASC',
  DestinationNatureValueDesc = 'DESTINATION_NATURE_VALUE_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequestTypeAsc = 'REQUEST_TYPE_ASC',
  RequestTypeDesc = 'REQUEST_TYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  NoOfDaysToExpireAsc = 'NO_OF_DAYS_TO_EXPIRE_ASC',
  NoOfDaysToExpireDesc = 'NO_OF_DAYS_TO_EXPIRE_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  RequestTriggerStatusAsc = 'REQUEST_TRIGGER_STATUS_ASC',
  RequestTriggerStatusDesc = 'REQUEST_TRIGGER_STATUS_DESC',
  HasMentalHealthConditionAsc = 'HAS_MENTAL_HEALTH_CONDITION_ASC',
  HasMentalHealthConditionDesc = 'HAS_MENTAL_HEALTH_CONDITION_DESC',
  HasSexualReproductiveHealthConditionAsc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_ASC',
  HasSexualReproductiveHealthConditionDesc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_DESC',
  HasSubstanceUseDisorderConditionAsc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_ASC',
  HasSubstanceUseDisorderConditionDesc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  AdditionalNotesAsc = 'ADDITIONAL_NOTES_ASC',
  AdditionalNotesDesc = 'ADDITIONAL_NOTES_DESC',
  PartyRelationAsc = 'PARTY_RELATION_ASC',
  PartyRelationDesc = 'PARTY_RELATION_DESC',
  IsDependentAsc = 'IS_DEPENDENT_ASC',
  IsDependentDesc = 'IS_DEPENDENT_DESC',
  RelationshipIdAsc = 'RELATIONSHIP_ID_ASC',
  RelationshipIdDesc = 'RELATIONSHIP_ID_DESC',
  RelationshipValueAsc = 'RELATIONSHIP_VALUE_ASC',
  RelationshipValueDesc = 'RELATIONSHIP_VALUE_DESC',
  PostalServiceIdAsc = 'POSTAL_SERVICE_ID_ASC',
  PostalServiceIdDesc = 'POSTAL_SERVICE_ID_DESC',
  PostalServiceValueAsc = 'POSTAL_SERVICE_VALUE_ASC',
  PostalServiceValueDesc = 'POSTAL_SERVICE_VALUE_DESC',
  PostalAddressIdAsc = 'POSTAL_ADDRESS_ID_ASC',
  PostalAddressIdDesc = 'POSTAL_ADDRESS_ID_DESC',
  PostalAddressAsc = 'POSTAL_ADDRESS_ASC',
  PostalAddressDesc = 'POSTAL_ADDRESS_DESC',
  ObtainCopyDiffAddressAsc = 'OBTAIN_COPY_DIFF_ADDRESS_ASC',
  ObtainCopyDiffAddressDesc = 'OBTAIN_COPY_DIFF_ADDRESS_DESC',
  PhysicianPostalAddressAsc = 'PHYSICIAN_POSTAL_ADDRESS_ASC',
  PhysicianPostalAddressDesc = 'PHYSICIAN_POSTAL_ADDRESS_DESC',
  ObtainCopyMethodIdAsc = 'OBTAIN_COPY_METHOD_ID_ASC',
  ObtainCopyMethodIdDesc = 'OBTAIN_COPY_METHOD_ID_DESC',
  ObtainCopyMethodValueAsc = 'OBTAIN_COPY_METHOD_VALUE_ASC',
  ObtainCopyMethodValueDesc = 'OBTAIN_COPY_METHOD_VALUE_DESC'
}

/** Methods to use when ordering `Request`. */
export enum RequestsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RequestTypeIdAsc = 'REQUEST_TYPE_ID_ASC',
  RequestTypeIdDesc = 'REQUEST_TYPE_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  RequestPriorityIdAsc = 'REQUEST_PRIORITY_ID_ASC',
  RequestPriorityIdDesc = 'REQUEST_PRIORITY_ID_DESC',
  RequestStatusIdAsc = 'REQUEST_STATUS_ID_ASC',
  RequestStatusIdDesc = 'REQUEST_STATUS_ID_DESC',
  TrackIdAsc = 'TRACK_ID_ASC',
  TrackIdDesc = 'TRACK_ID_DESC',
  CommunicationRequestIdAsc = 'COMMUNICATION_REQUEST_ID_ASC',
  CommunicationRequestIdDesc = 'COMMUNICATION_REQUEST_ID_DESC',
  IssueImpactMasterIdAsc = 'ISSUE_IMPACT_MASTER_ID_ASC',
  IssueImpactMasterIdDesc = 'ISSUE_IMPACT_MASTER_ID_DESC',
  ImpactSeverityIdAsc = 'IMPACT_SEVERITY_ID_ASC',
  ImpactSeverityIdDesc = 'IMPACT_SEVERITY_ID_DESC',
  IssueDescriptionMasterIdAsc = 'ISSUE_DESCRIPTION_MASTER_ID_ASC',
  IssueDescriptionMasterIdDesc = 'ISSUE_DESCRIPTION_MASTER_ID_DESC',
  IssueDescriptionMasterValueAsc = 'ISSUE_DESCRIPTION_MASTER_VALUE_ASC',
  IssueDescriptionMasterValueDesc = 'ISSUE_DESCRIPTION_MASTER_VALUE_DESC',
  SourceNatureIdAsc = 'SOURCE_NATURE_ID_ASC',
  SourceNatureIdDesc = 'SOURCE_NATURE_ID_DESC',
  SourceNatureAsc = 'SOURCE_NATURE_ASC',
  SourceNatureDesc = 'SOURCE_NATURE_DESC',
  DestinationNatureIdAsc = 'DESTINATION_NATURE_ID_ASC',
  DestinationNatureIdDesc = 'DESTINATION_NATURE_ID_DESC',
  DestinationNatureValueAsc = 'DESTINATION_NATURE_VALUE_ASC',
  DestinationNatureValueDesc = 'DESTINATION_NATURE_VALUE_DESC',
  DeliverFromAsc = 'DELIVER_FROM_ASC',
  DeliverFromDesc = 'DELIVER_FROM_DESC',
  OrganizationGroupIdAsc = 'ORGANIZATION_GROUP_ID_ASC',
  OrganizationGroupIdDesc = 'ORGANIZATION_GROUP_ID_DESC',
  DepartmentIdAsc = 'DEPARTMENT_ID_ASC',
  DepartmentIdDesc = 'DEPARTMENT_ID_DESC',
  DurationOfProblemEncounteringAsc = 'DURATION_OF_PROBLEM_ENCOUNTERING_ASC',
  DurationOfProblemEncounteringDesc = 'DURATION_OF_PROBLEM_ENCOUNTERING_DESC',
  DisorderDisclosureAuthorizationFileIdAsc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_ASC',
  DisorderDisclosureAuthorizationFileIdDesc = 'DISORDER_DISCLOSURE_AUTHORIZATION_FILE_ID_DESC',
  HipaaAuthorizationFileIdAsc = 'HIPAA_AUTHORIZATION_FILE_ID_ASC',
  HipaaAuthorizationFileIdDesc = 'HIPAA_AUTHORIZATION_FILE_ID_DESC',
  MedicalRequestFormFileIdAsc = 'MEDICAL_REQUEST_FORM_FILE_ID_ASC',
  MedicalRequestFormFileIdDesc = 'MEDICAL_REQUEST_FORM_FILE_ID_DESC',
  AssignToPersonIdAsc = 'ASSIGN_TO_PERSON_ID_ASC',
  AssignToPersonIdDesc = 'ASSIGN_TO_PERSON_ID_DESC',
  MrnAsc = 'MRN_ASC',
  MrnDesc = 'MRN_DESC',
  HasSensitiveInformationAsc = 'HAS_SENSITIVE_INFORMATION_ASC',
  HasSensitiveInformationDesc = 'HAS_SENSITIVE_INFORMATION_DESC',
  ContactPersonallyValueAsc = 'CONTACT_PERSONALLY_VALUE_ASC',
  ContactPersonallyValueDesc = 'CONTACT_PERSONALLY_VALUE_DESC',
  ContactByMailValueAsc = 'CONTACT_BY_MAIL_VALUE_ASC',
  ContactByMailValueDesc = 'CONTACT_BY_MAIL_VALUE_DESC',
  ContactByPhoneValueAsc = 'CONTACT_BY_PHONE_VALUE_ASC',
  ContactByPhoneValueDesc = 'CONTACT_BY_PHONE_VALUE_DESC',
  ContactBySmsValueAsc = 'CONTACT_BY_SMS_VALUE_ASC',
  ContactBySmsValueDesc = 'CONTACT_BY_SMS_VALUE_DESC',
  HasSignedRequestAsc = 'HAS_SIGNED_REQUEST_ASC',
  HasSignedRequestDesc = 'HAS_SIGNED_REQUEST_DESC',
  RecordsRequestedFromAsc = 'RECORDS_REQUESTED_FROM_ASC',
  RecordsRequestedFromDesc = 'RECORDS_REQUESTED_FROM_DESC',
  RecordsRequestedToAsc = 'RECORDS_REQUESTED_TO_ASC',
  RecordsRequestedToDesc = 'RECORDS_REQUESTED_TO_DESC',
  CategoryTypeAsc = 'CATEGORY_TYPE_ASC',
  CategoryTypeDesc = 'CATEGORY_TYPE_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  RequesterAsc = 'REQUESTER_ASC',
  RequesterDesc = 'REQUESTER_DESC',
  ReasonAsc = 'REASON_ASC',
  ReasonDesc = 'REASON_DESC',
  ChangeRequestAsc = 'CHANGE_REQUEST_ASC',
  ChangeRequestDesc = 'CHANGE_REQUEST_DESC',
  ProviderAsc = 'PROVIDER_ASC',
  ProviderDesc = 'PROVIDER_DESC',
  ServicedDateAsc = 'SERVICED_DATE_ASC',
  ServicedDateDesc = 'SERVICED_DATE_DESC',
  HealthInformationAuthAsc = 'HEALTH_INFORMATION_AUTH_ASC',
  HealthInformationAuthDesc = 'HEALTH_INFORMATION_AUTH_DESC',
  DisorderRequestAuthAsc = 'DISORDER_REQUEST_AUTH_ASC',
  DisorderRequestAuthDesc = 'DISORDER_REQUEST_AUTH_DESC',
  IsRequestedSupportAsc = 'IS_REQUESTED_SUPPORT_ASC',
  IsRequestedSupportDesc = 'IS_REQUESTED_SUPPORT_DESC',
  IsInspectAsc = 'IS_INSPECT_ASC',
  IsInspectDesc = 'IS_INSPECT_DESC',
  IsObtainCopyAsc = 'IS_OBTAIN_COPY_ASC',
  IsObtainCopyDesc = 'IS_OBTAIN_COPY_DESC',
  HasPersonalRepresentativeAsc = 'HAS_PERSONAL_REPRESENTATIVE_ASC',
  HasPersonalRepresentativeDesc = 'HAS_PERSONAL_REPRESENTATIVE_DESC',
  ProxyDocumentAsc = 'PROXY_DOCUMENT_ASC',
  ProxyDocumentDesc = 'PROXY_DOCUMENT_DESC',
  SignatureIdAsc = 'SIGNATURE_ID_ASC',
  SignatureIdDesc = 'SIGNATURE_ID_DESC',
  RequestTypeAsc = 'REQUEST_TYPE_ASC',
  RequestTypeDesc = 'REQUEST_TYPE_DESC',
  RequestpriorityAsc = 'REQUESTPRIORITY_ASC',
  RequestpriorityDesc = 'REQUESTPRIORITY_DESC',
  SourceinstitutionnameAsc = 'SOURCEINSTITUTIONNAME_ASC',
  SourceinstitutionnameDesc = 'SOURCEINSTITUTIONNAME_DESC',
  DepartmentnameAsc = 'DEPARTMENTNAME_ASC',
  DepartmentnameDesc = 'DEPARTMENTNAME_DESC',
  OrganizationgroupnameAsc = 'ORGANIZATIONGROUPNAME_ASC',
  OrganizationgroupnameDesc = 'ORGANIZATIONGROUPNAME_DESC',
  SuffixAsc = 'SUFFIX_ASC',
  SuffixDesc = 'SUFFIX_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PreviousNameAsc = 'PREVIOUS_NAME_ASC',
  PreviousNameDesc = 'PREVIOUS_NAME_DESC',
  PreferredPronounsIdAsc = 'PREFERRED_PRONOUNS_ID_ASC',
  PreferredPronounsIdDesc = 'PREFERRED_PRONOUNS_ID_DESC',
  PreferredPronounsAsc = 'PREFERRED_PRONOUNS_ASC',
  PreferredPronounsDesc = 'PREFERRED_PRONOUNS_DESC',
  SexAsc = 'SEX_ASC',
  SexDesc = 'SEX_DESC',
  GenderAsc = 'GENDER_ASC',
  GenderDesc = 'GENDER_DESC',
  PreferredLanguageIdAsc = 'PREFERRED_LANGUAGE_ID_ASC',
  PreferredLanguageIdDesc = 'PREFERRED_LANGUAGE_ID_DESC',
  PreferredLanguageValueAsc = 'PREFERRED_LANGUAGE_VALUE_ASC',
  PreferredLanguageValueDesc = 'PREFERRED_LANGUAGE_VALUE_DESC',
  ElectronicDetailsAsc = 'ELECTRONIC_DETAILS_ASC',
  ElectronicDetailsDesc = 'ELECTRONIC_DETAILS_DESC',
  BirthDateAsc = 'BIRTH_DATE_ASC',
  BirthDateDesc = 'BIRTH_DATE_DESC',
  AddressLine1Asc = 'ADDRESS_LINE1_ASC',
  AddressLine1Desc = 'ADDRESS_LINE1_DESC',
  AddressLine2Asc = 'ADDRESS_LINE2_ASC',
  AddressLine2Desc = 'ADDRESS_LINE2_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  StateIdAsc = 'STATE_ID_ASC',
  StateIdDesc = 'STATE_ID_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC',
  AddressZipAsc = 'ADDRESS_ZIP_ASC',
  AddressZipDesc = 'ADDRESS_ZIP_DESC',
  PreviousAddressAsc = 'PREVIOUS_ADDRESS_ASC',
  PreviousAddressDesc = 'PREVIOUS_ADDRESS_DESC',
  IssueImpactMasterValueAsc = 'ISSUE_IMPACT_MASTER_VALUE_ASC',
  IssueImpactMasterValueDesc = 'ISSUE_IMPACT_MASTER_VALUE_DESC',
  RequeststatusAsc = 'REQUESTSTATUS_ASC',
  RequeststatusDesc = 'REQUESTSTATUS_DESC',
  CreatedfnameAsc = 'CREATEDFNAME_ASC',
  CreatedfnameDesc = 'CREATEDFNAME_DESC',
  CreatedmnameAsc = 'CREATEDMNAME_ASC',
  CreatedmnameDesc = 'CREATEDMNAME_DESC',
  CreatedlastnameAsc = 'CREATEDLASTNAME_ASC',
  CreatedlastnameDesc = 'CREATEDLASTNAME_DESC',
  PersontypeAsc = 'PERSONTYPE_ASC',
  PersontypeDesc = 'PERSONTYPE_DESC',
  AssignedfnameAsc = 'ASSIGNEDFNAME_ASC',
  AssignedfnameDesc = 'ASSIGNEDFNAME_DESC',
  AssignedmnameAsc = 'ASSIGNEDMNAME_ASC',
  AssignedmnameDesc = 'ASSIGNEDMNAME_DESC',
  AssignedlastnameAsc = 'ASSIGNEDLASTNAME_ASC',
  AssignedlastnameDesc = 'ASSIGNEDLASTNAME_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  PanAsc = 'PAN_ASC',
  PanDesc = 'PAN_DESC',
  AttachmentAsc = 'ATTACHMENT_ASC',
  AttachmentDesc = 'ATTACHMENT_DESC',
  BillingRequestCategoryIdAsc = 'BILLING_REQUEST_CATEGORY_ID_ASC',
  BillingRequestCategoryIdDesc = 'BILLING_REQUEST_CATEGORY_ID_DESC',
  OrganizationIdAsc = 'ORGANIZATION_ID_ASC',
  OrganizationIdDesc = 'ORGANIZATION_ID_DESC',
  ContactDataAsc = 'CONTACT_DATA_ASC',
  ContactDataDesc = 'CONTACT_DATA_DESC',
  RequestCategoryNameAsc = 'REQUEST_CATEGORY_NAME_ASC',
  RequestCategoryNameDesc = 'REQUEST_CATEGORY_NAME_DESC',
  PhoneNumberAsc = 'PHONE_NUMBER_ASC',
  PhoneNumberDesc = 'PHONE_NUMBER_DESC',
  ChannelNameAsc = 'CHANNEL_NAME_ASC',
  ChannelNameDesc = 'CHANNEL_NAME_DESC',
  BillingRequestTypeIdAsc = 'BILLING_REQUEST_TYPE_ID_ASC',
  BillingRequestTypeIdDesc = 'BILLING_REQUEST_TYPE_ID_DESC',
  RepresentNameAsc = 'REPRESENT_NAME_ASC',
  RepresentNameDesc = 'REPRESENT_NAME_DESC',
  RepresentMailAsc = 'REPRESENT_MAIL_ASC',
  RepresentMailDesc = 'REPRESENT_MAIL_DESC',
  AddendumRequestFileIdAsc = 'ADDENDUM_REQUEST_FILE_ID_ASC',
  AddendumRequestFileIdDesc = 'ADDENDUM_REQUEST_FILE_ID_DESC',
  EditedImageIdAsc = 'EDITED_IMAGE_ID_ASC',
  EditedImageIdDesc = 'EDITED_IMAGE_ID_DESC',
  AddendumDeniedSignatureIdAsc = 'ADDENDUM_DENIED_SIGNATURE_ID_ASC',
  AddendumDeniedSignatureIdDesc = 'ADDENDUM_DENIED_SIGNATURE_ID_DESC',
  ImpactSeverityValueAsc = 'IMPACT_SEVERITY_VALUE_ASC',
  ImpactSeverityValueDesc = 'IMPACT_SEVERITY_VALUE_DESC',
  SubstanceDisorderInformationIdAsc = 'SUBSTANCE_DISORDER_INFORMATION_ID_ASC',
  SubstanceDisorderInformationIdDesc = 'SUBSTANCE_DISORDER_INFORMATION_ID_DESC',
  SubstanceDisorderInformationAsc = 'SUBSTANCE_DISORDER_INFORMATION_ASC',
  SubstanceDisorderInformationDesc = 'SUBSTANCE_DISORDER_INFORMATION_DESC',
  NoOfDaysAsc = 'NO_OF_DAYS_ASC',
  NoOfDaysDesc = 'NO_OF_DAYS_DESC',
  NoOfDaysToExpireAsc = 'NO_OF_DAYS_TO_EXPIRE_ASC',
  NoOfDaysToExpireDesc = 'NO_OF_DAYS_TO_EXPIRE_DESC',
  AboutToExpireAsc = 'ABOUT_TO_EXPIRE_ASC',
  AboutToExpireDesc = 'ABOUT_TO_EXPIRE_DESC',
  OutstandingRequestAsc = 'OUTSTANDING_REQUEST_ASC',
  OutstandingRequestDesc = 'OUTSTANDING_REQUEST_DESC',
  ExpiredAsc = 'EXPIRED_ASC',
  ExpiredDesc = 'EXPIRED_DESC',
  RequestTriggerStatusAsc = 'REQUEST_TRIGGER_STATUS_ASC',
  RequestTriggerStatusDesc = 'REQUEST_TRIGGER_STATUS_DESC',
  HasMentalHealthConditionAsc = 'HAS_MENTAL_HEALTH_CONDITION_ASC',
  HasMentalHealthConditionDesc = 'HAS_MENTAL_HEALTH_CONDITION_DESC',
  HasSexualReproductiveHealthConditionAsc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_ASC',
  HasSexualReproductiveHealthConditionDesc = 'HAS_SEXUAL_REPRODUCTIVE_HEALTH_CONDITION_DESC',
  HasSubstanceUseDisorderConditionAsc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_ASC',
  HasSubstanceUseDisorderConditionDesc = 'HAS_SUBSTANCE_USE_DISORDER_CONDITION_DESC',
  SsnAsc = 'SSN_ASC',
  SsnDesc = 'SSN_DESC',
  AdditionalNotesAsc = 'ADDITIONAL_NOTES_ASC',
  AdditionalNotesDesc = 'ADDITIONAL_NOTES_DESC',
  PartyRelationAsc = 'PARTY_RELATION_ASC',
  PartyRelationDesc = 'PARTY_RELATION_DESC',
  IsDependentAsc = 'IS_DEPENDENT_ASC',
  IsDependentDesc = 'IS_DEPENDENT_DESC',
  RelationshipIdAsc = 'RELATIONSHIP_ID_ASC',
  RelationshipIdDesc = 'RELATIONSHIP_ID_DESC',
  RelationshipValueAsc = 'RELATIONSHIP_VALUE_ASC',
  RelationshipValueDesc = 'RELATIONSHIP_VALUE_DESC',
  PostalServiceIdAsc = 'POSTAL_SERVICE_ID_ASC',
  PostalServiceIdDesc = 'POSTAL_SERVICE_ID_DESC',
  PostalServiceValueAsc = 'POSTAL_SERVICE_VALUE_ASC',
  PostalServiceValueDesc = 'POSTAL_SERVICE_VALUE_DESC',
  PostalAddressIdAsc = 'POSTAL_ADDRESS_ID_ASC',
  PostalAddressIdDesc = 'POSTAL_ADDRESS_ID_DESC',
  PostalAddressAsc = 'POSTAL_ADDRESS_ASC',
  PostalAddressDesc = 'POSTAL_ADDRESS_DESC',
  ObtainCopyDiffAddressAsc = 'OBTAIN_COPY_DIFF_ADDRESS_ASC',
  ObtainCopyDiffAddressDesc = 'OBTAIN_COPY_DIFF_ADDRESS_DESC',
  PhysicianPostalAddressAsc = 'PHYSICIAN_POSTAL_ADDRESS_ASC',
  PhysicianPostalAddressDesc = 'PHYSICIAN_POSTAL_ADDRESS_DESC',
  ObtainCopyMethodIdAsc = 'OBTAIN_COPY_METHOD_ID_ASC',
  ObtainCopyMethodIdDesc = 'OBTAIN_COPY_METHOD_ID_DESC',
  ObtainCopyMethodValueAsc = 'OBTAIN_COPY_METHOD_VALUE_ASC',
  ObtainCopyMethodValueDesc = 'OBTAIN_COPY_METHOD_VALUE_DESC'
}

export type ResponseRecordStatus = {
  __typename?: 'ResponseRecordStatus';
  code?: Maybe<Scalars['Int']>;
  message?: Maybe<Scalars['String']>;
};

export type ResponseResultStatus = {
  __typename?: 'ResponseResultStatus';
  status?: Maybe<ResponseRecordStatus>;
  success?: Maybe<Scalars['Boolean']>;
  data?: Maybe<TourResponseType>;
};

/** All input for the `runLighthouse` mutation. */
export type RunLighthouseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** The output of our `runLighthouse` mutation. */
export type RunLighthousePayload = {
  __typename?: 'RunLighthousePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** A filter to be used against SatGitlabInstitutionProfileLhcFormId fields. All fields are combined with a logical ‘and.’ */
export type SatGitlabInstitutionProfileLhcFormIdFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['SatGitlabInstitutionProfileLhcFormId']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['SatGitlabInstitutionProfileLhcFormId']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['SatGitlabInstitutionProfileLhcFormId']>;
};


/** A filter to be used against SatGitlabOfferingProfileLhcFormId fields. All fields are combined with a logical ‘and.’ */
export type SatGitlabOfferingProfileLhcFormIdFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['SatGitlabOfferingProfileLhcFormId']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['SatGitlabOfferingProfileLhcFormId']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['SatGitlabOfferingProfileLhcFormId']>;
};

/** All input for the `saveAddSuggestHdo` mutation. */
export type SaveAddSuggestHdoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  suggestInput?: Maybe<AddSuggestHdoInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `saveAddSuggestHdo` mutation. */
export type SaveAddSuggestHdoPayload = {
  __typename?: 'SaveAddSuggestHdoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitResponseHdo?: Maybe<GitResponseHdo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveAddSuggestOffering` mutation. */
export type SaveAddSuggestOfferingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  suggestInput?: Maybe<AddSuggestInputRecordInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `saveAddSuggestOffering` mutation. */
export type SaveAddSuggestOfferingPayload = {
  __typename?: 'SaveAddSuggestOfferingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitResponse?: Maybe<GitResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveAddVulnerability` mutation. */
export type SaveAddVulnerabilityInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  suggestInput?: Maybe<AddSuggestInputVulInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `saveAddVulnerability` mutation. */
export type SaveAddVulnerabilityPayload = {
  __typename?: 'SaveAddVulnerabilityPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitResponse?: Maybe<GitResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveCommsMetaData` mutation. */
export type SaveCommsMetaDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  jsr?: Maybe<InstitutionProfileDatumInput>;
  appArea?: Maybe<Scalars['String']>;
};

/** The output of our `saveCommsMetaData` mutation. */
export type SaveCommsMetaDataPayload = {
  __typename?: 'SaveCommsMetaDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveCommsMetaDataV1` mutation. */
export type SaveCommsMetaDataV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  jsr?: Maybe<InstitutionProfileInput>;
};

/** The output of our `saveCommsMetaDataV1` mutation. */
export type SaveCommsMetaDataV1Payload = {
  __typename?: 'SaveCommsMetaDataV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveCommsMetaDataV2` mutation. */
export type SaveCommsMetaDataV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jsonType?: Maybe<Scalars['String']>;
  jsr?: Maybe<InstitutionProfileInput>;
  appArea?: Maybe<Scalars['String']>;
};

/** The output of our `saveCommsMetaDataV2` mutation. */
export type SaveCommsMetaDataV2Payload = {
  __typename?: 'SaveCommsMetaDataV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveExternalIntegration` mutation. */
export type SaveExternalIntegrationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pdr?: Maybe<ExternalIntegrationInfoInput>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `saveExternalIntegration` mutation. */
export type SaveExternalIntegrationPayload = {
  __typename?: 'SaveExternalIntegrationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveSurveyForm` mutation. */
export type SaveSurveyFormInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  metaData?: Maybe<Scalars['JSON']>;
};

/** The output of our `saveSurveyForm` mutation. */
export type SaveSurveyFormPayload = {
  __typename?: 'SaveSurveyFormPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveUserProfile` mutation. */
export type SaveUserProfileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userProfile?: Maybe<MedigyUserProfileInput>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `saveUserProfile` mutation. */
export type SaveUserProfilePayload = {
  __typename?: 'SaveUserProfilePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitResponse?: Maybe<GitResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveUserTourFeedback` mutation. */
export type SaveUserTourFeedbackInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  feedbackTypeName?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  feedback?: Maybe<Scalars['String']>;
};

/** The output of our `saveUserTourFeedback` mutation. */
export type SaveUserTourFeedbackPayload = {
  __typename?: 'SaveUserTourFeedbackPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `saveUserTourProgress` mutation. */
export type SaveUserTourProgressInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tourData?: Maybe<UserTourProgressTypeInput>;
  feedbackData?: Maybe<UserFeedbackDatumInput>;
};

/** The output of our `saveUserTourProgress` mutation. */
export type SaveUserTourProgressPayload = {
  __typename?: 'SaveUserTourProgressPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  responseResultStatus?: Maybe<ResponseResultStatus>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendEmailContent` mutation. */
export type SendEmailContentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
};

/** The output of our `sendEmailContent` mutation. */
export type SendEmailContentPayload = {
  __typename?: 'SendEmailContentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendEmailToUnverifiedUser` mutation. */
export type SendEmailToUnverifiedUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['UUID']>;
};

/** The output of our `sendEmailToUnverifiedUser` mutation. */
export type SendEmailToUnverifiedUserPayload = {
  __typename?: 'SendEmailToUnverifiedUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendInstitutionInviteEmail` mutation. */
export type SendInstitutionInviteEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionInviteInput?: Maybe<InstitutionInviteInputRecordInput>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `sendInstitutionInviteEmail` mutation. */
export type SendInstitutionInviteEmailPayload = {
  __typename?: 'SendInstitutionInviteEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  institutionInviteDataResult?: Maybe<InstitutionInviteDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendOfferingInviteEmail` mutation. */
export type SendOfferingInviteEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  offeringInviteInput?: Maybe<OfferingInviteInputRecordInput>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `sendOfferingInviteEmail` mutation. */
export type SendOfferingInviteEmailPayload = {
  __typename?: 'SendOfferingInviteEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  offeringInviteDataResult?: Maybe<OfferingInviteDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendReminderEmail` mutation. */
export type SendReminderEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transactionRecordId?: Maybe<Scalars['UUID']>;
  notificationCode?: Maybe<Scalars['String']>;
};

/** The output of our `sendReminderEmail` mutation. */
export type SendReminderEmailPayload = {
  __typename?: 'SendReminderEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  reminderNotificationResult?: Maybe<ReminderNotificationResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sendReminderEmailTestV1` mutation. */
export type SendReminderEmailTestV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transactionRecordId?: Maybe<Scalars['UUID']>;
  notificationCode?: Maybe<Scalars['String']>;
};

/** The output of our `sendReminderEmailTestV1` mutation. */
export type SendReminderEmailTestV1Payload = {
  __typename?: 'SendReminderEmailTestV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  reminderNotificationResult?: Maybe<ReminderNotificationResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `sentRequestToProvider` mutation. */
export type SentRequestToProviderInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  pendingRequestId?: Maybe<Scalars['UUID']>;
};

/** The output of our `sentRequestToProvider` mutation. */
export type SentRequestToProviderPayload = {
  __typename?: 'SentRequestToProviderPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userInviteId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** This view is used as dropdown for service category. */
export type ServiceCategoryMaster = {
  __typename?: 'ServiceCategoryMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `ServiceCategoryMaster` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ServiceCategoryMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `ServiceCategoryMaster` object types. All fields are combined with a logical ‘and.’ */
export type ServiceCategoryMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ServiceCategoryMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ServiceCategoryMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<ServiceCategoryMasterFilter>;
};

/** An input for mutations affecting `ServiceCategoryMaster` */
export type ServiceCategoryMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `ServiceCategoryMaster` values. */
export type ServiceCategoryMastersConnection = {
  __typename?: 'ServiceCategoryMastersConnection';
  /** A list of `ServiceCategoryMaster` objects. */
  nodes: Array<Maybe<ServiceCategoryMaster>>;
  /** A list of edges which contains the `ServiceCategoryMaster` and cursor to aid in pagination. */
  edges: Array<ServiceCategoryMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ServiceCategoryMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ServiceCategoryMaster` edge in the connection. */
export type ServiceCategoryMastersEdge = {
  __typename?: 'ServiceCategoryMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ServiceCategoryMaster` at the end of the edge. */
  node?: Maybe<ServiceCategoryMaster>;
};

/** Methods to use when ordering `ServiceCategoryMaster`. */
export enum ServiceCategoryMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** An input for mutations affecting `SexInfo` */
export type SexInfoInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  other?: Maybe<Scalars['Boolean']>;
  otherValue?: Maybe<Scalars['String']>;
};

export type SexMasterV1 = {
  __typename?: 'SexMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SexMasterV1` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type SexMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SexMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type SexMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SexMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SexMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<SexMasterV1Filter>;
};

/** An input for mutations affecting `SexMasterV1` */
export type SexMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `SexMasterV1` values. */
export type SexMasterV1sConnection = {
  __typename?: 'SexMasterV1sConnection';
  /** A list of `SexMasterV1` objects. */
  nodes: Array<Maybe<SexMasterV1>>;
  /** A list of edges which contains the `SexMasterV1` and cursor to aid in pagination. */
  edges: Array<SexMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SexMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SexMasterV1` edge in the connection. */
export type SexMasterV1sEdge = {
  __typename?: 'SexMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SexMasterV1` at the end of the edge. */
  node?: Maybe<SexMasterV1>;
};

/** Methods to use when ordering `SexMasterV1`. */
export enum SexMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type SexualOrientationMasterV1 = {
  __typename?: 'SexualOrientationMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SexualOrientationMasterV1` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type SexualOrientationMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SexualOrientationMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type SexualOrientationMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SexualOrientationMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SexualOrientationMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<SexualOrientationMasterV1Filter>;
};

/** An input for mutations affecting `SexualOrientationMasterV1` */
export type SexualOrientationMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `SexualOrientationMasterV1` values. */
export type SexualOrientationMasterV1sConnection = {
  __typename?: 'SexualOrientationMasterV1sConnection';
  /** A list of `SexualOrientationMasterV1` objects. */
  nodes: Array<Maybe<SexualOrientationMasterV1>>;
  /** A list of edges which contains the `SexualOrientationMasterV1` and cursor to aid in pagination. */
  edges: Array<SexualOrientationMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SexualOrientationMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SexualOrientationMasterV1` edge in the connection. */
export type SexualOrientationMasterV1sEdge = {
  __typename?: 'SexualOrientationMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SexualOrientationMasterV1` at the end of the edge. */
  node?: Maybe<SexualOrientationMasterV1>;
};

/** Methods to use when ordering `SexualOrientationMasterV1`. */
export enum SexualOrientationMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** An input for mutations affecting `SignupUserIamInputRecord` */
export type SignupUserIamInputRecordInput = {
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  tenantid?: Maybe<Scalars['Int']>;
  baseurl?: Maybe<Scalars['String']>;
};

export type SignupUserIamResult = {
  __typename?: 'SignupUserIamResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `SignupUserInputRecord` */
export type SignupUserInputRecordInput = {
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  tenantid?: Maybe<Scalars['Int']>;
  baseurl?: Maybe<Scalars['String']>;
};

export type SignupUserResult = {
  __typename?: 'SignupUserResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type SourceNatureMaster = {
  __typename?: 'SourceNatureMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SourceNatureMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type SourceNatureMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SourceNatureMaster` object types. All fields are combined with a logical ‘and.’ */
export type SourceNatureMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SourceNatureMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SourceNatureMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<SourceNatureMasterFilter>;
};

/** An input for mutations affecting `SourceNatureMaster` */
export type SourceNatureMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `SourceNatureMaster` values. */
export type SourceNatureMastersConnection = {
  __typename?: 'SourceNatureMastersConnection';
  /** A list of `SourceNatureMaster` objects. */
  nodes: Array<Maybe<SourceNatureMaster>>;
  /** A list of edges which contains the `SourceNatureMaster` and cursor to aid in pagination. */
  edges: Array<SourceNatureMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SourceNatureMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SourceNatureMaster` edge in the connection. */
export type SourceNatureMastersEdge = {
  __typename?: 'SourceNatureMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SourceNatureMaster` at the end of the edge. */
  node?: Maybe<SourceNatureMaster>;
};

/** Methods to use when ordering `SourceNatureMaster`. */
export enum SourceNatureMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** An input for mutations affecting `SourceOfInvitationDatum` */
export type SourceOfInvitationDatumInput = {
  name?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type StateList = {
  __typename?: 'StateList';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `StateList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type StateListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `StateList` object types. All fields are combined with a logical ‘and.’ */
export type StateListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StateListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StateListFilter>>;
  /** Negates the expression. */
  not?: Maybe<StateListFilter>;
};

/** An input for mutations affecting `StateList` */
export type StateListInput = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `StateList` values. */
export type StateListsConnection = {
  __typename?: 'StateListsConnection';
  /** A list of `StateList` objects. */
  nodes: Array<Maybe<StateList>>;
  /** A list of edges which contains the `StateList` and cursor to aid in pagination. */
  edges: Array<StateListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StateList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StateList` edge in the connection. */
export type StateListsEdge = {
  __typename?: 'StateListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StateList` at the end of the edge. */
  node?: Maybe<StateList>;
};

/** Methods to use when ordering `StateList`. */
export enum StateListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC'
}

export type StateMasterV1 = {
  __typename?: 'StateMasterV1';
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `StateMasterV1` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type StateMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `countryId` field. */
  countryId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `StateMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type StateMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `countryId` field. */
  countryId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StateMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StateMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<StateMasterV1Filter>;
};

/** An input for mutations affecting `StateMasterV1` */
export type StateMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `StateMasterV1` values. */
export type StateMasterV1sConnection = {
  __typename?: 'StateMasterV1sConnection';
  /** A list of `StateMasterV1` objects. */
  nodes: Array<Maybe<StateMasterV1>>;
  /** A list of edges which contains the `StateMasterV1` and cursor to aid in pagination. */
  edges: Array<StateMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StateMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StateMasterV1` edge in the connection. */
export type StateMasterV1sEdge = {
  __typename?: 'StateMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StateMasterV1` at the end of the edge. */
  node?: Maybe<StateMasterV1>;
};

/** Methods to use when ordering `StateMasterV1`. */
export enum StateMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  CountryIdAsc = 'COUNTRY_ID_ASC',
  CountryIdDesc = 'COUNTRY_ID_DESC'
}

export type StatusMaster = {
  __typename?: 'StatusMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `StatusMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type StatusMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `StatusMaster` object types. All fields are combined with a logical ‘and.’ */
export type StatusMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<StatusMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<StatusMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<StatusMasterFilter>;
};

/** An input for mutations affecting `StatusMaster` */
export type StatusMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `StatusMaster` values. */
export type StatusMastersConnection = {
  __typename?: 'StatusMastersConnection';
  /** A list of `StatusMaster` objects. */
  nodes: Array<Maybe<StatusMaster>>;
  /** A list of edges which contains the `StatusMaster` and cursor to aid in pagination. */
  edges: Array<StatusMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StatusMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `StatusMaster` edge in the connection. */
export type StatusMastersEdge = {
  __typename?: 'StatusMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `StatusMaster` at the end of the edge. */
  node?: Maybe<StatusMaster>;
};

/** Methods to use when ordering `StatusMaster`. */
export enum StatusMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['String']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['String']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['String']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['String']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['String']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['String']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['String']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['String']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['String']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['String']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['String']>;
  /** Matches the specified pattern using the SQL standard's definition of a regular expression. */
  similarTo?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern using the SQL standard's definition of a regular expression. */
  notSimilarTo?: Maybe<Scalars['String']>;
};

/** A filter to be used against String List fields. All fields are combined with a logical ‘and.’ */
export type StringListFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Contains the specified list of values. */
  contains?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Contained by the specified list of values. */
  containedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Any array item is equal to the specified value. */
  anyEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: Maybe<Scalars['String']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: Maybe<Scalars['String']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: Maybe<Scalars['String']>;
};

export type SubstanceDisorderAuthorizationV1 = {
  __typename?: 'SubstanceDisorderAuthorizationV1';
  id?: Maybe<Scalars['UUID']>;
  purpose?: Maybe<Scalars['String']>;
  authorizationOthers?: Maybe<Scalars['String']>;
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  others?: Maybe<Scalars['String']>;
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
  startFrom?: Maybe<Scalars['Datetime']>;
  endTo?: Maybe<Scalars['Datetime']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  signatureFile?: Maybe<Scalars['UUID']>;
  receivePerson?: Maybe<Scalars['String']>;
  useDisorderAuthorizationTitleId?: Maybe<Scalars['Int']>;
  useDisorderAuthorizationTitle?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['UUID']>;
  disorderTreatmentProgram?: Maybe<Scalars['String']>;
  patientRepresentative?: Maybe<Scalars['String']>;
  patientRelation?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  recordStatusId?: Maybe<Scalars['Int']>;
};

/**
 * A condition to be used against `SubstanceDisorderAuthorizationV1` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type SubstanceDisorderAuthorizationV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `purpose` field. */
  purpose?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `others` field. */
  others?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requestId` field. */
  requestId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientId` field. */
  patientId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `startFrom` field. */
  startFrom?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `endTo` field. */
  endTo?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `expiryDate` field. */
  expiryDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `signatureFile` field. */
  signatureFile?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `receivePerson` field. */
  receivePerson?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `useDisorderAuthorizationTitleId` field. */
  useDisorderAuthorizationTitleId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `useDisorderAuthorizationTitle` field. */
  useDisorderAuthorizationTitle?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `image` field. */
  image?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `disorderTreatmentProgram` field. */
  disorderTreatmentProgram?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `patientRelation` field. */
  patientRelation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `SubstanceDisorderAuthorizationV1` object types. All fields are combined with a logical ‘and.’ */
export type SubstanceDisorderAuthorizationV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `purpose` field. */
  purpose?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationOthers` field. */
  authorizationOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationServiceProvidersType` field. */
  authorizationServiceProvidersType?: Maybe<IntFilter>;
  /** Filter by the object’s `authorizationServiceProvidersOthers` field. */
  authorizationServiceProvidersOthers?: Maybe<StringFilter>;
  /** Filter by the object’s `others` field. */
  others?: Maybe<StringFilter>;
  /** Filter by the object’s `authorizationExpireEvent` field. */
  authorizationExpireEvent?: Maybe<StringFilter>;
  /** Filter by the object’s `requestId` field. */
  requestId?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientId` field. */
  patientId?: Maybe<UuidFilter>;
  /** Filter by the object’s `startFrom` field. */
  startFrom?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `endTo` field. */
  endTo?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `expiryDate` field. */
  expiryDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `signatureFile` field. */
  signatureFile?: Maybe<UuidFilter>;
  /** Filter by the object’s `receivePerson` field. */
  receivePerson?: Maybe<StringFilter>;
  /** Filter by the object’s `useDisorderAuthorizationTitleId` field. */
  useDisorderAuthorizationTitleId?: Maybe<IntFilter>;
  /** Filter by the object’s `useDisorderAuthorizationTitle` field. */
  useDisorderAuthorizationTitle?: Maybe<StringFilter>;
  /** Filter by the object’s `image` field. */
  image?: Maybe<UuidFilter>;
  /** Filter by the object’s `disorderTreatmentProgram` field. */
  disorderTreatmentProgram?: Maybe<StringFilter>;
  /** Filter by the object’s `patientRepresentative` field. */
  patientRepresentative?: Maybe<StringFilter>;
  /** Filter by the object’s `patientRelation` field. */
  patientRelation?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `recordStatusId` field. */
  recordStatusId?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SubstanceDisorderAuthorizationV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SubstanceDisorderAuthorizationV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<SubstanceDisorderAuthorizationV1Filter>;
};

/** A connection to a list of `SubstanceDisorderAuthorizationV1` values. */
export type SubstanceDisorderAuthorizationV1sConnection = {
  __typename?: 'SubstanceDisorderAuthorizationV1sConnection';
  /** A list of `SubstanceDisorderAuthorizationV1` objects. */
  nodes: Array<Maybe<SubstanceDisorderAuthorizationV1>>;
  /** A list of edges which contains the `SubstanceDisorderAuthorizationV1` and cursor to aid in pagination. */
  edges: Array<SubstanceDisorderAuthorizationV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SubstanceDisorderAuthorizationV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SubstanceDisorderAuthorizationV1` edge in the connection. */
export type SubstanceDisorderAuthorizationV1sEdge = {
  __typename?: 'SubstanceDisorderAuthorizationV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SubstanceDisorderAuthorizationV1` at the end of the edge. */
  node?: Maybe<SubstanceDisorderAuthorizationV1>;
};

/** Methods to use when ordering `SubstanceDisorderAuthorizationV1`. */
export enum SubstanceDisorderAuthorizationV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PurposeAsc = 'PURPOSE_ASC',
  PurposeDesc = 'PURPOSE_DESC',
  AuthorizationOthersAsc = 'AUTHORIZATION_OTHERS_ASC',
  AuthorizationOthersDesc = 'AUTHORIZATION_OTHERS_DESC',
  AuthorizationServiceProvidersTypeAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_ASC',
  AuthorizationServiceProvidersTypeDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_TYPE_DESC',
  AuthorizationServiceProvidersOthersAsc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_ASC',
  AuthorizationServiceProvidersOthersDesc = 'AUTHORIZATION_SERVICE_PROVIDERS_OTHERS_DESC',
  OthersAsc = 'OTHERS_ASC',
  OthersDesc = 'OTHERS_DESC',
  AuthorizationExpireEventAsc = 'AUTHORIZATION_EXPIRE_EVENT_ASC',
  AuthorizationExpireEventDesc = 'AUTHORIZATION_EXPIRE_EVENT_DESC',
  RequestIdAsc = 'REQUEST_ID_ASC',
  RequestIdDesc = 'REQUEST_ID_DESC',
  PatientIdAsc = 'PATIENT_ID_ASC',
  PatientIdDesc = 'PATIENT_ID_DESC',
  StartFromAsc = 'START_FROM_ASC',
  StartFromDesc = 'START_FROM_DESC',
  EndToAsc = 'END_TO_ASC',
  EndToDesc = 'END_TO_DESC',
  ExpiryDateAsc = 'EXPIRY_DATE_ASC',
  ExpiryDateDesc = 'EXPIRY_DATE_DESC',
  SignatureFileAsc = 'SIGNATURE_FILE_ASC',
  SignatureFileDesc = 'SIGNATURE_FILE_DESC',
  ReceivePersonAsc = 'RECEIVE_PERSON_ASC',
  ReceivePersonDesc = 'RECEIVE_PERSON_DESC',
  UseDisorderAuthorizationTitleIdAsc = 'USE_DISORDER_AUTHORIZATION_TITLE_ID_ASC',
  UseDisorderAuthorizationTitleIdDesc = 'USE_DISORDER_AUTHORIZATION_TITLE_ID_DESC',
  UseDisorderAuthorizationTitleAsc = 'USE_DISORDER_AUTHORIZATION_TITLE_ASC',
  UseDisorderAuthorizationTitleDesc = 'USE_DISORDER_AUTHORIZATION_TITLE_DESC',
  ImageAsc = 'IMAGE_ASC',
  ImageDesc = 'IMAGE_DESC',
  DisorderTreatmentProgramAsc = 'DISORDER_TREATMENT_PROGRAM_ASC',
  DisorderTreatmentProgramDesc = 'DISORDER_TREATMENT_PROGRAM_DESC',
  PatientRepresentativeAsc = 'PATIENT_REPRESENTATIVE_ASC',
  PatientRepresentativeDesc = 'PATIENT_REPRESENTATIVE_DESC',
  PatientRelationAsc = 'PATIENT_RELATION_ASC',
  PatientRelationDesc = 'PATIENT_RELATION_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  RecordStatusIdAsc = 'RECORD_STATUS_ID_ASC',
  RecordStatusIdDesc = 'RECORD_STATUS_ID_DESC'
}

export type SubstanceDisorderInformationMasterV1 = {
  __typename?: 'SubstanceDisorderInformationMasterV1';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SubstanceDisorderInformationMasterV1` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type SubstanceDisorderInformationMasterV1Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SubstanceDisorderInformationMasterV1` object types. All fields are combined with a logical ‘and.’ */
export type SubstanceDisorderInformationMasterV1Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SubstanceDisorderInformationMasterV1Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SubstanceDisorderInformationMasterV1Filter>>;
  /** Negates the expression. */
  not?: Maybe<SubstanceDisorderInformationMasterV1Filter>;
};

/** An input for mutations affecting `SubstanceDisorderInformationMasterV1` */
export type SubstanceDisorderInformationMasterV1Input = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `SubstanceDisorderInformationMasterV1` values. */
export type SubstanceDisorderInformationMasterV1sConnection = {
  __typename?: 'SubstanceDisorderInformationMasterV1sConnection';
  /** A list of `SubstanceDisorderInformationMasterV1` objects. */
  nodes: Array<Maybe<SubstanceDisorderInformationMasterV1>>;
  /** A list of edges which contains the `SubstanceDisorderInformationMasterV1` and cursor to aid in pagination. */
  edges: Array<SubstanceDisorderInformationMasterV1sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SubstanceDisorderInformationMasterV1` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SubstanceDisorderInformationMasterV1` edge in the connection. */
export type SubstanceDisorderInformationMasterV1sEdge = {
  __typename?: 'SubstanceDisorderInformationMasterV1sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SubstanceDisorderInformationMasterV1` at the end of the edge. */
  node?: Maybe<SubstanceDisorderInformationMasterV1>;
};

/** Methods to use when ordering `SubstanceDisorderInformationMasterV1`. */
export enum SubstanceDisorderInformationMasterV1sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type SurveyFormUpdate = Node & {
  __typename?: 'SurveyFormUpdate';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['UUID'];
  name: Scalars['String'];
  meta: Scalars['String'];
  createdAt: Scalars['Datetime'];
  updatedAt: Scalars['Datetime'];
};

/**
 * A condition to be used against `SurveyFormUpdate` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type SurveyFormUpdateCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `meta` field. */
  meta?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `SurveyFormUpdate` object types. All fields are combined with a logical ‘and.’ */
export type SurveyFormUpdateFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `meta` field. */
  meta?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SurveyFormUpdateFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SurveyFormUpdateFilter>>;
  /** Negates the expression. */
  not?: Maybe<SurveyFormUpdateFilter>;
};

/** An input for mutations affecting `SurveyFormUpdate` */
export type SurveyFormUpdateInput = {
  id?: Maybe<Scalars['UUID']>;
  name: Scalars['String'];
  meta: Scalars['String'];
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** Represents an update to a `SurveyFormUpdate`. Fields that are set will be updated. */
export type SurveyFormUpdatePatch = {
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `SurveyFormUpdate` values. */
export type SurveyFormUpdatesConnection = {
  __typename?: 'SurveyFormUpdatesConnection';
  /** A list of `SurveyFormUpdate` objects. */
  nodes: Array<Maybe<SurveyFormUpdate>>;
  /** A list of edges which contains the `SurveyFormUpdate` and cursor to aid in pagination. */
  edges: Array<SurveyFormUpdatesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SurveyFormUpdate` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SurveyFormUpdate` edge in the connection. */
export type SurveyFormUpdatesEdge = {
  __typename?: 'SurveyFormUpdatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SurveyFormUpdate` at the end of the edge. */
  node?: Maybe<SurveyFormUpdate>;
};

/** Methods to use when ordering `SurveyFormUpdate`. */
export enum SurveyFormUpdatesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  MetaAsc = 'META_ASC',
  MetaDesc = 'META_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type SurveyList = {
  __typename?: 'SurveyList';
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `SurveyList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type SurveyListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `meta` field. */
  meta?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `SurveyList` object types. All fields are combined with a logical ‘and.’ */
export type SurveyListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `meta` field. */
  meta?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SurveyListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SurveyListFilter>>;
  /** Negates the expression. */
  not?: Maybe<SurveyListFilter>;
};

/** An input for mutations affecting `SurveyList` */
export type SurveyListInput = {
  id?: Maybe<Scalars['UUID']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `SurveyList` values. */
export type SurveyListsConnection = {
  __typename?: 'SurveyListsConnection';
  /** A list of `SurveyList` objects. */
  nodes: Array<Maybe<SurveyList>>;
  /** A list of edges which contains the `SurveyList` and cursor to aid in pagination. */
  edges: Array<SurveyListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SurveyList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SurveyList` edge in the connection. */
export type SurveyListsEdge = {
  __typename?: 'SurveyListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SurveyList` at the end of the edge. */
  node?: Maybe<SurveyList>;
};

/** Methods to use when ordering `SurveyList`. */
export enum SurveyListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  MetaAsc = 'META_ASC',
  MetaDesc = 'META_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

export type SymplurMedicalBillingOffering = {
  __typename?: 'SymplurMedicalBillingOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SymplurMedicalBillingOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type SymplurMedicalBillingOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SymplurMedicalBillingOffering` object types. All fields are combined with a logical ‘and.’ */
export type SymplurMedicalBillingOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SymplurMedicalBillingOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SymplurMedicalBillingOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<SymplurMedicalBillingOfferingFilter>;
};

/** A connection to a list of `SymplurMedicalBillingOffering` values. */
export type SymplurMedicalBillingOfferingsConnection = {
  __typename?: 'SymplurMedicalBillingOfferingsConnection';
  /** A list of `SymplurMedicalBillingOffering` objects. */
  nodes: Array<Maybe<SymplurMedicalBillingOffering>>;
  /** A list of edges which contains the `SymplurMedicalBillingOffering` and cursor to aid in pagination. */
  edges: Array<SymplurMedicalBillingOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SymplurMedicalBillingOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SymplurMedicalBillingOffering` edge in the connection. */
export type SymplurMedicalBillingOfferingsEdge = {
  __typename?: 'SymplurMedicalBillingOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SymplurMedicalBillingOffering` at the end of the edge. */
  node?: Maybe<SymplurMedicalBillingOffering>;
};

/** Methods to use when ordering `SymplurMedicalBillingOffering`. */
export enum SymplurMedicalBillingOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type SymplurMedicalDevicesOffering = {
  __typename?: 'SymplurMedicalDevicesOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SymplurMedicalDevicesOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type SymplurMedicalDevicesOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SymplurMedicalDevicesOffering` object types. All fields are combined with a logical ‘and.’ */
export type SymplurMedicalDevicesOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SymplurMedicalDevicesOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SymplurMedicalDevicesOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<SymplurMedicalDevicesOfferingFilter>;
};

/** A connection to a list of `SymplurMedicalDevicesOffering` values. */
export type SymplurMedicalDevicesOfferingsConnection = {
  __typename?: 'SymplurMedicalDevicesOfferingsConnection';
  /** A list of `SymplurMedicalDevicesOffering` objects. */
  nodes: Array<Maybe<SymplurMedicalDevicesOffering>>;
  /** A list of edges which contains the `SymplurMedicalDevicesOffering` and cursor to aid in pagination. */
  edges: Array<SymplurMedicalDevicesOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SymplurMedicalDevicesOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SymplurMedicalDevicesOffering` edge in the connection. */
export type SymplurMedicalDevicesOfferingsEdge = {
  __typename?: 'SymplurMedicalDevicesOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SymplurMedicalDevicesOffering` at the end of the edge. */
  node?: Maybe<SymplurMedicalDevicesOffering>;
};

/** Methods to use when ordering `SymplurMedicalDevicesOffering`. */
export enum SymplurMedicalDevicesOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type SymplurPatientExperienceOffering = {
  __typename?: 'SymplurPatientExperienceOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SymplurPatientExperienceOffering` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type SymplurPatientExperienceOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SymplurPatientExperienceOffering` object types. All fields are combined with a logical ‘and.’ */
export type SymplurPatientExperienceOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SymplurPatientExperienceOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SymplurPatientExperienceOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<SymplurPatientExperienceOfferingFilter>;
};

/** A connection to a list of `SymplurPatientExperienceOffering` values. */
export type SymplurPatientExperienceOfferingsConnection = {
  __typename?: 'SymplurPatientExperienceOfferingsConnection';
  /** A list of `SymplurPatientExperienceOffering` objects. */
  nodes: Array<Maybe<SymplurPatientExperienceOffering>>;
  /** A list of edges which contains the `SymplurPatientExperienceOffering` and cursor to aid in pagination. */
  edges: Array<SymplurPatientExperienceOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SymplurPatientExperienceOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SymplurPatientExperienceOffering` edge in the connection. */
export type SymplurPatientExperienceOfferingsEdge = {
  __typename?: 'SymplurPatientExperienceOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SymplurPatientExperienceOffering` at the end of the edge. */
  node?: Maybe<SymplurPatientExperienceOffering>;
};

/** Methods to use when ordering `SymplurPatientExperienceOffering`. */
export enum SymplurPatientExperienceOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type SymplurPrimaryCareOffering = {
  __typename?: 'SymplurPrimaryCareOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SymplurPrimaryCareOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type SymplurPrimaryCareOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SymplurPrimaryCareOffering` object types. All fields are combined with a logical ‘and.’ */
export type SymplurPrimaryCareOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SymplurPrimaryCareOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SymplurPrimaryCareOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<SymplurPrimaryCareOfferingFilter>;
};

/** A connection to a list of `SymplurPrimaryCareOffering` values. */
export type SymplurPrimaryCareOfferingsConnection = {
  __typename?: 'SymplurPrimaryCareOfferingsConnection';
  /** A list of `SymplurPrimaryCareOffering` objects. */
  nodes: Array<Maybe<SymplurPrimaryCareOffering>>;
  /** A list of edges which contains the `SymplurPrimaryCareOffering` and cursor to aid in pagination. */
  edges: Array<SymplurPrimaryCareOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SymplurPrimaryCareOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SymplurPrimaryCareOffering` edge in the connection. */
export type SymplurPrimaryCareOfferingsEdge = {
  __typename?: 'SymplurPrimaryCareOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SymplurPrimaryCareOffering` at the end of the edge. */
  node?: Maybe<SymplurPrimaryCareOffering>;
};

/** Methods to use when ordering `SymplurPrimaryCareOffering`. */
export enum SymplurPrimaryCareOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

export type SymplurVirtualCareOffering = {
  __typename?: 'SymplurVirtualCareOffering';
  offeringId: Scalars['GitlabProjectId'];
  createdAt?: Maybe<Scalars['String']>;
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  offeringStatus?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `SymplurVirtualCareOffering` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type SymplurVirtualCareOfferingCondition = {
  /** Checks for equality with the object’s `offeringId` field. */
  offeringId?: Maybe<Scalars['GitlabProjectId']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `cat` field. */
  cat?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<Scalars['String']>;
};

/** A filter to be used against `SymplurVirtualCareOffering` object types. All fields are combined with a logical ‘and.’ */
export type SymplurVirtualCareOfferingFilter = {
  /** Filter by the object’s `offeringId` field. */
  offeringId?: Maybe<GitlabProjectIdFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<StringFilter>;
  /** Filter by the object’s `cat` field. */
  cat?: Maybe<StringListFilter>;
  /** Filter by the object’s `offeringStatus` field. */
  offeringStatus?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SymplurVirtualCareOfferingFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SymplurVirtualCareOfferingFilter>>;
  /** Negates the expression. */
  not?: Maybe<SymplurVirtualCareOfferingFilter>;
};

/** A connection to a list of `SymplurVirtualCareOffering` values. */
export type SymplurVirtualCareOfferingsConnection = {
  __typename?: 'SymplurVirtualCareOfferingsConnection';
  /** A list of `SymplurVirtualCareOffering` objects. */
  nodes: Array<Maybe<SymplurVirtualCareOffering>>;
  /** A list of edges which contains the `SymplurVirtualCareOffering` and cursor to aid in pagination. */
  edges: Array<SymplurVirtualCareOfferingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SymplurVirtualCareOffering` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `SymplurVirtualCareOffering` edge in the connection. */
export type SymplurVirtualCareOfferingsEdge = {
  __typename?: 'SymplurVirtualCareOfferingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SymplurVirtualCareOffering` at the end of the edge. */
  node?: Maybe<SymplurVirtualCareOffering>;
};

/** Methods to use when ordering `SymplurVirtualCareOffering`. */
export enum SymplurVirtualCareOfferingsOrderBy {
  Natural = 'NATURAL',
  OfferingIdAsc = 'OFFERING_ID_ASC',
  OfferingIdDesc = 'OFFERING_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  CatAsc = 'CAT_ASC',
  CatDesc = 'CAT_DESC',
  OfferingStatusAsc = 'OFFERING_STATUS_ASC',
  OfferingStatusDesc = 'OFFERING_STATUS_DESC'
}

/** All input for the `syncNewInstitution` mutation. */
export type SyncNewInstitutionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  communicationReqId?: Maybe<Scalars['UUID']>;
};

/** The output of our `syncNewInstitution` mutation. */
export type SyncNewInstitutionPayload = {
  __typename?: 'SyncNewInstitutionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type TelemetryDatum = {
  __typename?: 'TelemetryDatum';
  telemetryName?: Maybe<Scalars['String']>;
  enable?: Maybe<Scalars['Boolean']>;
  mode?: Maybe<Scalars['String']>;
};

export type TelemetryResult = {
  __typename?: 'TelemetryResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  data?: Maybe<Array<Maybe<TelemetryDatum>>>;
};

export type TourResponseType = {
  __typename?: 'TourResponseType';
  tourTypeId?: Maybe<Scalars['Int']>;
  completedSteps?: Maybe<Scalars['Int']>;
  tourTargetId?: Maybe<Scalars['String']>;
  lastCompletedStepIndex?: Maybe<Scalars['Int']>;
  resumeAfter?: Maybe<Scalars['Datetime']>;
  isCompleted?: Maybe<Scalars['Boolean']>;
  lastUpdateTimestamp?: Maybe<Scalars['Datetime']>;
  tourTriggerType?: Maybe<Scalars['Int']>;
  autoResume?: Maybe<Scalars['Boolean']>;
};

export type TransactionLogResponse = {
  __typename?: 'TransactionLogResponse';
  id?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionLog?: Maybe<Scalars['JSON']>;
  partyId?: Maybe<Scalars['UUID']>;
  verificationStatus?: Maybe<Scalars['Int']>;
  verifiedAt?: Maybe<Scalars['Datetime']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  externalSystemPartyId?: Maybe<Scalars['String']>;
  verificationResponse?: Maybe<Scalars['String']>;
};

export type TransactionRequestLogResponse = {
  __typename?: 'TransactionRequestLogResponse';
  status?: Maybe<ResponseRecordStatus>;
  success?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Array<Maybe<TransactionLogResponse>>>;
};

/** All input for the `triggerEvent` mutation. */
export type TriggerEventInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  mailType?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  externalSystemName?: Maybe<Scalars['String']>;
  userRole?: Maybe<Scalars['String']>;
};

/** All input for the `triggerEventNotify` mutation. */
export type TriggerEventNotifyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  mailType?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['String']>;
  userRole?: Maybe<Scalars['String']>;
};

/** The output of our `triggerEventNotify` mutation. */
export type TriggerEventNotifyPayload = {
  __typename?: 'TriggerEventNotifyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  json?: Maybe<Scalars['JSON']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** The output of our `triggerEvent` mutation. */
export type TriggerEventPayload = {
  __typename?: 'TriggerEventPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** A filter to be used against UUID fields. All fields are combined with a logical ‘and.’ */
export type UuidFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['UUID']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['UUID']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['UUID']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['UUID']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['UUID']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['UUID']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['UUID']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['UUID']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['UUID']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['UUID']>;
};

/** All input for the `unenrollPatient` mutation. */
export type UnenrollPatientInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
  patientId?: Maybe<Scalars['UUID']>;
};

/** The output of our `unenrollPatient` mutation. */
export type UnenrollPatientPayload = {
  __typename?: 'UnenrollPatientPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateDomainRealms` mutation. */
export type UpdateDomainRealmsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  domainId?: Maybe<Scalars['Int']>;
  domainName?: Maybe<Scalars['String']>;
  realmName?: Maybe<Scalars['String']>;
  clientname?: Maybe<Scalars['String']>;
  clientid?: Maybe<Scalars['String']>;
};

/** The output of our `updateDomainRealms` mutation. */
export type UpdateDomainRealmsPayload = {
  __typename?: 'UpdateDomainRealmsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateFileUploadByNodeId` mutation. */
export type UpdateFileUploadByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `FileUpload` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `FileUpload` being updated. */
  patch: FileUploadPatch;
};

/** All input for the `updateFileUpload` mutation. */
export type UpdateFileUploadInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `FileUpload` being updated. */
  patch: FileUploadPatch;
  id: Scalars['UUID'];
};

/** The output of our update `FileUpload` mutation. */
export type UpdateFileUploadPayload = {
  __typename?: 'UpdateFileUploadPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `FileUpload` that was updated by this mutation. */
  fileUpload?: Maybe<FileUpload>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `FileUpload`. May be used by Relay 1. */
  fileUploadEdge?: Maybe<FileUploadsEdge>;
};


/** The output of our update `FileUpload` mutation. */
export type UpdateFileUploadPayloadFileUploadEdgeArgs = {
  orderBy?: Maybe<Array<FileUploadsOrderBy>>;
};

/** All input for the `updateGitlabTokenExpiry` mutation. */
export type UpdateGitlabTokenExpiryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `updateGitlabTokenExpiry` mutation. */
export type UpdateGitlabTokenExpiryPayload = {
  __typename?: 'UpdateGitlabTokenExpiryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateIdentityVerificationV1` mutation. */
export type UpdateIdentityVerificationV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  updateData?: Maybe<VerificationResultInput>;
  event?: Maybe<Scalars['String']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `updateIdentityVerificationV1` mutation. */
export type UpdateIdentityVerificationV1Payload = {
  __typename?: 'UpdateIdentityVerificationV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateMediaTypeByMimeTypeAndFileExtnAndLabel` mutation. */
export type UpdateMediaTypeByMimeTypeAndFileExtnAndLabelInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `MediaType` being updated. */
  patch: MediaTypePatch;
  mimeType: Scalars['String'];
  fileExtn: Scalars['String'];
  label: Scalars['String'];
};

/** The output of our update `MediaType` mutation. */
export type UpdateMediaTypePayload = {
  __typename?: 'UpdateMediaTypePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `MediaType` that was updated by this mutation. */
  mediaType?: Maybe<MediaType>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `MediaType`. May be used by Relay 1. */
  mediaTypeEdge?: Maybe<MediaTypesEdge>;
};


/** The output of our update `MediaType` mutation. */
export type UpdateMediaTypePayloadMediaTypeEdgeArgs = {
  orderBy?: Maybe<Array<MediaTypesOrderBy>>;
};

/** All input for the `updateMedicalDocumentQueryJson` mutation. */
export type UpdateMedicalDocumentQueryJsonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  updateContent?: Maybe<MetaContentInput>;
};

/** The output of our `updateMedicalDocumentQueryJson` mutation. */
export type UpdateMedicalDocumentQueryJsonPayload = {
  __typename?: 'UpdateMedicalDocumentQueryJsonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateOffering` mutation. */
export type UpdateOfferingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  getOfferingInput?: Maybe<CreateOfferingInputRecordInput>;
  accessToken?: Maybe<Scalars['String']>;
};

/** The output of our `updateOffering` mutation. */
export type UpdateOfferingPayload = {
  __typename?: 'UpdateOfferingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  offeringDataResult?: Maybe<OfferingDataResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateOrganizationDetails` mutation. */
export type UpdateOrganizationDetailsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  orgId?: Maybe<Scalars['UUID']>;
  orgEmail?: Maybe<Scalars['String']>;
  orgPhone?: Maybe<Scalars['String']>;
  orgFax?: Maybe<Scalars['String']>;
  orgWebsite?: Maybe<Scalars['String']>;
  orgAddress?: Maybe<Scalars['String']>;
  orgCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  orgZipCode?: Maybe<Scalars['String']>;
};

/** The output of our `updateOrganizationDetails` mutation. */
export type UpdateOrganizationDetailsPayload = {
  __typename?: 'UpdateOrganizationDetailsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  boolean?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePassword` mutation. */
export type UpdatePasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** The output of our `updatePassword` mutation. */
export type UpdatePasswordPayload = {
  __typename?: 'UpdatePasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  updatePasswordResult?: Maybe<UpdatePasswordResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type UpdatePasswordResult = {
  __typename?: 'UpdatePasswordResult';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** All input for the `updatePatientDemographics` mutation. */
export type UpdatePatientDemographicsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['UUID']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userSexId?: Maybe<Scalars['Int']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
};

/** The output of our `updatePatientDemographics` mutation. */
export type UpdatePatientDemographicsPayload = {
  __typename?: 'UpdatePatientDemographicsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePatientDemographicsV2` mutation. */
export type UpdatePatientDemographicsV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['UUID']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userGenderId?: Maybe<Scalars['Int']>;
  userSexId?: Maybe<Scalars['Int']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  iamId?: Maybe<Scalars['String']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  userGenderOther?: Maybe<Scalars['Boolean']>;
  userGenderOtherValue?: Maybe<Scalars['String']>;
  userSexOther?: Maybe<Scalars['Boolean']>;
  userSexOtherValue?: Maybe<Scalars['String']>;
};

/** The output of our `updatePatientDemographicsV2` mutation. */
export type UpdatePatientDemographicsV2Payload = {
  __typename?: 'UpdatePatientDemographicsV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePatientWithDependent` mutation. */
export type UpdatePatientWithDependentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['UUID']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  userSexId?: Maybe<Scalars['Int']>;
  mname?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousZipCode?: Maybe<Scalars['String']>;
};

/** The output of our `updatePatientWithDependent` mutation. */
export type UpdatePatientWithDependentPayload = {
  __typename?: 'UpdatePatientWithDependentPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePatientWithDependentV3` mutation. */
export type UpdatePatientWithDependentV3Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['UUID']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Datetime']>;
  userGenderId?: Maybe<Scalars['Int']>;
  userSexId?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Scalars['Int']>;
  mname?: Maybe<Scalars['String']>;
  iamId?: Maybe<Scalars['String']>;
  userSsn?: Maybe<Scalars['BigFloat']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  userAddressLine1?: Maybe<Scalars['String']>;
  userAddressLine2?: Maybe<Scalars['String']>;
  userCity?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  zipCode?: Maybe<Scalars['String']>;
  userPreferredLanguageId?: Maybe<Scalars['Int']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  userSuffix?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  userPreviousSuffix?: Maybe<Scalars['String']>;
  userPreviousFirstName?: Maybe<Scalars['String']>;
  userPreviousMiddleName?: Maybe<Scalars['String']>;
  userPreviousLastName?: Maybe<Scalars['String']>;
  userPreviousAddressLine1?: Maybe<Scalars['String']>;
  userPreviousAddressLine2?: Maybe<Scalars['String']>;
  userPreviousCity?: Maybe<Scalars['String']>;
  userPreviousState?: Maybe<Scalars['Int']>;
  userPreviousCountry?: Maybe<Scalars['Int']>;
  previousZipCode?: Maybe<Scalars['String']>;
  userGenderOther?: Maybe<Scalars['Boolean']>;
  userGenderOtherValue?: Maybe<Scalars['String']>;
  userSexOther?: Maybe<Scalars['Boolean']>;
  userSexOtherValue?: Maybe<Scalars['String']>;
};

/** The output of our `updatePatientWithDependentV3` mutation. */
export type UpdatePatientWithDependentV3Payload = {
  __typename?: 'UpdatePatientWithDependentV3Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePersonProfilePic` mutation. */
export type UpdatePersonProfilePicInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  profileImageId?: Maybe<Scalars['UUID']>;
};

/** The output of our `updatePersonProfilePic` mutation. */
export type UpdatePersonProfilePicPayload = {
  __typename?: 'UpdatePersonProfilePicPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePersonRecordStatus` mutation. */
export type UpdatePersonRecordStatusInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyId?: Maybe<Scalars['UUID']>;
  updatedDate?: Maybe<Scalars['Datetime']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `updatePersonRecordStatus` mutation. */
export type UpdatePersonRecordStatusPayload = {
  __typename?: 'UpdatePersonRecordStatusPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePersonRecordStatusV1` mutation. */
export type UpdatePersonRecordStatusV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  partyOid?: Maybe<Scalars['UUID']>;
  updatedDate?: Maybe<Scalars['Datetime']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `updatePersonRecordStatusV1` mutation. */
export type UpdatePersonRecordStatusV1Payload = {
  __typename?: 'UpdatePersonRecordStatusV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updatePersonStatusV1` mutation. */
export type UpdatePersonStatusV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentStatus?: Maybe<Scalars['Int']>;
  organization?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

/** The output of our `updatePersonStatusV1` mutation. */
export type UpdatePersonStatusV1Payload = {
  __typename?: 'UpdatePersonStatusV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateRequestFiledetailV1` mutation. */
export type UpdateRequestFiledetailV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestIid?: Maybe<Scalars['UUID']>;
  disorderDisclosureAuthorizationFileId?: Maybe<Scalars['UUID']>;
  hipaaAuthorizationFileId?: Maybe<Scalars['UUID']>;
  attachmentId?: Maybe<Scalars['UUID']>;
  signatureId?: Maybe<Scalars['UUID']>;
  deniedSignatureId?: Maybe<Scalars['UUID']>;
  updatedDate?: Maybe<Scalars['Datetime']>;
};

/** The output of our `updateRequestFiledetailV1` mutation. */
export type UpdateRequestFiledetailV1Payload = {
  __typename?: 'UpdateRequestFiledetailV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateRequestStatusV1` mutation. */
export type UpdateRequestStatusV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  type?: Maybe<Scalars['Int']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `updateRequestStatusV1` mutation. */
export type UpdateRequestStatusV1Payload = {
  __typename?: 'UpdateRequestStatusV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateRequestStatusV2` mutation. */
export type UpdateRequestStatusV2Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['UUID']>;
  type?: Maybe<Scalars['Int']>;
  fromStatus?: Maybe<Scalars['String']>;
  toStatus?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  requestStatus?: Maybe<Scalars['Int']>;
  fingerPrint?: Maybe<Scalars['String']>;
  otContext?: Maybe<Scalars['JSON']>;
  otTags?: Maybe<Scalars['JSON']>;
};

/** The output of our `updateRequestStatusV2` mutation. */
export type UpdateRequestStatusV2Payload = {
  __typename?: 'UpdateRequestStatusV2Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestResult?: Maybe<RequestResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateRequestTokens` mutation. */
export type UpdateRequestTokensInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestTokenId?: Maybe<Scalars['UUID']>;
  hasFilled?: Maybe<Scalars['Boolean']>;
  updatedDate?: Maybe<Scalars['Datetime']>;
};

/** The output of our `updateRequestTokens` mutation. */
export type UpdateRequestTokensPayload = {
  __typename?: 'UpdateRequestTokensPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateSurveyFormUpdateByNodeId` mutation. */
export type UpdateSurveyFormUpdateByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SurveyFormUpdate` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `SurveyFormUpdate` being updated. */
  patch: SurveyFormUpdatePatch;
};

/** All input for the `updateSurveyFormUpdate` mutation. */
export type UpdateSurveyFormUpdateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `SurveyFormUpdate` being updated. */
  patch: SurveyFormUpdatePatch;
  id: Scalars['UUID'];
};

/** The output of our update `SurveyFormUpdate` mutation. */
export type UpdateSurveyFormUpdatePayload = {
  __typename?: 'UpdateSurveyFormUpdatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SurveyFormUpdate` that was updated by this mutation. */
  surveyFormUpdate?: Maybe<SurveyFormUpdate>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SurveyFormUpdate`. May be used by Relay 1. */
  surveyFormUpdateEdge?: Maybe<SurveyFormUpdatesEdge>;
};


/** The output of our update `SurveyFormUpdate` mutation. */
export type UpdateSurveyFormUpdatePayloadSurveyFormUpdateEdgeArgs = {
  orderBy?: Maybe<Array<SurveyFormUpdatesOrderBy>>;
};

/** All input for the `updateUserInParty` mutation. */
export type UpdateUserInPartyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  fname?: Maybe<Scalars['String']>;
  lname?: Maybe<Scalars['String']>;
  mname?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

/** The output of our `updateUserInParty` mutation. */
export type UpdateUserInPartyPayload = {
  __typename?: 'UpdateUserInPartyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['UUID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
};

/** The output of our `updateUser` mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateVerificationTransactionLog` mutation. */
export type UpdateVerificationTransactionLogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transId?: Maybe<Scalars['String']>;
  stepName?: Maybe<Scalars['String']>;
  isCompleted?: Maybe<Scalars['Boolean']>;
  processStatus?: Maybe<Scalars['String']>;
  statusCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** The output of our `updateVerificationTransactionLog` mutation. */
export type UpdateVerificationTransactionLogPayload = {
  __typename?: 'UpdateVerificationTransactionLogPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `updateVerificationTransactionLogV1` mutation. */
export type UpdateVerificationTransactionLogV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  transId?: Maybe<Scalars['String']>;
  stepName?: Maybe<Scalars['String']>;
  isCompleted?: Maybe<Scalars['Boolean']>;
  processStatus?: Maybe<Scalars['String']>;
  statusCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

/** The output of our `updateVerificationTransactionLogV1` mutation. */
export type UpdateVerificationTransactionLogV1Payload = {
  __typename?: 'UpdateVerificationTransactionLogV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** All input for the `uploadImageToGit` mutation. */
export type UploadImageToGitInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageInput?: Maybe<GitImageInputRecordInput>;
};

/** The output of our `uploadImageToGit` mutation. */
export type UploadImageToGitPayload = {
  __typename?: 'UploadImageToGitPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  gitResponse?: Maybe<GitResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type UseDisorderAuthorizationTitleMaster = {
  __typename?: 'UseDisorderAuthorizationTitleMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `UseDisorderAuthorizationTitleMaster` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type UseDisorderAuthorizationTitleMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
};

/** A filter to be used against `UseDisorderAuthorizationTitleMaster` object types. All fields are combined with a logical ‘and.’ */
export type UseDisorderAuthorizationTitleMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UseDisorderAuthorizationTitleMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UseDisorderAuthorizationTitleMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<UseDisorderAuthorizationTitleMasterFilter>;
};

/** An input for mutations affecting `UseDisorderAuthorizationTitleMaster` */
export type UseDisorderAuthorizationTitleMasterInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** A connection to a list of `UseDisorderAuthorizationTitleMaster` values. */
export type UseDisorderAuthorizationTitleMastersConnection = {
  __typename?: 'UseDisorderAuthorizationTitleMastersConnection';
  /** A list of `UseDisorderAuthorizationTitleMaster` objects. */
  nodes: Array<Maybe<UseDisorderAuthorizationTitleMaster>>;
  /** A list of edges which contains the `UseDisorderAuthorizationTitleMaster` and cursor to aid in pagination. */
  edges: Array<UseDisorderAuthorizationTitleMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UseDisorderAuthorizationTitleMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UseDisorderAuthorizationTitleMaster` edge in the connection. */
export type UseDisorderAuthorizationTitleMastersEdge = {
  __typename?: 'UseDisorderAuthorizationTitleMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UseDisorderAuthorizationTitleMaster` at the end of the edge. */
  node?: Maybe<UseDisorderAuthorizationTitleMaster>;
};

/** Methods to use when ordering `UseDisorderAuthorizationTitleMaster`. */
export enum UseDisorderAuthorizationTitleMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** An input for mutations affecting `UserDemographic` */
export type UserDemographicInput = {
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  previousFirstName?: Maybe<Scalars['String']>;
  previousMiddleName?: Maybe<Scalars['String']>;
  previousLastName?: Maybe<Scalars['String']>;
  gender?: Maybe<GenderInfoInput>;
  preferredLanguageId?: Maybe<Scalars['Int']>;
  suffix?: Maybe<Scalars['String']>;
  previousSuffix?: Maybe<Scalars['String']>;
  preferredPronouns?: Maybe<Scalars['Int']>;
  electronicDetails?: Maybe<Scalars['String']>;
  birthDate?: Maybe<Scalars['Datetime']>;
  sex?: Maybe<SexInfoInput>;
  personType?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['Int']>;
  addressZip?: Maybe<Scalars['String']>;
  isPreviousAddress?: Maybe<Scalars['Boolean']>;
  previousAddressLine1?: Maybe<Scalars['String']>;
  previousAddressLine2?: Maybe<Scalars['String']>;
  previousCity?: Maybe<Scalars['String']>;
  previousState?: Maybe<Scalars['Int']>;
  previousCountry?: Maybe<Scalars['Int']>;
  previousAddressZip?: Maybe<Scalars['String']>;
  ssn?: Maybe<Scalars['BigFloat']>;
  relationshipId?: Maybe<Scalars['Int']>;
};

export type UserDetail = {
  __typename?: 'UserDetail';
  personId?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  adminCheck?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `UserFeedbackDatum` */
export type UserFeedbackDatumInput = {
  feedbackTypeName?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  feedback?: Maybe<Scalars['String']>;
};

/** This view is used as dropdown for service category. */
export type UserGroupMaster = {
  __typename?: 'UserGroupMaster';
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  serviceCategoryTypeId?: Maybe<Scalars['Int']>;
  serviceCategory?: Maybe<Scalars['String']>;
};

/**
 * A condition to be used against `UserGroupMaster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserGroupMasterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `serviceCategoryTypeId` field. */
  serviceCategoryTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `serviceCategory` field. */
  serviceCategory?: Maybe<Scalars['String']>;
};

/** A filter to be used against `UserGroupMaster` object types. All fields are combined with a logical ‘and.’ */
export type UserGroupMasterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `serviceCategoryTypeId` field. */
  serviceCategoryTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `serviceCategory` field. */
  serviceCategory?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserGroupMasterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserGroupMasterFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserGroupMasterFilter>;
};

/** A connection to a list of `UserGroupMaster` values. */
export type UserGroupMastersConnection = {
  __typename?: 'UserGroupMastersConnection';
  /** A list of `UserGroupMaster` objects. */
  nodes: Array<Maybe<UserGroupMaster>>;
  /** A list of edges which contains the `UserGroupMaster` and cursor to aid in pagination. */
  edges: Array<UserGroupMastersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserGroupMaster` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserGroupMaster` edge in the connection. */
export type UserGroupMastersEdge = {
  __typename?: 'UserGroupMastersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserGroupMaster` at the end of the edge. */
  node?: Maybe<UserGroupMaster>;
};

/** Methods to use when ordering `UserGroupMaster`. */
export enum UserGroupMastersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  ServiceCategoryTypeIdAsc = 'SERVICE_CATEGORY_TYPE_ID_ASC',
  ServiceCategoryTypeIdDesc = 'SERVICE_CATEGORY_TYPE_ID_DESC',
  ServiceCategoryAsc = 'SERVICE_CATEGORY_ASC',
  ServiceCategoryDesc = 'SERVICE_CATEGORY_DESC'
}

export type UserInviteList = {
  __typename?: 'UserInviteList';
  id?: Maybe<Scalars['UUID']>;
  firstName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  referralId?: Maybe<Scalars['UUID']>;
  invitedBy?: Maybe<Scalars['String']>;
  referralTypeId?: Maybe<Scalars['Int']>;
  referralType?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['UUID']>;
  serviceCategoryTypeId?: Maybe<Scalars['Int']>;
  serviceCategoryType?: Maybe<Scalars['String']>;
  userGroupId?: Maybe<Scalars['Int']>;
  userGroup?: Maybe<Scalars['String']>;
  inviteStatusId?: Maybe<Scalars['Int']>;
  invitationCode?: Maybe<Scalars['String']>;
  invitationStatus?: Maybe<Scalars['String']>;
  enrollmentToken?: Maybe<Scalars['String']>;
  userSourceId?: Maybe<Scalars['Int']>;
  userSource?: Maybe<Scalars['String']>;
  shortenWebLink?: Maybe<Scalars['String']>;
  shortenSmsLink?: Maybe<Scalars['String']>;
  signUpCompletedDt?: Maybe<Scalars['Datetime']>;
  openedDt?: Maybe<Scalars['Datetime']>;
  firstSignInDt?: Maybe<Scalars['Datetime']>;
  lastReminderSentAt?: Maybe<Scalars['Datetime']>;
  reminderEnabled?: Maybe<Scalars['Boolean']>;
  expiredDt?: Maybe<Scalars['Datetime']>;
  createdBy?: Maybe<Scalars['UUID']>;
  updatedBy?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `UserInviteList` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserInviteListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `middleName` field. */
  middleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fullName` field. */
  fullName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phone` field. */
  phone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `referralId` field. */
  referralId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `invitedBy` field. */
  invitedBy?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `referralTypeId` field. */
  referralTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `referralType` field. */
  referralType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `tenantId` field. */
  tenantId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `serviceCategoryTypeId` field. */
  serviceCategoryTypeId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `serviceCategoryType` field. */
  serviceCategoryType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userGroupId` field. */
  userGroupId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userGroup` field. */
  userGroup?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `inviteStatusId` field. */
  inviteStatusId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `invitationCode` field. */
  invitationCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `invitationStatus` field. */
  invitationStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `enrollmentToken` field. */
  enrollmentToken?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userSourceId` field. */
  userSourceId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userSource` field. */
  userSource?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `shortenWebLink` field. */
  shortenWebLink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `shortenSmsLink` field. */
  shortenSmsLink?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `signUpCompletedDt` field. */
  signUpCompletedDt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `openedDt` field. */
  openedDt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `firstSignInDt` field. */
  firstSignInDt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `lastReminderSentAt` field. */
  lastReminderSentAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `reminderEnabled` field. */
  reminderEnabled?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expiredDt` field. */
  expiredDt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `updatedBy` field. */
  updatedBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `UserInviteList` object types. All fields are combined with a logical ‘and.’ */
export type UserInviteListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `middleName` field. */
  middleName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `fullName` field. */
  fullName?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `phone` field. */
  phone?: Maybe<StringFilter>;
  /** Filter by the object’s `referralId` field. */
  referralId?: Maybe<UuidFilter>;
  /** Filter by the object’s `invitedBy` field. */
  invitedBy?: Maybe<StringFilter>;
  /** Filter by the object’s `referralTypeId` field. */
  referralTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `referralType` field. */
  referralType?: Maybe<StringFilter>;
  /** Filter by the object’s `tenantId` field. */
  tenantId?: Maybe<UuidFilter>;
  /** Filter by the object’s `serviceCategoryTypeId` field. */
  serviceCategoryTypeId?: Maybe<IntFilter>;
  /** Filter by the object’s `serviceCategoryType` field. */
  serviceCategoryType?: Maybe<StringFilter>;
  /** Filter by the object’s `userGroupId` field. */
  userGroupId?: Maybe<IntFilter>;
  /** Filter by the object’s `userGroup` field. */
  userGroup?: Maybe<StringFilter>;
  /** Filter by the object’s `inviteStatusId` field. */
  inviteStatusId?: Maybe<IntFilter>;
  /** Filter by the object’s `invitationCode` field. */
  invitationCode?: Maybe<StringFilter>;
  /** Filter by the object’s `invitationStatus` field. */
  invitationStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `enrollmentToken` field. */
  enrollmentToken?: Maybe<StringFilter>;
  /** Filter by the object’s `userSourceId` field. */
  userSourceId?: Maybe<IntFilter>;
  /** Filter by the object’s `userSource` field. */
  userSource?: Maybe<StringFilter>;
  /** Filter by the object’s `shortenWebLink` field. */
  shortenWebLink?: Maybe<StringFilter>;
  /** Filter by the object’s `shortenSmsLink` field. */
  shortenSmsLink?: Maybe<StringFilter>;
  /** Filter by the object’s `signUpCompletedDt` field. */
  signUpCompletedDt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `openedDt` field. */
  openedDt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `firstSignInDt` field. */
  firstSignInDt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `lastReminderSentAt` field. */
  lastReminderSentAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `reminderEnabled` field. */
  reminderEnabled?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expiredDt` field. */
  expiredDt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `updatedBy` field. */
  updatedBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserInviteListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserInviteListFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserInviteListFilter>;
};

/** A connection to a list of `UserInviteList` values. */
export type UserInviteListsConnection = {
  __typename?: 'UserInviteListsConnection';
  /** A list of `UserInviteList` objects. */
  nodes: Array<Maybe<UserInviteList>>;
  /** A list of edges which contains the `UserInviteList` and cursor to aid in pagination. */
  edges: Array<UserInviteListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserInviteList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserInviteList` edge in the connection. */
export type UserInviteListsEdge = {
  __typename?: 'UserInviteListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserInviteList` at the end of the edge. */
  node?: Maybe<UserInviteList>;
};

/** Methods to use when ordering `UserInviteList`. */
export enum UserInviteListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  MiddleNameAsc = 'MIDDLE_NAME_ASC',
  MiddleNameDesc = 'MIDDLE_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  FullNameAsc = 'FULL_NAME_ASC',
  FullNameDesc = 'FULL_NAME_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  PhoneAsc = 'PHONE_ASC',
  PhoneDesc = 'PHONE_DESC',
  ReferralIdAsc = 'REFERRAL_ID_ASC',
  ReferralIdDesc = 'REFERRAL_ID_DESC',
  InvitedByAsc = 'INVITED_BY_ASC',
  InvitedByDesc = 'INVITED_BY_DESC',
  ReferralTypeIdAsc = 'REFERRAL_TYPE_ID_ASC',
  ReferralTypeIdDesc = 'REFERRAL_TYPE_ID_DESC',
  ReferralTypeAsc = 'REFERRAL_TYPE_ASC',
  ReferralTypeDesc = 'REFERRAL_TYPE_DESC',
  TenantIdAsc = 'TENANT_ID_ASC',
  TenantIdDesc = 'TENANT_ID_DESC',
  ServiceCategoryTypeIdAsc = 'SERVICE_CATEGORY_TYPE_ID_ASC',
  ServiceCategoryTypeIdDesc = 'SERVICE_CATEGORY_TYPE_ID_DESC',
  ServiceCategoryTypeAsc = 'SERVICE_CATEGORY_TYPE_ASC',
  ServiceCategoryTypeDesc = 'SERVICE_CATEGORY_TYPE_DESC',
  UserGroupIdAsc = 'USER_GROUP_ID_ASC',
  UserGroupIdDesc = 'USER_GROUP_ID_DESC',
  UserGroupAsc = 'USER_GROUP_ASC',
  UserGroupDesc = 'USER_GROUP_DESC',
  InviteStatusIdAsc = 'INVITE_STATUS_ID_ASC',
  InviteStatusIdDesc = 'INVITE_STATUS_ID_DESC',
  InvitationCodeAsc = 'INVITATION_CODE_ASC',
  InvitationCodeDesc = 'INVITATION_CODE_DESC',
  InvitationStatusAsc = 'INVITATION_STATUS_ASC',
  InvitationStatusDesc = 'INVITATION_STATUS_DESC',
  EnrollmentTokenAsc = 'ENROLLMENT_TOKEN_ASC',
  EnrollmentTokenDesc = 'ENROLLMENT_TOKEN_DESC',
  UserSourceIdAsc = 'USER_SOURCE_ID_ASC',
  UserSourceIdDesc = 'USER_SOURCE_ID_DESC',
  UserSourceAsc = 'USER_SOURCE_ASC',
  UserSourceDesc = 'USER_SOURCE_DESC',
  ShortenWebLinkAsc = 'SHORTEN_WEB_LINK_ASC',
  ShortenWebLinkDesc = 'SHORTEN_WEB_LINK_DESC',
  ShortenSmsLinkAsc = 'SHORTEN_SMS_LINK_ASC',
  ShortenSmsLinkDesc = 'SHORTEN_SMS_LINK_DESC',
  SignUpCompletedDtAsc = 'SIGN_UP_COMPLETED_DT_ASC',
  SignUpCompletedDtDesc = 'SIGN_UP_COMPLETED_DT_DESC',
  OpenedDtAsc = 'OPENED_DT_ASC',
  OpenedDtDesc = 'OPENED_DT_DESC',
  FirstSignInDtAsc = 'FIRST_SIGN_IN_DT_ASC',
  FirstSignInDtDesc = 'FIRST_SIGN_IN_DT_DESC',
  LastReminderSentAtAsc = 'LAST_REMINDER_SENT_AT_ASC',
  LastReminderSentAtDesc = 'LAST_REMINDER_SENT_AT_DESC',
  ReminderEnabledAsc = 'REMINDER_ENABLED_ASC',
  ReminderEnabledDesc = 'REMINDER_ENABLED_DESC',
  ExpiredDtAsc = 'EXPIRED_DT_ASC',
  ExpiredDtDesc = 'EXPIRED_DT_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC',
  UpdatedByAsc = 'UPDATED_BY_ASC',
  UpdatedByDesc = 'UPDATED_BY_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC'
}

export type UserKeycloakEventLog = {
  __typename?: 'UserKeycloakEventLog';
  id?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  extractedUsername?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Datetime']>;
};

/**
 * A condition to be used against `UserKeycloakEventLog` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type UserKeycloakEventLogCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `roleName` field. */
  roleName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `extractedUsername` field. */
  extractedUsername?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `UserKeycloakEventLog` object types. All fields are combined with a logical ‘and.’ */
export type UserKeycloakEventLogFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<StringFilter>;
  /** Filter by the object’s `roleName` field. */
  roleName?: Maybe<StringFilter>;
  /** Filter by the object’s `extractedUsername` field. */
  extractedUsername?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<StringFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserKeycloakEventLogFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserKeycloakEventLogFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserKeycloakEventLogFilter>;
};

/** A connection to a list of `UserKeycloakEventLog` values. */
export type UserKeycloakEventLogsConnection = {
  __typename?: 'UserKeycloakEventLogsConnection';
  /** A list of `UserKeycloakEventLog` objects. */
  nodes: Array<Maybe<UserKeycloakEventLog>>;
  /** A list of edges which contains the `UserKeycloakEventLog` and cursor to aid in pagination. */
  edges: Array<UserKeycloakEventLogsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserKeycloakEventLog` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserKeycloakEventLog` edge in the connection. */
export type UserKeycloakEventLogsEdge = {
  __typename?: 'UserKeycloakEventLogsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserKeycloakEventLog` at the end of the edge. */
  node?: Maybe<UserKeycloakEventLog>;
};

/** Methods to use when ordering `UserKeycloakEventLog`. */
export enum UserKeycloakEventLogsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  RoleNameAsc = 'ROLE_NAME_ASC',
  RoleNameDesc = 'ROLE_NAME_DESC',
  ExtractedUsernameAsc = 'EXTRACTED_USERNAME_ASC',
  ExtractedUsernameDesc = 'EXTRACTED_USERNAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC'
}

export type UserLhcForm = {
  __typename?: 'UserLhcForm';
  healthcarepersonalcheck?: Maybe<Scalars['Boolean']>;
  professionidentifier?: Maybe<Scalars['String']>;
  dateofbirth?: Maybe<Scalars['String']>;
  languages?: Maybe<Scalars['String']>;
  contactmobilephone?: Maybe<Scalars['String']>;
  sourceofinvitation?: Maybe<Scalars['String']>;
  termsconditionsagreement?: Maybe<Scalars['Boolean']>;
};

/** All input for the `userMedicalRecordOperationStatusHistory` mutation. */
export type UserMedicalRecordOperationStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  medicalQueryLogId?: Maybe<Scalars['UUID']>;
};

/** The output of our `userMedicalRecordOperationStatusHistory` mutation. */
export type UserMedicalRecordOperationStatusHistoryPayload = {
  __typename?: 'UserMedicalRecordOperationStatusHistoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  requestApiResponse?: Maybe<RequestApiResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** A connection to a list of `UserMedicalRecordsDatum` values. */
export type UserMedicalRecordsDataConnection = {
  __typename?: 'UserMedicalRecordsDataConnection';
  /** A list of `UserMedicalRecordsDatum` objects. */
  nodes: Array<Maybe<UserMedicalRecordsDatum>>;
  /** A list of edges which contains the `UserMedicalRecordsDatum` and cursor to aid in pagination. */
  edges: Array<UserMedicalRecordsDataEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserMedicalRecordsDatum` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `UserMedicalRecordsDatum` edge in the connection. */
export type UserMedicalRecordsDataEdge = {
  __typename?: 'UserMedicalRecordsDataEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserMedicalRecordsDatum` at the end of the edge. */
  node?: Maybe<UserMedicalRecordsDatum>;
};

/** Methods to use when ordering `UserMedicalRecordsDatum`. */
export enum UserMedicalRecordsDataOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PartyIdAsc = 'PARTY_ID_ASC',
  PartyIdDesc = 'PARTY_ID_DESC',
  ExtSystemIdAsc = 'EXT_SYSTEM_ID_ASC',
  ExtSystemIdDesc = 'EXT_SYSTEM_ID_DESC',
  PartnerSysRequestRefIdAsc = 'PARTNER_SYS_REQUEST_REF_ID_ASC',
  PartnerSysRequestRefIdDesc = 'PARTNER_SYS_REQUEST_REF_ID_DESC',
  CreatedByAsc = 'CREATED_BY_ASC',
  CreatedByDesc = 'CREATED_BY_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  UpdatedByAsc = 'UPDATED_BY_ASC',
  UpdatedByDesc = 'UPDATED_BY_DESC',
  DeletedAtAsc = 'DELETED_AT_ASC',
  DeletedAtDesc = 'DELETED_AT_DESC',
  DeletedByAsc = 'DELETED_BY_ASC',
  DeletedByDesc = 'DELETED_BY_DESC',
  PatientResourceIdAsc = 'PATIENT_RESOURCE_ID_ASC',
  PatientResourceIdDesc = 'PATIENT_RESOURCE_ID_DESC',
  RecordStatusAsc = 'RECORD_STATUS_ASC',
  RecordStatusDesc = 'RECORD_STATUS_DESC',
  ImportStatusAsc = 'IMPORT_STATUS_ASC',
  ImportStatusDesc = 'IMPORT_STATUS_DESC',
  SystemNameAsc = 'SYSTEM_NAME_ASC',
  SystemNameDesc = 'SYSTEM_NAME_DESC',
  CurrentStatusAsc = 'CURRENT_STATUS_ASC',
  CurrentStatusDesc = 'CURRENT_STATUS_DESC',
  CurrentStatusMessageAsc = 'CURRENT_STATUS_MESSAGE_ASC',
  CurrentStatusMessageDesc = 'CURRENT_STATUS_MESSAGE_DESC',
  TotalNoOfDocumentsAsc = 'TOTAL_NO_OF_DOCUMENTS_ASC',
  TotalNoOfDocumentsDesc = 'TOTAL_NO_OF_DOCUMENTS_DESC'
}

export type UserMedicalRecordsDatum = {
  __typename?: 'UserMedicalRecordsDatum';
  id?: Maybe<Scalars['UUID']>;
  partyId?: Maybe<Scalars['UUID']>;
  extSystemId?: Maybe<Scalars['UUID']>;
  partnerSysRequestRefId?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['UUID']>;
  createdAt?: Maybe<Scalars['Datetime']>;
  updatedAt?: Maybe<Scalars['Datetime']>;
  updatedBy?: Maybe<Scalars['UUID']>;
  deletedAt?: Maybe<Scalars['Datetime']>;
  deletedBy?: Maybe<Scalars['UUID']>;
  patientResourceId?: Maybe<Scalars['String']>;
  recordStatus?: Maybe<Scalars['Int']>;
  importStatus?: Maybe<Scalars['String']>;
  systemName?: Maybe<Scalars['String']>;
  currentStatus?: Maybe<Scalars['String']>;
  currentStatusMessage?: Maybe<Scalars['String']>;
  totalNoOfDocuments?: Maybe<Scalars['JSON']>;
};

/**
 * A condition to be used against `UserMedicalRecordsDatum` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type UserMedicalRecordsDatumCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partyId` field. */
  partyId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `extSystemId` field. */
  extSystemId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `partnerSysRequestRefId` field. */
  partnerSysRequestRefId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `createdBy` field. */
  createdBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `createdAt` field. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedAt` field. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `updatedBy` field. */
  updatedBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `deletedAt` field. */
  deletedAt?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `deletedBy` field. */
  deletedBy?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `patientResourceId` field. */
  patientResourceId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordStatus` field. */
  recordStatus?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `importStatus` field. */
  importStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `systemName` field. */
  systemName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `currentStatus` field. */
  currentStatus?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `currentStatusMessage` field. */
  currentStatusMessage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `totalNoOfDocuments` field. */
  totalNoOfDocuments?: Maybe<Scalars['JSON']>;
};

/** A filter to be used against `UserMedicalRecordsDatum` object types. All fields are combined with a logical ‘and.’ */
export type UserMedicalRecordsDatumFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<UuidFilter>;
  /** Filter by the object’s `partyId` field. */
  partyId?: Maybe<UuidFilter>;
  /** Filter by the object’s `extSystemId` field. */
  extSystemId?: Maybe<UuidFilter>;
  /** Filter by the object’s `partnerSysRequestRefId` field. */
  partnerSysRequestRefId?: Maybe<StringFilter>;
  /** Filter by the object’s `createdBy` field. */
  createdBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `updatedBy` field. */
  updatedBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `deletedAt` field. */
  deletedAt?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `deletedBy` field. */
  deletedBy?: Maybe<UuidFilter>;
  /** Filter by the object’s `patientResourceId` field. */
  patientResourceId?: Maybe<StringFilter>;
  /** Filter by the object’s `recordStatus` field. */
  recordStatus?: Maybe<IntFilter>;
  /** Filter by the object’s `importStatus` field. */
  importStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `systemName` field. */
  systemName?: Maybe<StringFilter>;
  /** Filter by the object’s `currentStatus` field. */
  currentStatus?: Maybe<StringFilter>;
  /** Filter by the object’s `currentStatusMessage` field. */
  currentStatusMessage?: Maybe<StringFilter>;
  /** Filter by the object’s `totalNoOfDocuments` field. */
  totalNoOfDocuments?: Maybe<JsonFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserMedicalRecordsDatumFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserMedicalRecordsDatumFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserMedicalRecordsDatumFilter>;
};

export type UserProfile = {
  __typename?: 'UserProfile';
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  healthcarepersonalcheck?: Maybe<Scalars['Boolean']>;
  professionidentifier?: Maybe<Scalars['String']>;
  dateofbirth?: Maybe<Scalars['String']>;
  language?: Maybe<Scalars['String']>;
  contactmobilephone?: Maybe<Scalars['String']>;
  termsconditionsagreement?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  skype?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  jobtitle?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type UserProfileResponse = {
  __typename?: 'UserProfileResponse';
  status?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  data?: Maybe<UserLhcForm>;
};

export type UserTokenResponse = {
  __typename?: 'UserTokenResponse';
  status?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `UserTourProgressType` */
export type UserTourProgressTypeInput = {
  tourTypeValue?: Maybe<Scalars['String']>;
  completedSteps?: Maybe<Scalars['Int']>;
  tourTargetId?: Maybe<Scalars['String']>;
  lastCompletedStepIndex?: Maybe<Scalars['Int']>;
  isCompleted?: Maybe<Scalars['Boolean']>;
  tourTriggerType?: Maybe<Scalars['Int']>;
};

/** All input for the `validateEmailData` mutation. */
export type ValidateEmailDataInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  arg0?: Maybe<Scalars['String']>;
};

/** The output of our `validateEmailData` mutation. */
export type ValidateEmailDataPayload = {
  __typename?: 'ValidateEmailDataPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  boolean?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `validateToken` mutation. */
export type ValidateTokenInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  authToken?: Maybe<Scalars['String']>;
};

/** The output of our `validateToken` mutation. */
export type ValidateTokenPayload = {
  __typename?: 'ValidateTokenPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  string?: Maybe<Scalars['String']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ValidateTokenResponse = {
  __typename?: 'ValidateTokenResponse';
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
};

/** All input for the `validateUserProfileV1` mutation. */
export type ValidateUserProfileV1Input = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalSystemId?: Maybe<Scalars['UUID']>;
};

/** The output of our `validateUserProfileV1` mutation. */
export type ValidateUserProfileV1Payload = {
  __typename?: 'ValidateUserProfileV1Payload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  validationInfo?: Maybe<ValidationInfo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ValidationDatum = {
  __typename?: 'ValidationDatum';
  field?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  fieldValue?: Maybe<Scalars['String']>;
};

export type ValidationInfo = {
  __typename?: 'ValidationInfo';
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Array<Maybe<ValidationDatum>>>;
};

export type VerificationMeta = {
  __typename?: 'VerificationMeta';
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  patientExternalId?: Maybe<Scalars['String']>;
  patientId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  validationInfo?: Maybe<ValidationInfo>;
  externalSystem?: Maybe<ExternalSystemInfo>;
};

/** An input for mutations affecting `VerificationResult` */
export type VerificationResultInput = {
  externalSystemPatientId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  errorType?: Maybe<Scalars['String']>;
};

export type VerifiedPatientResource = {
  __typename?: 'VerifiedPatientResource';
  partyId?: Maybe<Scalars['UUID']>;
  transactionId?: Maybe<Scalars['String']>;
  externalSystemPartyId?: Maybe<Scalars['String']>;
  verificationStatus?: Maybe<Scalars['Int']>;
};

/** All input for the `verifyUserEmail` mutation. */
export type VerifyUserEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** The output of our `verifyUserEmail` mutation. */
export type VerifyUserEmailPayload = {
  __typename?: 'VerifyUserEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  emailVerificationResult?: Maybe<EmailVerificationResult>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

/** All input for the `verifyUserExists` mutation. */
export type VerifyUserExistsInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

/** The output of our `verifyUserExists` mutation. */
export type VerifyUserExistsPayload = {
  __typename?: 'VerifyUserExistsPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userExists?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};
